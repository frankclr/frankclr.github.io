<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C#单文件可执行程序发布</title>
    <url>/2024/07/30/C-%E5%8D%95%E6%96%87%E4%BB%B6%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F%E5%8F%91%E5%B8%83/</url>
    <content><![CDATA[<ul>
<li><p>1 Create a new HelloWorld app: <code>HelloWorld$ dotnet new console</code></p>
</li>
<li><p>2 Framework Dependent Publish</p>
<ul>
<li>Normal publish: <code>dotnet publish</code><ul>
<li>Published files: <code>HelloWorld.exe, HelloWorld.dll, HelloWorld.deps.json, HelloWorld.runtimeconfig.json, HelloWorld.pdb</code></li>
</ul>
</li>
<li>Single-file publish: <code>dotnet publish -r win-x64 --self-contained=false /p:PublishSingleFile=true</code><ul>
<li>Published files: <code>HelloWorld.exe, HelloWorld.pdb</code></li>
</ul>
</li>
</ul>
</li>
<li><p>3 Self-Contained Publish</p>
<ul>
<li>Normal publish: <code>dotnet publish -r win-x64</code><ul>
<li>Published files: <code>HelloWorld.exe, HelloWorld.pdb, and 224 more files</code></li>
</ul>
</li>
<li>Single-file publish Linux: <code>dotnet publish -r linux-x64 /p:PublishSingleFile=true</code><ul>
<li>Published files: <code>HelloWorld, HelloWorld.pdb</code></li>
</ul>
</li>
<li>Single-file publish Windows: <code>dotnet publish -r win-x64 /p:PublishSingleFile=true</code><ul>
<li>Published files: <code>HelloWorld.exe, HelloWorld.pdb, coreclr.dll, clrjit.dll, clrcompression.dll, mscordaccore.dll</code></li>
</ul>
</li>
<li>Single-file publish Windows with Extraction: <code>dotnet publish -r win-x64 /p:PublishSingleFile=true /p:IncludeNativeLibrariesForSelfExtract=true</code><ul>
<li>Published files: <code>HelloWorld.exe, HelloWorld.pdb</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<p><a href="https://github.com/dotnet/designs/blob/main/accepted/2020/single-file/design.md">Single-file Publish</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>A类和B类互相引用的解释</title>
    <url>/2024/07/31/A%E7%B1%BB%E5%92%8CB%E7%B1%BB%E4%BA%92%E7%9B%B8%E5%BC%95%E7%94%A8%E7%9A%84%E8%A7%A3%E9%87%8A/</url>
    <content><![CDATA[<h4 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h4><p>2 C# classes contain each other as a member<br>I have two c# classes A,B.</p>
<p>And the code is something like this</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Class A</span><br><span class="line">&#123;</span><br><span class="line">     B object1;</span><br><span class="line">     <span class="built_in">bool</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class B       </span><br><span class="line">&#123;     </span><br><span class="line">    A object2;        </span><br><span class="line">    <span class="built_in">bool</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Is this even possible? If it is what does this mean? A has object of B which has object of A…. it can go on..</p>
<h4 id="Answer"><a href="#Answer" class="headerlink" title="Answer:"></a>Answer:</h4><blockquote>
<p>Is this even possible?<br>Sure, it is possible - you can confirm it by compiling.<br>If it is what does this mean? A has object of B which has object of A…. it can go on..</p>
</blockquote>
<p>To understand this, you need to understand difference between value types (struct) and reference types (class).</p>
<p>You can think of struct like single plain piece of memory. All fields in struct are just placed one by one. If some of these fields are also structs, then all fields of that ‘child’ struct should be placed inside that plain memory piece of ‘parent’ struct, and so on. So when you declare value-type variable, you are knowing for sure, exactly, how each and every fields of such struct will be aligned in one memory piece. And with struct it is not possible to have cases like you mentioned, when A has field of B which has field of A etc.</p>
<p>Reference types (classes) are different type of thing. When you operate with value of reference type, you operate with actually reference to some memory piece. You can think of reference (while it is not exactly true, but really simplifies things) as just integer number. So whenever you use reference type variable, regardless it’s type, you just use it’s reference, some int value. Class members itself created in separate memory pieces. So all you have with references in your case - it’s something like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A =&gt; B</span><br><span class="line">B =&gt; A</span><br></pre></td></tr></table></figure>

<p>Or, something like this</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A &lt;=&gt; B</span><br></pre></td></tr></table></figure>

<p>Nothing wrong with such definition, you have two objects which reference each other, like parent knowing its child, and child knowing its parent.</p>
<p>It is possible because class A should not keep all fields of class B - it just have a reference (integer number) to some other object.</p>
<p>CLR and compiler helps you with identifying types of that references, but basically case of classes referencing each other is the same as classes references just some other classes.</p>
<p>One more significant difference between struct and class - when you declare value type variable, you are actually creating it, reserving memory for it etc; when you declare reference type variable, you are actually creating reference, which will be initialized as null reference, thus referencing nowhere. So it’s easy to create instances of class A and class B - theres fields just reference nowhere; but it’s impossible to create such structs A and B, as you would have to create everything at once, which is impossible with limited time and memory.</p>
<p>And small experiment to prove it all. Consider two cases. First like the one in question:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Class_A</span> &#123; <span class="keyword">public</span> Class_B b; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Class_B</span> &#123; <span class="keyword">public</span> Class_A a; &#125;</span><br></pre></td></tr></table></figure>
<p>It compiles without issues.<br>And second similar to first, but with structs:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Struct_A &#123; <span class="keyword">public</span> Struct_B b; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Struct_B &#123; <span class="keyword">public</span> Struct_A a; &#125;</span><br></pre></td></tr></table></figure>
<p>First one compiles without issues, second one fails with error:</p>
<blockquote>
<p>CS0523: Struct member ‘Struct_A.b’ of type ‘Struct_B’ causes a cycle in the struct layout</p>
</blockquote>
<blockquote>
<blockquote>
<p>What would happen if we had initializers that instantiated a new instance of each member? I am guessing it would compile fine, but we would get a stackoverflow exception at runtime, right?<br>– Boluc Papuccuoglu Mar 18 ‘14 at 18:54</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>If you mean constructor, then sure, it’s recursion like A:.ctor() -&gt; B:.ctor() -&gt; A:.ctor -&gt; … etc, which is pure SO. As any recursion it will be compiled OK, as it’s up to developer to stop it when required. Basically it is what I’m trying to describe - when you need to ‘plain out’ whole chain at once, then it is not possible; if you can create objects first, and then create relations for them (like for graph with cycles, first create vertexes of graph, then assign edge relations between them) - then it is absolutely ‘legal’ and possible. </p>
</blockquote>
</blockquote>
<p>在C++的类定义中，是不能够在类中定义自身类的对象的，但是可以定义自身类的指针对象和引用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span>:<span class="built_in">A</span> ()</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Constructor method.&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;;</span><br><span class="line">  A a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> A aaaaa;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码编译提示错误，a’ : uses ‘A’,which is being defined。如果把a换成*a就可以了。</p>
<p>而java就可以在类中定义自身类的对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">a</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> a aa;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的代码可以顺利编译，但是如果在定义的时候创建了对象实例，则也会编译失败的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">a</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> a aa ＝ <span class="keyword">new</span> <span class="title class_">a</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>提示错误：</p>
<blockquote>
<p>Exception in thread “main”java.lang.StackOverflowError at test1$abc.<init>(test1.java:4)<br>很明显，堆栈溢出了。</p>
</blockquote>
<p>为什么呢？其实以上问题的本质是一致的，就是是创建对象实例的时机问题。</p>
<p>在C++中，在定义对象的时候就创建了对象的实例，即分配了对象的内存空间。在java中，只有调用new的方法才能创建对象的实例，在内存中分配对象的空间。所以，如果在定义的时候就定义自身类的对象，就会导致递归创建对象的现象，创建了对象aa，因为aa是一个A类的实例，那么aa中还有一个aa对象，还要创建一个aa对象，为其分配内存…………，这样就会导致递归创建对象，结果就是内存被消耗殆尽。当然，这样的设计本身也不合理。</p>
<p>在JAVA中，对象只有在new时才能创建对象实例，所以类中可以定义自身类的对象。如果把上例修改成令一个类的实例，则不会有任何问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">a</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> b bb ＝ <span class="keyword">new</span> <span class="title class_">b</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的代码是可以编译并运行的。<br>但如果在java的类中用new创建自身的对象时，将其声明为static则是可以的。这是因为static成员只在类的对象被创建或类的静态成员（方法）被调用时进行一次初始化，其后即再不创建和初始化。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;a=<span class="subst">&#123;A.a&#125;</span>  b=<span class="subst">&#123;B.b&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">A</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> a &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = B.b + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">B</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> b &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = A.a + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=2  b=1</span><br></pre></td></tr></table></figure>

<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           Console.WriteLine(<span class="string">$&quot;b=<span class="subst">&#123;B.b&#125;</span>  a=<span class="subst">&#123;A.a&#125;</span>&quot;</span>);</span><br><span class="line">           <span class="comment">//Console.WriteLine($&quot;a=&#123;A.a&#125;  b=&#123;B.b&#125;&quot;);</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b=2  a=1</span><br></pre></td></tr></table></figure>
<p>参考:<br><a href="https://stackoverflow.com/questions/22477984/2-c-sharp-classes-contain-each-other-as-a-member">2 C# classes contain each other as a member</a><br><a href="https://blog.csdn.net/xijiaoda_liuhao/article/details/6823408">类中定义自身类对象</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>C#正则表达式介绍</title>
    <url>/2024/07/30/C-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>Regex 类表示不可变（只读）的正则表达式。它还包含各种静态方法，允许在不显式创建其他类的实例的情况下使用其他正则表达式类。</p>
<p><strong>正则表达式基础概述</strong><br>什么是正则表达式</p>
<p>在编写字符串的处理程序时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。<br>通常，我们在使用WINDOWS查找文件时，会使用通配符（*和?）。如果你想查找某个目录下的所有Word文档时，你就可以使用*.doc进行查找，在这里，*就被解释为任意字符串。和通配符类似，正则表达式也是用来进行文本匹配的工具，只不过比起通配符，它能更精确地描述你的需求——当然，代价就是更复杂。</p>
<h3 id="一、C-正则表达式符号模式"><a href="#一、C-正则表达式符号模式" class="headerlink" title="一、C#正则表达式符号模式"></a>一、C#正则表达式符号模式</h3><style>
table th:first-of-type {
    width: 100px;
}
</style>
<table>
<thead>
<tr>
<th>符号</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>\</td>
<td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ’\’ 匹配 “\” 而 “(” 则匹配 “(“</td>
</tr>
<tr>
<td>^</td>
<td>匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ’\n’ 或 ’\r’ 之后的位置</td>
</tr>
<tr>
<td>$</td>
<td>匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ’\n’ 或 ’\r’ 之前的位置</td>
</tr>
<tr>
<td>*</td>
<td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}</td>
</tr>
<tr>
<td>+</td>
<td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}</td>
</tr>
<tr>
<td>?</td>
<td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 中的”do” 。? 等价于 {0,1}</td>
</tr>
<tr>
<td>{n}</td>
<td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ’o’，但是能匹配 “food” 中的两个 o</td>
</tr>
<tr>
<td>{n,}</td>
<td>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ’o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ’o+’。’o{0,}’ 则等价于 ’o*’</td>
</tr>
<tr>
<td>{n,m}</td>
<td>m 和 n 均为非负整数，其中n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ’o?’。请注意在逗号和两个数之间不能有空格</td>
</tr>
<tr>
<td>?</td>
<td>当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ’o+’ 将匹配所有 ’o’</td>
</tr>
<tr>
<td>.</td>
<td>匹配除 “\n” 之外的任何单个字符。要匹配包括 ’\n’ 在内的任何字符，请使用象 ’[.\n]’ 的模式</td>
</tr>
<tr>
<td>(pattern)</td>
<td>匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ’(’ 或 ’)’</td>
</tr>
<tr>
<td>(?:pattern)</td>
<td>匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (</td>
</tr>
<tr>
<td>(?&#x3D;pattern)</td>
<td>正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，’Windows (?&#x3D;95</td>
</tr>
<tr>
<td>(?!pattern)</td>
<td>负向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如’Windows (?!95</td>
</tr>
<tr>
<td>x</td>
<td>y</td>
</tr>
<tr>
<td>[xyz]</td>
<td>字符集合。匹配所包含的任意一个字符。例如， ’[abc]’ 可以匹配 “plain” 中的 ’a’</td>
</tr>
<tr>
<td>[^xyz]</td>
<td>负值字符集合。匹配未包含的任意字符。例如， ’[^abc]’ 可以匹配 “plain” 中的’p’</td>
</tr>
<tr>
<td>[a-z]</td>
<td>字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ’a’ 到 ’z’ 范围内的任意小写字母字符</td>
</tr>
<tr>
<td>[^a-z]</td>
<td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ’a’ 到 ’z’ 范围内的任意字符</td>
</tr>
<tr>
<td>\b</td>
<td>匹配一个单词边界，也就是指单词和空格间的位置。例如， ’er\b’ 可以匹配”never” 中的 ’er’，但不能匹配 “verb” 中的 ’er’</td>
</tr>
<tr>
<td>\B</td>
<td>匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ’c’ 字符</td>
</tr>
<tr>
<td>\d</td>
<td>匹配一个数字字符。等价于 [0-9]</td>
</tr>
<tr>
<td>\D</td>
<td>匹配一个非数字字符。等价于 [^0-9]</td>
</tr>
<tr>
<td>\f</td>
<td>匹配一个换页符。等价于 \x0c 和 \cL</td>
</tr>
<tr>
<td>\n</td>
<td>匹配一个换行符。等价于 \x0a 和 \cJ</td>
</tr>
<tr>
<td>\r</td>
<td>匹配一个回车符。等价于 \x0d 和 \cM</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任何非空白字符。等价于 [^ \f\n\r\t\v]</td>
</tr>
<tr>
<td>\t</td>
<td>匹配一个制表符。等价于 \x09 和 \cI</td>
</tr>
<tr>
<td>\v</td>
<td>匹配一个垂直制表符。等价于 \x0b 和 \cK</td>
</tr>
<tr>
<td>\w</td>
<td>匹配包括下划线的任何单词字符。等价于’[A-Za-z0-9_]’</td>
</tr>
<tr>
<td>\W</td>
<td>匹配任何非单词字符。等价于 ’[^A-Za-z0-9_]’</td>
</tr>
<tr>
<td>\xn</td>
<td>匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ’\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码</td>
</tr>
<tr>
<td>\num</td>
<td>匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符</td>
</tr>
<tr>
<td>\n</td>
<td>标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值</td>
</tr>
<tr>
<td>\nm</td>
<td>标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm</td>
</tr>
<tr>
<td>\nml</td>
<td>如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml</td>
</tr>
<tr>
<td>\un</td>
<td>匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)</td>
</tr>
<tr>
<td>说明：</td>
<td></td>
</tr>
<tr>
<td>由于在正则表达式中“ \ ”、“ ? ”、“ * ”、“ ^ ”、“ $ ”、“ + ”、“（”、“）”、“</td>
<td>”、“ { ”、“ [ ”等字符已经具有一定特殊意义，如果需要用它们的原始意义，则应该对它进行转义，例如希 望在字符串中至少有一个“ \ ”，那么正则表达式应该这么写： \+ 。</td>
</tr>
</tbody></table>
<h3 id="二、在C-中，要使用正则表达式类，请在源文件开头处添加以下语句："><a href="#二、在C-中，要使用正则表达式类，请在源文件开头处添加以下语句：" class="headerlink" title="二、在C#中，要使用正则表达式类，请在源文件开头处添加以下语句："></a>二、在C#中，要使用正则表达式类，请在源文件开头处添加以下语句：</h3><p>代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Text.RegularExpressions;</span><br></pre></td></tr></table></figure>


<h3 id="三、RegEx类常用的方法"><a href="#三、RegEx类常用的方法" class="headerlink" title="三、RegEx类常用的方法"></a>三、RegEx类常用的方法</h3><h4 id="1、静态Match方法"><a href="#1、静态Match方法" class="headerlink" title="1、静态Match方法"></a>1、静态Match方法</h4><p>使用静态Match方法，可以得到源中第一个匹配模式的连续子串。</p>
<p>静态的Match方法有2个重载，分别是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Regex.Match(string input, string pattern);</span><br><span class="line">Regex.Match(string input, string pattern, RegexOptions options);</span><br></pre></td></tr></table></figure>

<p>第一种重载的参数表示：输入、模式</p>
<p>第二种重载的参数表示：输入、模式、<code>RegexOptions</code>枚举的“按位或”组合。</p>
<p>RegexOptions枚举的有效值是：</p>
<ul>
<li><code>Complied</code>表示编译此模式</li>
<li><code>CultureInvariant</code>表示不考虑文化背景</li>
<li><code>ECMAScrip</code>t表示符合<code>ECMAScript</code>，这个值只能和<code>IgnoreCase</code>、<code>Multiline</code>、<code>Complied</code>连用</li>
<li><code>ExplicitCapture</code>表示只保存显式命名的组</li>
<li><code>IgnoreCase</code>表示不区分输入的大小写</li>
<li><code>IgnorePatternWhitespace</code>表示去掉模式中的非转义空白，并启用由#标记的注释</li>
<li><code>Multiline</code>表示多行模式，改变元字符<code>^</code>和<code>$</code>的含义，它们可以匹配行的开头和结尾</li>
<li><code>None</code>表示无设置，此枚举项没有意义</li>
<li><code>RightToLeft</code>表示从右向左扫描、匹配，这时，静态的Match方法返回从右向左的第一个匹配</li>
<li><code>Singleline</code>表示单行模式，改变元字符.的意义，它可以匹配换行符</li>
</ul>
<p>注意：<code>Multiline</code>在没有<code>ECMAScript</code>的情况下，可以和<code>Singleline</code>连用。<code>Singleline</code>和<code>Multiline</code>不互斥，但是和<code>ECMAScript</code>互斥。</p>
<h4 id="2、静态的Matches方法"><a href="#2、静态的Matches方法" class="headerlink" title="2、静态的Matches方法"></a>2、静态的Matches方法</h4><p>这个方法的重载形式同静态的Match方法，返回一个MatchCollection，表示输入中，匹配模式的匹配的集合。</p>
<h4 id="3、静态的IsMatch方法"><a href="#3、静态的IsMatch方法" class="headerlink" title="3、静态的IsMatch方法"></a>3、静态的IsMatch方法</h4><p>此方法返回一个bool，重载形式同静态的Matches，若输入中匹配模式，返回true，否则返回false。<br>可以理解为：IsMatch方法，返回Matches方法返回的集合是否为空。</p>
<h3 id="四、RegEx类的实例"><a href="#四、RegEx类的实例" class="headerlink" title="四、RegEx类的实例"></a>四、RegEx类的实例</h3><h4 id="1-字符串替换"><a href="#1-字符串替换" class="headerlink" title="1.字符串替换"></a>1.字符串替换</h4><p>例如我想把如下格式记录中的NAME值修改为WANG</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string line=&quot;ADDR=1234;NAME=ZHANG;PHONE=6789&quot;;</span><br><span class="line">Regex reg = new Regex(&quot;NAME=(.+);&quot;);</span><br><span class="line">string modified = reg.Replace(line, &quot;NAME=WANG;&quot;);</span><br></pre></td></tr></table></figure>
<p>修改后的字符串为 <code>ADDR=1234;NAME=WANG;PHONE=6789</code></p>
<h4 id="2-字符串匹配"><a href="#2-字符串匹配" class="headerlink" title="2.字符串匹配"></a>2.字符串匹配</h4><p>例如我想提取刚才那条记录中的NAME值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Regex reg = new Regex(&quot;NAME=(.+);&quot;);</span><br><span class="line">Match match=reg.Match(line);</span><br><span class="line">string value=match.Groups[1].Value;</span><br></pre></td></tr></table></figure>
<h4 id="3、Match实例"><a href="#3、Match实例" class="headerlink" title="3、Match实例"></a>3、Match实例</h4><p>文本中含有”speed&#x3D;30.2mph”,需要提取该速度值，但是速度的单位可能是公制也可能是英制，mph,km&#x2F;h,m&#x2F;s都有可能；另外前后可能有空格。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string line=&quot;lane=1;speed=30.3mph;acceleration=2.5mph/s&quot;;</span><br><span class="line">Regex reg=new Regex(@&quot;speed\s*=\s*([\d\.]+)\s*(mph|km/h|m/s)*&quot;);</span><br><span class="line">Match match=reg.Match(line);</span><br></pre></td></tr></table></figure>
<p>那么在返回的结果中match.Groups[1].Value将含有数值，而match.Groups[2].Value将含有单位。</p>
<h4 id="4、再比如，解码gps的GPRMC字符串，只需"><a href="#4、再比如，解码gps的GPRMC字符串，只需" class="headerlink" title="4、再比如，解码gps的GPRMC字符串，只需"></a>4、再比如，解码gps的GPRMC字符串，只需</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Regex reg = new Regex(@&quot;^\$GPRMC,[\d\.]*,[A|V],(-?[0-9]*\.?[0-9]+),([NS]*),(-?[0-9]*\.?[0-9]+),([EW]*),.*&quot;);</span><br></pre></td></tr></table></figure>
<p>就可以获得经度、纬度值，而以前需要几十行代码。</p>
<h3 id="五、System-Text-RegularExpressions命名空间的说明"><a href="#五、System-Text-RegularExpressions命名空间的说明" class="headerlink" title="五、System.Text.RegularExpressions命名空间的说明"></a>五、<code>System.Text.RegularExpressions</code>命名空间的说明</h3><p>该名称空间包括8个类，1个枚举，1个委托。他们分别是：</p>
<ul>
<li><code>Capture</code>: 包含一次匹配的结果；</li>
<li><code>CaptureCollection</code>: Capture的序列；</li>
<li><code>Group</code>: 一次组记录的结果，由Capture继承而来；</li>
<li><code>GroupCollection</code>：表示捕获组的集合</li>
<li><code>Match</code>: 一次表达式的匹配结果，由Group继承而来；</li>
<li><code>MatchCollection</code>: Match的一个序列；</li>
<li><code>MatchEvaluator</code>: 执行替换操作时使用的委托；</li>
<li><code>Regex</code>：编译后的表达式的实例。</li>
<li><code>RegexCompilationInfo</code>：提供编译器用于将正则表达式编译为独立程序集的信息</li>
<li><code>RegexOptions</code> 提供用于设置正则表达式的枚举值</li>
<li><code>Regex</code>类中还包含一些静态的方法：</li>
<li><code>Escape</code>: 对字符串中的regex中的转义符进行转义；</li>
<li><code>IsMatch</code>: 如果表达式在字符串中匹配，该方法返回一个布尔值；</li>
<li><code>Match</code>: 返回Match的实例；</li>
<li><code>Matches</code>: 返回一系列的Match的方法；</li>
<li><code>Replace</code>: 用替换字符串替换匹配的表达式；</li>
<li><code>Split</code>: 返回一系列由表达式决定的字符串；</li>
<li><code>Unescape</code>:不对字符串中的转义字符转义。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 转义字符串中所有正则特殊字符</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;input&quot;&gt;传入字符串&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">static string FilterString(string input)</span><br><span class="line">&#123;</span><br><span class="line">    input = input.Replace(&quot;\\&quot;, &quot;\\\\&quot;);//先替换“\”，不然后面会因为替换出现其他的“\”</span><br><span class="line">    Regex regex = new Regex(&quot;[\\*\\.\\?\\+\\$\\^\\[\\]\\(\\)\\&#123;\\&#125;\\|\\/]&quot;);</span><br><span class="line">    MatchCollection ms = regex.Matches(input);</span><br><span class="line">    List list = new List();</span><br><span class="line">    foreach (Match item in ms)</span><br><span class="line">    &#123;</span><br><span class="line">        if (list.Contains(item.Value))</span><br><span class="line">            continue;</span><br><span class="line">        input = input.Replace(item.Value, &quot;\\&quot; + item.Value);</span><br><span class="line">        list.Add(item.Value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian使用</title>
    <url>/2024/07/30/Debian%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><strong>建议使用 DVD 镜像安装。</strong><br><strong>“小型安装镜像”必须联网，由于网络环境，可能系统安装出错而又没有明显的信息提示，然后出现奇怪的问题</strong>【或开启代理】<br><strong>Hyper-V网络使用新建的外部网络， Default Switch和内部网络总会有各种问题。</strong></p>
<ul>
<li>出现过，MySQL的docker镜像内存耗尽问题</li>
</ul>
<h3 id="Debian-进入单用户模式"><a href="#Debian-进入单用户模式" class="headerlink" title="Debian 进入单用户模式"></a>Debian 进入单用户模式</h3><p>在 Grub 启动界面中按  “e” 进入编辑模式，在以 <code>Linux</code> 开头的倒数第三行的最后添加 <code>init=/bin/bash</code><br>这样，将以只读的方式启动，自动进入 <code>root shell</code>。此时，如果直接执行编辑系统文件、重启、关机等操作，都会告知不允许。要想修改内容，执行<code>mount -o remount,rw /</code>再编辑文件，然后执行<code>exec /sbin/init</code> 进行系统初始化，或者执行 <code>reboot -f</code> 完成重启<br>在没有给 <code>root</code> 设置密码，使用高级启动的 <code>recovery mode</code> 也无法进入担任维护模式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">setparams &#x27;Debian GNU/Linux&#x27;</span><br><span class="line"></span><br><span class="line">    load_video</span><br><span class="line">    insmod gzio</span><br><span class="line">    if [ x$grub_platform = xxen ]; then insmod xzio; insmod lzopio; fi</span><br><span class="line">    insmod part_gpt</span><br><span class="line">    insmod ext2</span><br><span class="line">    set root=&#x27;hd0, gpt2&#x27;</span><br><span class="line">    if [ x$feature_platform_search_hint = xy ]; then</span><br><span class="line">      search -- no-floppy -- fs-uuid -- set=root -- hint-bios=hd0, gpt2 -- hint-efi=hd0, gpt2 -- hint-baremetal=ahcio, gpt2 f2920743-fc03-4be7-8d82-8dcd398395fc</span><br><span class="line">    else</span><br><span class="line">      search -- no-floppy -- fs-uuid -- set=root f2920743-fc03-4be7-8d82-8dcd398395fc</span><br><span class="line">    fi</span><br><span class="line">    echo &#x27;Loading Linux 6.1.0-37-amd64&#x27;</span><br><span class="line">    linux /boot/vmlinuz-6.1.0-37-amd64 root=UUID=f2920743-fc03-4be7-8d82-8dcd398395fc ro quiet</span><br><span class="line">    echo &#x27;Loading initial ramdisk ...&#x27;</span><br><span class="line">    initrd /boot/initrd. img-6.1.0-37-amd64</span><br></pre></td></tr></table></figure>

<h3 id="sudo-配置"><a href="#sudo-配置" class="headerlink" title="sudo 配置"></a>sudo 配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo visudo</span><br><span class="line">sudo vi /etc/sudoers</span><br></pre></td></tr></table></figure>

<p>内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Allow members of group sudo to execute any command</span><br><span class="line"># %sudo   ALL=(ALL:ALL) ALL</span><br><span class="line">%sudo   ALL=(ALL:ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure>

<p>sudo 会清空大部分环境变量（包括代理设置）以增强安全性</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo env | grep -i proxy</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加 -E 可以继承环境变量</span></span><br><span class="line">sudo -E curl https://www.google.com</span><br></pre></td></tr></table></figure>

<h3 id="设置静态IP"><a href="#设置静态IP" class="headerlink" title="设置静态IP"></a>设置静态IP</h3><p>备份、编辑 <code>/etc/network/interfaces</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># This file describes the network interfaces available on your system</span><br><span class="line"># and how to activate them. For more information, see interfaces(5).</span><br><span class="line"></span><br><span class="line">source /etc/network/interfaces.d/*</span><br><span class="line"></span><br><span class="line"># The loopback network interface</span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line"># auto 在系统启动的时候，启动网络接口,无论网络接口有无连接。</span><br><span class="line"># 如果该接口配置了 DHCP，则无论有无网线，系统都会 DHCP; 如果没有插入网线，则等该接口超时后才会继续</span><br><span class="line"></span><br><span class="line"># 只有当内核从网络接口检测到热插拔事件后（检测到有接入网线），才会启用该接口。</span><br><span class="line"># The primary network interface</span><br><span class="line">allow-hotplug eth0</span><br><span class="line">#iface eth0 inet dhcp</span><br><span class="line"># 静态配置 ipv4</span><br><span class="line">iface eth0 inet static</span><br><span class="line">address 192.168.1.18</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">gateway 192.168.1.1</span><br><span class="line"></span><br><span class="line"># This is an autoconfigured IPv6 interface</span><br><span class="line">iface eth0 inet6 auto</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编辑 <code>/etc/resolv.conf</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nameserver 61.139.2.69</span><br><span class="line">nameserver 218.6.200.139</span><br></pre></td></tr></table></figure>

<p>重启网络</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 重启网络服务，IP 改变后， 远程ssh 会掉，等改好后重启</span><br><span class="line">sudo systemctl restart networking.service</span><br><span class="line"># 设置 hostname</span><br><span class="line">sudo hostnamectl set-hostname node1</span><br><span class="line"># 同步 ntp时间</span><br><span class="line">sudo apt install systemd-timesyncd</span><br><span class="line">sudo timedatectl set-ntp true</span><br><span class="line">timedatectl status</span><br></pre></td></tr></table></figure>

<h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ca-certificates支持https</span></span><br><span class="line">sudo apt install curl git ca-certificates</span><br></pre></td></tr></table></figure>

<p>编辑 <code>~/.bashrc</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用socket5协议是 socks5:，不是 socket5:</span><br><span class="line">alias set-proxy=&quot;export http_proxy=socks5://192.168.1.3:10810 &amp;&amp; export https_proxy=socks5://192.168.1.3:10810 &amp;&amp; export ftp_proxy=socks5://192.168.1.3:10810 &amp;&amp; export all_proxy=socks5://192.168.1.3:10810 &amp;&amp; export no_proxy=localhost,127.0.0.1,::1&quot;</span><br><span class="line">alias unset-proxy=&quot;unset http_proxy https_proxy ftp_proxy all_proxy no_proxy&quot;</span><br></pre></td></tr></table></figure>

<h3 id="更换国内源"><a href="#更换国内源" class="headerlink" title="更换国内源"></a>更换国内源</h3><h4 id="使用官方工具-choose-mirror"><a href="#使用官方工具-choose-mirror" class="headerlink" title="使用官方工具 choose-mirror"></a>使用官方工具 choose-mirror</h4><p>choose-mirror 是 Debian 安装器内部调用的标准组件；<br>可以在最小化系统上使用它，重新进入国家选择 &gt; 镜像站点的流程；<br>适用于没有图形界面、仅命令行环境下的主机或虚拟机；</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install choose-mirror</span><br><span class="line">sudo choose-mirror -a amd64 /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<h4 id="1-备份"><a href="#1-备份" class="headerlink" title="1. 备份"></a>1. 备份</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.back</span><br></pre></td></tr></table></figure>

<h4 id="2-编辑-etc-apt-sources-list使用国内镜像"><a href="#2-编辑-etc-apt-sources-list使用国内镜像" class="headerlink" title="2. 编辑/etc/apt/sources.list使用国内镜像"></a>2. 编辑<code>/etc/apt/sources.list</code>使用国内镜像</h4><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/debian/">清华镜像</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware</span><br><span class="line"></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware</span><br><span class="line"></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware</span><br><span class="line"></span><br><span class="line"># 以下安全更新软件源包含了官方源与镜像站配置，如有需要可自行修改注释切换</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian-security bookworm-security main contrib non-free non-free-firmware</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security bookworm-security main contrib non-free non-free-firmware</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install aria2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-x 16：最多使用 16 个连接下载同一个文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-s 16：最多 16 个服务器来源（通常用于 Metalink 或分片）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">并发太高可能被服务器限制或封锁，通常 8～16 较稳妥。</span></span><br><span class="line">aria2c -x 16 -s 16 https://example.com/file.iso</span><br><span class="line">sudo apt install vim</span><br></pre></td></tr></table></figure>

<h4 id="3-更新索引"><a href="#3-更新索引" class="headerlink" title="3. 更新索引"></a>3. 更新索引</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有已下载的包文件</span></span><br><span class="line">sudo apt clean</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取回更新的软件包列表信息</span></span><br><span class="line">sudo apt update</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进行一次升级</span></span><br><span class="line">sudo apt upgrade</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Debian 默认http源，需要切换到国内源，而国内源使用的是https</span></span><br><span class="line">sudo apt install ca-certificates git</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 docker， docker.io 是 Debian 维护的， 版本较老； docker-ce 是官方维护的，有最新版</span></span><br><span class="line">sudo apt install docker.io</span><br><span class="line">sudo usermod -aG docker $USER</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">应用新组或重新登录</span></span><br><span class="line">newgrp docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">sudo</span> 环境似乎不走代理，分两步</span></span><br><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; \</span><br><span class="line"> -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; \</span><br><span class="line"> -o docker-compose</span><br><span class="line">sudo mv docker-compose /usr/local/bin/</span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p><code>sudo apt update</code> 如果报错 <code>Certificate verification failed: The certificate is NOT trusted. The certificate issuer is unknown.  Could not handshake: Error in the certificate verification.</code>，要么改用<code>http</code>协议，或者创建<code>/etc/apt/apt.conf.d/99verify-peer.conf</code>, 并添加内容<code>Acquire &#123;https::Verify-Peer false&#125;</code></p>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker运行数据库</title>
    <url>/2024/07/30/Docker%E8%BF%90%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h2 id="运行MySQL-5-7"><a href="#运行MySQL-5-7" class="headerlink" title="运行MySQL 5.7"></a>运行MySQL 5.7</h2><p>创建MySQL相关目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir /data/database</span><br><span class="line">sudo chown -R frank:frank /data/database</span><br><span class="line">mkdir -p /data/database/mysql57</span><br><span class="line">cd /data/database/mysql57</span><br><span class="line">mkdir log conf data</span><br></pre></td></tr></table></figure>

<p>在conf目录存放配置文件<code>my.cnf</code>(官方默认配置文件名称为<code>my.cnf</code>。如果想更改，名称要与下面的 docker 命令中映射的一致),内容如下:</p>
<p>MySQL 5.7版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 5.7.20版本开始支持设置utf8mb4字符集</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">collation-server=utf8mb4_unicode_ci</span><br><span class="line">init_connect=&#x27;SET NAMES utf8mb4&#x27;</span><br><span class="line"># 此选项 8.4 不再可用，要报错</span><br><span class="line">skip-character-set-client-handshake=false</span><br><span class="line">bind-address = 0.0.0.0</span><br><span class="line"></span><br><span class="line"># 内存优化</span><br><span class="line">innodb_buffer_pool_size = 1G   # 设置 InnoDB Buffer Pool 的大小，建议总内存的 50%~70%</span><br><span class="line">innodb_buffer_pool_instances = 2  # 增加分片，提高性能</span><br><span class="line"></span><br><span class="line">max_connections = 200  # 限制最大连接数，避免消耗过多内存</span><br><span class="line"></span><br><span class="line"># 控制临时表大小</span><br><span class="line">tmp_table_size = 64M</span><br><span class="line">max_heap_table_size = 64M</span><br><span class="line"></span><br><span class="line">query_cache_size = 32M   # 限制查询缓存大小</span><br><span class="line">query_cache_type = 1      # 启用查询缓存</span><br><span class="line"></span><br><span class="line"># 控制排序和连接缓冲</span><br><span class="line">sort_buffer_size = 2M</span><br><span class="line">join_buffer_size = 2M</span><br><span class="line">read_buffer_size = 2M</span><br><span class="line">read_rnd_buffer_size = 2M</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br></pre></td></tr></table></figure>

<p>命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker run -d  \</span><br><span class="line">--name mysql57 \</span><br><span class="line">--restart=always \</span><br><span class="line">--privileged=true \</span><br><span class="line">-v /data/database/mysql57/log:/var/log/mysql \</span><br><span class="line">-v /data/database/mysql57/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /data/database/mysql57/data:/var/lib/mysql \</span><br><span class="line">-p 23306:3306 \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">--memory=2g \</span><br><span class="line">--memory-swap=4g \</span><br><span class="line">mysql:5.7</span><br></pre></td></tr></table></figure>

<h2 id="MySQL-8-4-最新LTS版本"><a href="#MySQL-8-4-最新LTS版本" class="headerlink" title="MySQL 8.4(最新LTS版本)"></a>MySQL 8.4(最新LTS版本)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">collation-server=utf8mb4_unicode_ci</span><br><span class="line">init_connect=&#x27;SET NAMES utf8mb4&#x27;</span><br><span class="line">bind-address = 0.0.0.0</span><br><span class="line">default-time-zone = &#x27;+08:00&#x27;</span><br><span class="line"></span><br><span class="line"># 内存优化</span><br><span class="line">innodb_buffer_pool_size = 1G   # 设置 InnoDB Buffer Pool 的大小，建议总内存的 50%~70%</span><br><span class="line">innodb_buffer_pool_instances = 2  # 增加分片，提高性能</span><br><span class="line"></span><br><span class="line">max_connections = 200  # 限制最大连接数，避免消耗过多内存</span><br><span class="line"></span><br><span class="line"># 控制临时表大小</span><br><span class="line">tmp_table_size = 64M</span><br><span class="line">max_heap_table_size = 64M</span><br><span class="line"></span><br><span class="line"># 控制排序和连接缓冲</span><br><span class="line">sort_buffer_size = 2M</span><br><span class="line">join_buffer_size = 2M</span><br><span class="line">read_buffer_size = 2M</span><br><span class="line">read_rnd_buffer_size = 2M</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br></pre></td></tr></table></figure>

<p>命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker run -d  \</span><br><span class="line">--name mysql8lts \</span><br><span class="line">--restart=always \</span><br><span class="line">--privileged=true \</span><br><span class="line">-v /data/database/mysql8lts/log:/var/log/mysql \</span><br><span class="line">-v /data/database/mysql8lts/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /data/database/mysql8lts/data:/var/lib/mysql \</span><br><span class="line">-p 13306:3306 \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">--memory=2g \</span><br><span class="line">--memory-swap=4g \</span><br><span class="line">mysql:lts</span><br></pre></td></tr></table></figure>

<p>说明：在一开始错误配置的情况下，可能导致后面正确配置也会出问题。所以，在新建容器的时候，有必要清空创建容器时产生的错误数据</p>
<h2 id="运行-SQL-Server"><a href="#运行-SQL-Server" class="headerlink" title="运行 SQL Server"></a>运行 SQL Server</h2><p>创建对应目录，并修改权限(SQL Server镜像默认以 <code>mssql</code> 用户运行)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/database/mssql2022</span><br><span class="line">chown -R 10001:10001 /data/database/mssql2022</span><br></pre></td></tr></table></figure>

<p>运行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">密码应符合 SQL Server 默认密码策略，否则容器无法设置 SQL Server，将停止工作</span></span><br><span class="line">sudo docker run \</span><br><span class="line">-d \</span><br><span class="line">--name mssql2022  \</span><br><span class="line">--hostname mssql2022 \</span><br><span class="line">-v /data/database/mssql2022:/var/opt/mssql \</span><br><span class="line">-p 1433:1433  \</span><br><span class="line">-e &quot;ACCEPT_EULA=Y&quot; \</span><br><span class="line">-e &quot;MSSQL_SA_PASSWORD=@Passw0rd&quot; \</span><br><span class="line">-e &quot;TZ=Asia/Shanghai&quot; \</span><br><span class="line">-e &quot;MSSQL_COLLATION=Chinese_PRC_BIN2&quot; \</span><br><span class="line">mcr.microsoft.com/mssql/server:2022-latest</span><br></pre></td></tr></table></figure>

<p>其他环境变量</p>
<ul>
<li>MSSQL_AGENT_ENABLED	启用 SQL Server 代理。 例如，“true”为已启用，“false”为已禁用。 默认情况下，代理处于禁用状态</li>
<li>MSSQL_BACKUP_DIR	设置默认备份目录位置。</li>
<li>MSSQL_DATA_DIR	更改在其中创建新的 SQL Server 数据库数据文件 (.mdf) 的目录。</li>
<li>MSSQL_LOG_DIR	更改在其中创建新的 SQL Server 数据库日志 (.ldf) 文件的目录。</li>
<li>MSSQL_DUMP_DIR	更改 SQL Server 存放内存转储和其他故障排除文件的默认目录。</li>
<li>MSSQL_MASTER_DATA_FILE	设置 master 数据库数据文件的位置。 在首次运行 SQL Server 之前，必须将其命名为 master.mdf。</li>
<li>MSSQL_MASTER_LOG_FILE	设置 master 数据库日志文件的位置。 在首次运行 SQL Server 之前，必须将其命名为 mastlog.ldf。</li>
<li>MSSQL_ERROR_LOG_FILE	设置 errorlog 文件的位置。 例如 &#x2F;var&#x2F;opt&#x2F;mssql&#x2F;log&#x2F;errorlog</li>
</ul>
<p><a href="https://learn.microsoft.com/zh-cn/sql/linux/sql-server-linux-configure-mssql-conf?view=sql-server-ver16">使用 mssql-conf 工具配置 Linux 上的 SQL Server</a><br><a href="https://learn.microsoft.com/zh-cn/sql/linux/sql-server-linux-configure-environment-variables?view=sql-server-ver16">在 Linux 上使用环境变量配置 SQL Server 设置</a></p>
<h2 id="运行Redis"><a href="#运行Redis" class="headerlink" title="运行Redis"></a>运行Redis</h2><p>官方提供两个版本的镜像</p>
<ol>
<li><code>redis/redis-stack</code> 包含 Redis 服务和 可视化工具Redis Insight，适合本地开发</li>
<li><code>redis/redis-stack-server</code> 仅包含 Redis 服务，适合生产环境</li>
</ol>
<p>创建相关目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /data/database/redis</span><br><span class="line">cd /data/database/redis</span><br><span class="line">mkdir log data conf</span><br></pre></td></tr></table></figure>

<p>编辑配置文件<code>redis.conf</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 默认配置</span><br><span class="line">port 6379</span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line"># Specify the log file name. Also the empty string can be used to force</span><br><span class="line"># Redis to log on the standard output. Note that if you use standard</span><br><span class="line"># output for logging but daemonize, logs will be sent to /dev/null</span><br><span class="line"># logfile &quot;&quot;</span><br><span class="line">logfile &quot;/var/log/redis/redis.log&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker run \</span><br><span class="line">-d  \</span><br><span class="line">--restart=always  \</span><br><span class="line">--name redis \</span><br><span class="line">-p 16379:6379  \</span><br><span class="line">-p 18001:8001 \</span><br><span class="line">-e REDIS_ARGS=&quot;--requirepass 123456&quot; \</span><br><span class="line">-v /data/database/redis/conf/redis-stack.conf:/redis-stack.conf  \</span><br><span class="line">-v /data/database/redis/data:/data \</span><br><span class="line">-v  /data/database/redis/log:/var/log/redis  \</span><br><span class="line">redis/redis-stack:latest</span><br></pre></td></tr></table></figure>

<p>说明: <code>docker: invalid reference format.</code> 原因可能是</p>
<ol>
<li>英文<code>-</code>写成了 中文的<code>-</code>测试</li>
<li><code>\</code>与前面的内容缺少空格或Tab</li>
<li><code>\</code>后面存在多余的空格或Tab</li>
</ol>
<p>说明：启动多个 docker 容器，不用更改 redis 的端口配置，只需要在启动的时候使用<code>-p portOFServer:portOfContainer</code>指定就好。另外，多个 container 内部网络通信，使用docker内部网段，详细新可用<code>sudo docker netwrok ls</code> 和<code>sudo docker  inspect bridge</code> 查看</p>
<p><a href="https://redis.io/docs/latest/operate/oss_and_stack/install/install-stack/docker/">Run Redis Stack on Docker</a><br><a href="https://redis.io/docs/latest/operate/oss_and_stack/management/config/">Redis configuration</a></p>
<h2 id="运行-PostgresSQL"><a href="#运行-PostgresSQL" class="headerlink" title="运行 PostgresSQL"></a>运行 PostgresSQL</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> docker run -d \</span></span><br><span class="line"><span class="language-bash">    --name postgres \</span></span><br><span class="line"><span class="language-bash">    -e PGDATA=/var/lib/postgresql/data/pgdata \</span></span><br><span class="line"><span class="language-bash">    -v /data/database/postgres/data:/var/lib/postgresql/data \</span></span><br><span class="line"><span class="language-bash">    -p 15432:5432 \</span></span><br><span class="line"><span class="language-bash">    -e POSTGRES_PASSWORD=123456 \</span></span><br><span class="line"><span class="language-bash">    postgres:17.3-bookworm</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">debian镜像默认没有包括进程管理相关工具</span></span><br><span class="line">apt update &amp;&amp; apt install -y procps</span><br></pre></td></tr></table></figure>

<p>PostgreSQL的管理员账户名为postgres，默认用户名和数据库也是postgres，没有默认密码。<br>因为PostgreSQL使用Linux用户账户来验证用户，所以必须以Linux账户postgres登陆才能以postgres用户身份访问PostgreSQL服务器。</p>
<p>Docker使用 <code>Linux namespace</code> 和 <code>capabilities</code> 来实现容器隔离和限制权限。通过 <code>–cap-add</code> 和 <code>–cap-drop</code> 两个参数，可以灵活地添加或删除容器的 <code>capabilities</code>。</p>
<p>在默认情况下，Docker对容器的权限进行了严格的限制，只提供了有限的<code>capabilities</code>。此外，许多系统级别的操作（例如挂载文件系统、修改内核参数等）都是被禁止的。这种安全模型使得Docker可以在不牺牲安全性的前提下，实现轻量级的虚拟化。</p>
<p>然而，在某些情况下，我们可能需要赋予容器更多的权限。例如，如果我们需要在容器中运行一些需要特权的服务（如网络设备管理、硬件设备接口等），那么默认的权限可能就不够用了。这时候，<code>--privileged=true</code> 选项就派上了用场。<br>当使用<code>–privileged=true</code>选项运行容器时，Docker会赋予容器几乎与主机相同的权限。 具体来说，这个选项做了以下两件事情：</p>
<ol>
<li>给容器添加了所有的<code>capabilities</code></li>
<li>允许容器访问主机的所有设备</li>
</ol>
<p><a href="https://github.com/docker-library/docs/blob/master/postgres/README.md">the PostgreSQL Docker Quick reference</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>ELement打包到生产环境部分样式丢失</title>
    <url>/2024/07/30/ELement%E6%89%93%E5%8C%85%E5%88%B0%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E9%83%A8%E5%88%86%E6%A0%B7%E5%BC%8F%E4%B8%A2%E5%A4%B1/</url>
    <content><![CDATA[<p>编辑<code>项目/build/utils.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Extract CSS when that option is specified</span><br><span class="line">// (which is the case during production build)</span><br><span class="line">if (options.extract) &#123;</span><br><span class="line">  return ExtractTextPlugin.extract(&#123;</span><br><span class="line">    use: loaders,</span><br><span class="line">    fallback: &#x27;vue-style-loader&#x27;,</span><br><span class="line">    publicPath: &#x27;../../&#x27;  // 添加此句</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  return [&#x27;vue-style-loader&#x27;].concat(loaders)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Element</tag>
      </tags>
  </entry>
  <entry>
    <title>FFmpeg使用</title>
    <url>/2024/07/30/FFmpeg%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ffmpeg  <span class="literal">-i</span> test.wav <span class="number">2</span>&gt;&amp;<span class="number">1</span>|grep <span class="string">&#x27;Duration&#x27;</span>|cut <span class="literal">-d</span> <span class="string">&#x27; &#x27;</span> <span class="operator">-f</span> <span class="number">4</span> |sed s/,//       <span class="comment"># 获取文件长度</span></span><br><span class="line">ffmpeg <span class="operator">-f</span> concat <span class="literal">-i</span> playlist.txt <span class="literal">-c</span> <span class="built_in">copy</span> output.mp4                       <span class="comment"># 合并文件，`playlist.txt`格式附后</span></span><br><span class="line">ffmpeg <span class="literal">-i</span> video.mp4 <span class="literal">-i</span> audio.mp3 <span class="literal">-vcodec</span> <span class="built_in">copy</span> <span class="literal">-acodec</span> <span class="built_in">copy</span> output.mp4     <span class="comment"># 合并音频视频</span></span><br><span class="line">ffmpeg <span class="literal">-i</span> <span class="string">&quot;url.m3u8&quot;</span> <span class="literal">-c</span> <span class="built_in">copy</span> output.mp4                                   <span class="comment"># 下载串流影片</span></span><br><span class="line"><span class="comment"># 截图,每秒3张，截图质量控制`-qscale:v 1`可选值为`1-31`,当设为`1`时，必须加上选项`-qmin 1`,因为默认`-qmin 2`</span></span><br><span class="line">ffmpeg <span class="literal">-i</span> xxx.mp4 <span class="literal">-qscale</span>:v <span class="number">1</span> <span class="literal">-qmin</span> <span class="number">1</span>  <span class="literal">-r</span> <span class="number">3</span> output_%<span class="number">03</span>d.jpg</span><br><span class="line">ffplay <span class="literal">-i</span> rtmp://ip:port/stream <span class="literal">-fflags</span> nobuffer <span class="literal">-analyzeduration</span> <span class="number">1000</span>    <span class="comment"># 减少rtmp视频延迟</span></span><br><span class="line">ffplay <span class="literal">-i</span> rtsp://user:password@ip:port/stream   <span class="literal">-analyzeduration</span> <span class="number">1000</span>     <span class="comment"># 减少rtsp视频延迟</span></span><br><span class="line"><span class="comment"># ts 是流，没有索引的，每次快进都要二分搜索找位置，这是设计之初就决定的，快进或定位到某点播放卡顿无解。</span></span><br><span class="line"><span class="comment"># 使用 ffmpeg 重新复制打包 mp4，不需要编码，速度很快。</span></span><br><span class="line">ffmpeg <span class="literal">-i</span> test.ts <span class="literal">-acodec</span> <span class="built_in">copy</span> <span class="literal">-vcodec</span> <span class="built_in">copy</span> <span class="operator">-f</span> mp4 test.mp4</span><br><span class="line">ffmpeg <span class="literal">-i</span> input.wav <span class="literal">-filter</span>:a <span class="string">&quot;volume=0.5&quot;</span> output.wav                     <span class="comment"># 调整音量</span></span><br><span class="line">ffmpeg <span class="literal">-i</span> input.mp4 <span class="literal">-c</span> <span class="built_in">copy</span> <span class="literal">-map</span> <span class="number">0</span> output.mp4                             <span class="comment"># 修复MP4时间轴损坏</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推流</span></span><br><span class="line">ffmpeg <span class="literal">-re</span> <span class="literal">-i</span> rtmp://<span class="number">58.200</span>.<span class="number">131.2</span>:<span class="number">1935</span>/livetv/cctv1 <span class="literal">-c</span> <span class="built_in">copy</span> <span class="operator">-f</span> flv rtmp://<span class="number">10.211</span>.<span class="number">55.5</span>:<span class="number">1985</span>/myapp/testv  </span><br><span class="line">ffmpeg <span class="literal">-re</span> <span class="literal">-stream_loop</span> <span class="literal">-1</span> <span class="literal">-i</span> D:\test_video.mp4 <span class="literal">-vcodec</span> libx264 <span class="literal">-acodec</span> aac <span class="operator">-f</span> flv rtmp://<span class="number">192.168</span>.<span class="number">1.100</span>:<span class="number">1935</span>/live62  <span class="comment"># 推mp4  &quot;-stream_loop -1&quot; 无限循环读取 </span></span><br><span class="line">ffmpeg <span class="operator">-f</span> avfoundation <span class="literal">-i</span> <span class="string">&quot;1&quot;</span> <span class="literal">-vcodec</span> libx264 <span class="literal">-preset</span> ultrafast <span class="literal">-acodec</span> libfaac <span class="operator">-f</span> flv rtmp://localhost:<span class="number">1935</span>/rtmplive/home  <span class="comment"># 录制桌面并推送</span></span><br></pre></td></tr></table></figure>

<p><code>playlist.txt</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">file  &#x27;17247226_part1.flv&#x27;</span><br><span class="line">file  &#x27;17247226_part2.flv&#x27;</span><br><span class="line">file  &#x27;17247226_part3.flv&#x27;</span><br></pre></td></tr></table></figure>

<p><a href="https://minuo.org/yt-dlp-complete-guide-2024">yt-dlp使用</a></p>
<p>使用Cookies</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要浏览器先登录相关网站</span></span><br><span class="line">yt<span class="literal">-dlp</span>.exe <span class="literal">-vU</span>  <span class="literal">--cookies-from-browser</span> firefox:<span class="string">&quot;C:\Users\FRANK\AppData\Roaming\Mozilla\Firefox\Profiles\7ypo291s.dev-edition-default\&quot;</span>  <span class="string">&#x27;url&#x27;</span></span><br><span class="line"><span class="comment"># chrome 无效，不知是bug，还是设置无效</span></span><br><span class="line">yt<span class="literal">-dlp</span>.exe <span class="literal">-vU</span>  <span class="literal">--cookies-from-browser</span> chrome:<span class="string">&quot;C:\Users\FRANK\AppData\Local\Google\Chrome\User Data\Default\Network\Cookies&quot;</span>  <span class="string">&#x27;url&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>FFmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>Git使用</title>
    <url>/2024/07/30/Git%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="一、下载Git-的Windows客户端"><a href="#一、下载Git-的Windows客户端" class="headerlink" title="一、下载Git 的Windows客户端"></a>一、下载Git 的Windows客户端</h3><p>从<a href="https://github.com/git-for-windows/git/releases">Git下载地址</a>下载，并安装。</p>
<h3 id="二、初始配置"><a href="#二、初始配置" class="headerlink" title="二、初始配置"></a>二、初始配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定全局http代理</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global http.proxy <span class="string">&#x27;http://127.0.0.1:10808&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定全局https代理</span>       </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global https.proxy <span class="string">&#x27;http://127.0.0.1:10808&#x27;</span></span>   </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消代理</span>  </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global --<span class="built_in">unset</span> http.proxy</span>                                    </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global --<span class="built_in">unset</span> https.proxy</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">仅仅指定`https://github.com`才使用代理</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global http.https://github.com.proxy http://127.0.0.1:10808</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">支持长文件名</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --system core.longpaths <span class="literal">true</span></span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解决重装系统后，出现的<span class="string">&quot;fatal: detected dubious ownership in repository Error&quot;</span>错误</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global --add safe.directory <span class="string">&#x27;*&#x27;</span></span> </span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> <code>git config</code>命令的<code>–global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。配置保存在 <code>~/.gitconfig</code> 文件中。</p>
<h3 id="三、创建仓库"><a href="#三、创建仓库" class="headerlink" title="三、创建仓库"></a>三、创建仓库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> -p /home/git/repo/test.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /home/git/repo/test.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init</span></span><br></pre></td></tr></table></figure>

<h3 id="四、给Git仓库添加文件"><a href="#四、给Git仓库添加文件" class="headerlink" title="四、给Git仓库添加文件"></a>四、给Git仓库添加文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add file1.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add file2.txt file3.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;add 3 files.&quot;</span></span></span><br></pre></td></tr></table></figure>


<h3 id="五、查看Git状态"><a href="#五、查看Git状态" class="headerlink" title="五、查看Git状态"></a>五、查看Git状态</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br></pre></td></tr></table></figure>

<h3 id="六、查看具体修改"><a href="#六、查看具体修改" class="headerlink" title="六、查看具体修改"></a>六、查看具体修改</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff readme.txt</span></span><br></pre></td></tr></table></figure>

<h3 id="七、版本日志"><a href="#七、版本日志" class="headerlink" title="七、版本日志"></a>七、版本日志</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --pretty=oneline</span></span><br></pre></td></tr></table></figure>

<h3 id="八、版本回退"><a href="#八、版本回退" class="headerlink" title="八、版本回退"></a>八、版本回退</h3><p>首先，Git必须知道当前版本是哪个版本，在Git中，用<code>HEAD</code>表示当前版本，也就是最新的提交<code>3628164…882e1e0</code>（注意我的提交ID和你的肯定不一样），上一个版本就是<code>HEAD^</code>（注意符号），上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个^比较容易数不过来，所以写成<code>HEAD~100</code>（注意符号）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --hard HEAD^</span></span><br><span class="line">HEAD is now at ea34578 add distributed</span><br></pre></td></tr></table></figure>

<p>定位到某个特定版本(版本号没必要写全，前几位就可以了,但需保证其所代表的版本号唯一）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --hard 3628164</span></span><br><span class="line">HEAD is now at 3628164 append GPL</span><br></pre></td></tr></table></figure>

<p>查看命令历史</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reflog</span></span><br></pre></td></tr></table></figure>

<h3 id="九、其他"><a href="#九、其他" class="headerlink" title="九、其他"></a>九、其他</h3><p>1、 <code>fatal: unsafe repository</code>错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global --add safe.directory &quot;*&quot;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R current_user:current_user_group ./</span><br></pre></td></tr></table></figure>


<h3 id="十-克隆超大文件"><a href="#十-克隆超大文件" class="headerlink" title="十 克隆超大文件"></a>十 克隆超大文件</h3><ol>
<li>关闭压缩（似乎非必须）</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global core.compression 0</span><br></pre></td></tr></table></figure>

<p>2、克隆部分</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone --depth 1 &lt;repo_URI&gt;</span><br></pre></td></tr></table></figure>

<p>3、进入文件夹，继续克隆剩下的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd &lt;repo&gt;</span><br><span class="line">git fetch --unshallow </span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git fetch --depth=2147483647</span><br></pre></td></tr></table></figure>

<p>4、最后，做一个完整的拉取请求</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git pull --all</span><br></pre></td></tr></table></figure>

<p>参考：</p>
<ul>
<li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">廖雪峰–Git教程</a></li>
<li><a href="https://git-scm.com/book/zh/">Git使用手册</a></li>
<li><a href="https://gist.github.com/evantoli/f8c23a37eb3558ab8765">Configure Git to use a proxy</a></li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>C#实现XML声明为UTF-8</title>
    <url>/2024/07/30/C-%E5%AE%9E%E7%8E%B0XML%E5%A3%B0%E6%98%8E%E4%B8%BAUTF-8/</url>
    <content><![CDATA[<h3 id="一、首先添加辅助类StringWriterWithEncoding"><a href="#一、首先添加辅助类StringWriterWithEncoding" class="headerlink" title="一、首先添加辅助类StringWriterWithEncoding"></a>一、首先添加辅助类StringWriterWithEncoding</h3><p>因StringWriter默认为Unicode码(即UTF-16),且无Encoding类型参数的构造函数</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">StringWriterWithEncoding</span> : <span class="title">StringWriter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Encoding encoding;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringWriterWithEncoding</span>() : <span class="title">this</span>(<span class="params">Encoding.UTF8</span>)</span> &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringWriterWithEncoding</span>(<span class="params">Encoding encoding</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.encoding = encoding;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> Encoding Encoding &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> encoding; &#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二、序列化、反序列化"><a href="#二、序列化、反序列化" class="headerlink" title="二、序列化、反序列化"></a>二、序列化、反序列化</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">XMLHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 序列化</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;obj&quot;&gt;</span>对象<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Serializer</span>&lt;<span class="title">T</span>&gt;(<span class="params">T obj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        StringWriterWithEncoding result = <span class="keyword">new</span> StringWriterWithEncoding(Encoding.UTF8);</span><br><span class="line">        XmlSerializer xmlSerializer = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(T));</span><br><span class="line"></span><br><span class="line">        XmlWriterSettings xmlWriterSettings = <span class="keyword">new</span> XmlWriterSettings()</span><br><span class="line">        &#123;</span><br><span class="line">            Encoding = Encoding.UTF8,</span><br><span class="line">            Indent = <span class="literal">false</span></span><br><span class="line">            <span class="comment">//    Indent = true,                //获取或设置指示是否缩进元素的值</span></span><br><span class="line">            <span class="comment">//    IndentChars = &quot;    &quot;,         //使用此设置时 Indent 属性设置为 true。获取或设置缩进时要使用的字符串。</span></span><br><span class="line">            <span class="comment">//    NewLineChars = &quot;\r\n&quot;,        //获取或设置要用于换行符的字符串。</span></span><br><span class="line">            <span class="comment">//    OmitXmlDeclaration = true;    //不生成声明头  </span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (XmlWriter xmlWriter = XmlWriter.Create(result, xmlWriterSettings))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 强制指定命名空间，覆盖默认的命名空间</span></span><br><span class="line">            <span class="comment">// 若不指定命名空间，使用xmlSerializer.Serialize(xmlWriter, obj);则根目录如下</span></span><br><span class="line">            <span class="comment">// &lt;purchaseStateQuery xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;</span></span><br><span class="line">            <span class="comment">// &lt;stock_id&gt;261753&lt;/stock_id&gt;&lt;owner_id&gt;201888&lt;/owner_id&gt;&lt;/purchaseStateQuery&gt;  </span></span><br><span class="line">            XmlSerializerNamespaces namespaces = <span class="keyword">new</span> XmlSerializerNamespaces();</span><br><span class="line">            namespaces.Add(<span class="built_in">string</span>.Empty, <span class="built_in">string</span>.Empty);</span><br><span class="line">            xmlSerializer.Serialize(xmlWriter, obj, namespaces);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//此句多余</span></span><br><span class="line">            <span class="comment">//xmlWriter.Close();</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result.ToString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 反序列化</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;xml&quot;&gt;</span>XML字符串<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">Deserialize</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> xml</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (StringReader sr = <span class="keyword">new</span> StringReader(xml))</span><br><span class="line">        &#123;</span><br><span class="line">            XmlSerializer xmldes = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(T));</span><br><span class="line">            <span class="keyword">return</span> (T)xmldes.Deserialize(sr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 反序列化</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;xml&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">Deserialize</span>&lt;<span class="title">T</span>&gt;(<span class="params">Stream stream</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        XmlSerializer xmldes = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(T));</span><br><span class="line">        <span class="keyword">return</span> (T)xmldes.Deserialize(stream);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="三、序列化对象XML属性设置"><a href="#三、序列化对象XML属性设置" class="headerlink" title="三、序列化对象XML属性设置"></a>三、序列化对象XML属性设置</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">XmlRoot(<span class="string">&quot;cats&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CatCollection</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">XmlArray(<span class="string">&quot;items&quot;</span>),XmlArrayItem(<span class="string">&quot;item&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> Cat[] Cats &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">[<span class="meta">XmlRoot(<span class="string">&quot;cat&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Cat</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//定义Color属性的序列化为cat节点的属性</span></span><br><span class="line">    [<span class="meta">XmlAttribute(<span class="string">&quot;color&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Color &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//要求不序列化Speed属性</span></span><br><span class="line">    [<span class="meta">XmlIgnore</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Speed &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//设置Saying属性序列化为Xml子元素</span></span><br><span class="line">    [<span class="meta">XmlElement(<span class="string">&quot;saying&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Saying &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="四、动态生成的程序集-MSDN-XmlSerializer-Class-待明白？？？"><a href="#四、动态生成的程序集-MSDN-XmlSerializer-Class-待明白？？？" class="headerlink" title="四、动态生成的程序集([MSDN](XmlSerializer Class)) (待明白？？？)"></a>四、动态生成的程序集([MSDN](XmlSerializer Class)) (待明白？？？)</h3><p>为了提高性能，XML 序列化基础结构动态生成要序列化和反序列化指定的类型的程序集。 基础结构查找并重用这些程序集。 仅当使用下面的构造函数时，会出现此行为︰</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">XmlSerializer.XmlSerializer(Type)</span><br><span class="line">XmlSerializer.XmlSerializer(Type, String)</span><br></pre></td></tr></table></figure>
<p>如果您使用任何其他构造函数，同一程序集的多个版本生成，并永远不会卸载，这将导致内存泄漏和性能低下。<br>最简单的解决方案是使用前面提到的两个构造函数之一。 否则，必须缓存中的程序集 Hashtable, ，如在下面的示例所示。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Hashtable serializers = <span class="keyword">new</span> Hashtable();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use the constructor that takes a type and XmlRootAttribute.</span></span><br><span class="line">XmlSerializer s = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(MyClass), myRoot);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Implement a method named GenerateKey that creates unique keys </span></span><br><span class="line"><span class="comment">// for each instance of the XmlSerializer. The code should take </span></span><br><span class="line"><span class="comment">// into account all parameters passed to the XmlSerializer </span></span><br><span class="line"><span class="comment">// constructor.</span></span><br><span class="line"><span class="built_in">object</span> key = GenerateKey(<span class="keyword">typeof</span>(MyClass), myRoot);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check the local cache for a matching serializer.</span></span><br><span class="line">XmlSerializer ser = (XmlSerializer)serializers[key];</span><br><span class="line"><span class="keyword">if</span> (ser == <span class="literal">null</span>) </span><br><span class="line">&#123;</span><br><span class="line">    ser = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(MyClass), myRoot);</span><br><span class="line">    <span class="comment">// Cache the serializer.</span></span><br><span class="line">    serializers[key] = ser;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Use the serializer to serialize, or deserialize.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>HTTP请求XML封装</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HttpHelper</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">readonly</span> IHttpClientFactory _clientFactory;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">HttpHelper</span>(<span class="params">IHttpClientFactory clientFactory</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           _clientFactory = clientFactory;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;T&gt; <span class="title">ActionAsync</span>(<span class="params">HttpRequestMessage httpRequestMessage</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">var</span> client = _clientFactory.CreateClient();</span><br><span class="line">           <span class="keyword">var</span> response = <span class="keyword">await</span> client.SendAsync(httpRequestMessage);</span><br><span class="line">           <span class="keyword">if</span> (response.IsSuccessStatusCode)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">var</span> resultStr = <span class="keyword">await</span> response.Content.ReadAsStringAsync();</span><br><span class="line">               <span class="keyword">return</span> XMLHelper&lt;T&gt;.Deserialize(resultStr);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">default</span>(T);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> 返回原字符串，用于调试</span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;httpRequestMessage&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">       <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">ActionForStringAsync</span>(<span class="params">HttpRequestMessage httpRequestMessage</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">var</span> client = _clientFactory.CreateClient();</span><br><span class="line">           <span class="keyword">var</span> response = <span class="keyword">await</span> client.SendAsync(httpRequestMessage);</span><br><span class="line">           <span class="keyword">if</span> (response.IsSuccessStatusCode)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">await</span> response.Content.ReadAsStringAsync();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>备注：本文参考了</p>
<p><a href="http://www.cnblogs.com/yukaizhao/archive/2011/07/22/xml-serialization.html">XmlSerializer 对象的Xml序列化和反序列化</a><br><a href="https://blog.csdn.net/lilinoscar/article/details/21027319">C#生成、解析xml文件以及处理报错原因</a><br><a href="https://msdn.microsoft.com/zh-cn/library/system.xml.serialization.xmlserializer(v=vs.110).aspx">XmlSerializer 类</a><br><a href="https://msdn.microsoft.com/zh-cn/library/system.xml.xmlwritersettings_properties(v=vs.110).aspx">XmlWriterSettings 属性</a><br><a href="https://stackoverflow.com/questions/42583299/xmlwriter-encoding-utf-8-using-stringwriter-in-c-sharp">XmlWriter encoding UTF-8 using StringWriter in C#</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker使用</title>
    <url>/2024/07/30/Docker%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p>Debian默认安装即可，指定版本&#x2F;最新版本安装参考docker官方文档<br><a href="https://docs.docker.com/engine/install/debian/">Install Docker Engine on Debian</a></p>
<p>由于Docker服务默认绑定到Unix Socket，而非一个TCP端口；而Unix Socket属于 root,因此Docker服务总是以 <code>root</code>用户运行，其他用户需要使用<code>sudo</code>来访问。<br>为了避免每次使用<code>sudo</code>才能操作，可以添加<code>docker</code>组，并将当前用户加入<code>docker</code>组,命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker.io -y</span><br><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure>

<p>虚拟机: 需要重启，以生效<br>实体机: X Window退出，重新进入生效或者执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">newgrp docker</span><br></pre></td></tr></table></figure>

<p>验证</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure>

<p>启动(二选一)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service docker start</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<h3 id="安装-docker-compose"><a href="#安装-docker-compose" class="headerlink" title="安装 docker-compose"></a>安装 docker-compose</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 Docker Compose Plugin（推荐，Compose V2）,但 Debian 12 不支持</span></span><br><span class="line">sudo apt install docker-compose-plugin -y</span><br><span class="line">docker compose version</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 Docker Compose CLI (Compose V1)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">sudo</span> 环境似乎不走代理，分两步</span></span><br><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; \</span><br><span class="line"> -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; \</span><br><span class="line"> -o docker-compose</span><br><span class="line">sudo mv docker-compose /usr/local/bin/</span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>

<h3 id="镜像文件-image"><a href="#镜像文件-image" class="headerlink" title="镜像文件(image)"></a>镜像文件(image)</h3><p>Dcoker官方仓库<a href="https://hub.docker.com/">Docker Hub</a>,可能国内访问很慢且断线，可修改为国内的镜像站。<br>首先检查 <code>docker.service</code>中是否配置过</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl cat docker | grep &#x27;\-\-registry\-mirror&#x27;</span><br></pre></td></tr></table></figure>

<p>如果该命令有输出，那么请执行 <code>$ systemctl cat docker</code> 查看 <code>ExecStart=</code> 出现的位置，修改对应的文件内容去掉 <code>--registry-mirror</code> 参数及其值，并按接下来的步骤进行配置。<br>编辑<code>/etc/docker/daemon.json</code></p>
<p><a href="https://github.com/dongyubin/DockerHub">DockerHub 国内加速镜像列表</a><br>容器失效，建议代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [</span><br><span class="line">        &quot;https://docker.1panelproxy.com&quot;,</span><br><span class="line">        &quot;https://atomhub.openatom.cn&quot;, // 地址必须以 http等网络协议开头</span><br><span class="line">        &quot;https://docker.m.daocloud.io&quot; // 最后一个地址后面不能有&quot;,&quot;,否则docker报错，不能重启,并且没有明显的错误提示</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后重启服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一定要执行此命令，否则，即使重新启动服务，也会报错</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>查看 docker 的运行状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker 服务的运行状态</span></span><br><span class="line">sudo systemctl status docker</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker 服务本身的运行日志</span></span><br><span class="line">sudo journalctl -u docker  &gt; ~/docker.log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">debian 没有此文件，是否需要配置?</span></span><br><span class="line">sudo cat /var/log/docker.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看某个容器的所有日志</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> docker logs [OPTIONS] &lt;CONTAINER&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器的实时日志</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> docker logs -f &lt;CONTAINER&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> docker container logs mysql8lts</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用于查看服务或任务集群的日志</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> docker service logs [OPTIONS] SERVICE|TASK</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 docker 中进程资源消耗</span></span><br><span class="line">sudo docker stats</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。<br>image 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说,在 Debian 的 image 基础上，往里面加入 Nginx 服务器，形成新的 Nginx Server image。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image pull library/hello-world  // library/hello-world是 image 文件在仓库里面的位置，其中library是 image 文件所在的组，hello-world是 image 文件的名字。</span><br><span class="line">docker image pull hello-world          // 由于 Docker 官方提供的 image 文件，都放在library组里面，所以它的是默认组，可以省略。</span><br><span class="line">docker image ls //列出所有image文件</span><br><span class="line">docker images   // 同上</span><br><span class="line">docker image rm [imageName/imageId]</span><br></pre></td></tr></table></figure>

<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container run hello-world   // `docker container run` 命令会从 image 文件，生成一个正在运行的容器实例。具有自动抓取 image 文件的功能。前面的docker image pull命令并不是必需的步骤。</span><br><span class="line">docker container run -it debian bash</span><br></pre></td></tr></table></figure>

<h3 id="容器文件"><a href="#容器文件" class="headerlink" title="容器文件"></a>容器文件</h3><p>image 文件生成的容器实例，本身也是一个文件，称为容器文件。也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container ls        // 列出本机正在运行的容器</span><br><span class="line">docker container ls --all  // 列出本机所有容器，包括终止运行的容器</span><br><span class="line">docker container rm [containerID]</span><br></pre></td></tr></table></figure>

<h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>Dockerfile 文件是一个文本文件，用来配置 image。Docker 根据 该文件生成二进制的 image 文件。</p>
<p>编辑<code>.dockerignore</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.git</span><br><span class="line">__pycache__</span><br></pre></td></tr></table></figure>

<p>编辑 Dockerfile<br>Dockerfile 是一个文本文件，其内包含了一条条的 指令(Instruction)，###每一条指令构建一层###，因此每一条指令的内容，就是描述该层应当如何构建。<br>特殊的镜像<code>scratch</code>,这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。如果你以 <code>scratch</code> 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。不以任何系统为基础，直接将可执行文件复制进镜像的做法并不罕见，对于 Linux 下静态编译的程序来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接 <code>FROM scratch</code> 会让镜像体积更加小巧。</p>
<p><code>RUN</code> 指令是用来执行命令行命令的。</p>
<ol>
<li>shell 格式：RUN &lt;命令&gt;</li>
<li>exec 格式：RUN [“可执行文件”, “参数1”, “参数2”]</li>
</ol>
<p>能一条指令执行绝对不要用两条执行。<em><strong>每一条<code>RUN</code>指令构建一层，Union FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过 127 层。</strong></em><br>例如：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:stretch</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">set</span> -x; buildDeps=<span class="string">&#x27;gcc libc6-dev make wget&#x27;</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get update \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get install -y <span class="variable">$buildDeps</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; wget -O redis.tar.gz <span class="string">&quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">mkdir</span> -p /usr/src/redis \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; make -C /usr/src/redis \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; make -C /usr/src/redis install \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/* \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> redis.tar.gz \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> -r /usr/src/redis \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get purge -y --auto-remove <span class="variable">$buildDeps</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.6</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> . /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>,<span class="string">&quot;app.py&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>创建image</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image build -t hello-world:1.0 .</span><br></pre></td></tr></table></figure>

<p>命令最后的<code>.</code>,叫镜像构建上下文（Context）。<br><code>docker build</code> 的工作原理:Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 Docker Remote API，而如 docker 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 docker 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。<br>当构建的时候，用户会指定构建镜像上下文的路径，<code>docker build</code> 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。因此，<code>COPY</code> 这类指令中的源文件的路径都是相对路径。这也是为什么 <code>COPY ../package.json /app</code> 或者 <code>COPY /opt/xxxx /app</code> 无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。</p>
<p>一般来说，应该会将 <code>Dockerfile</code> 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 <code>.gitignore</code> 一样的语法写一个 <code>.dockerignore</code>，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。</p>
<p>在默认情况下，如果不额外指定 Dockerfile 的话，会将上下文目录下的名为 Dockerfile 的文件作为 Dockerfile。这只是默认行为，实际上 Dockerfile 的文件名并不要求必须为 Dockerfile，而且并不要求必须位于上下文目录中，比如可以用 <code>-f ../Dockerfile.php</code> 参数指定某个文件作为 Dockerfile。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./package.json /app/</span></span><br></pre></td></tr></table></figure>

<p>这并不是要复制执行 <code>docker build</code> 命令所在的目录下的 package.json，也不是复制 Dockerfile 所在目录下的 package.json，而是复制 上下文（context） 目录下的 package.json。</p>
<p>其它 docker build 的用法<br>直接用 Git repo 进行构建<br>用给定的 tar 压缩包构建<br>从标准输入中读取 Dockerfile 进行构建<br>从标准输入中读取上下文压缩包进行构建</p>
<h4 id="COPY-复制文件"><a href="#COPY-复制文件" class="headerlink" title="COPY 复制文件"></a>COPY 复制文件</h4><ol>
<li>COPY [–chown&#x3D;<user>:<group>] &lt;源路径&gt;… &lt;目标路径&gt;</li>
<li>COPY [–chown&#x3D;<user>:<group>] [“&lt;源路径1&gt;”,… “&lt;目标路径&gt;”]<br>&lt;源路径&gt; 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 filepath.Match 规则<br>&lt;目标路径&gt; 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 WORKDIR 指令来指定）。目标路径不需要事先创建<br>COPY 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。<br>如果源路径为文件夹，复制的时候不是直接复制该文件夹，而是将文件夹中的内容复制到目标路径。</li>
</ol>
<h4 id="ADD-更高级的复制文件"><a href="#ADD-更高级的复制文件" class="headerlink" title="ADD 更高级的复制文件"></a>ADD 更高级的复制文件</h4><p>比如 &lt;源路径&gt; 可以是一个 URL,下载（下载后权限为600）,可增加一层RUN去改变权限<br>如果 &lt;源路径&gt; 为一个 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，ADD 指令将会自动解压缩这个压缩文件到 &lt;目标路径&gt; 去。<br>需要注意的是，ADD 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。</p>
<h4 id="CMD-容器启动命令"><a href="#CMD-容器启动命令" class="headerlink" title="CMD 容器启动命令"></a>CMD 容器启动命令</h4><ul>
<li>shell 格式：CMD &lt;命令&gt;</li>
<li>exec 格式：CMD [“可执行文件”, “参数1”, “参数2”…]</li>
<li>参数列表格式：CMD [“参数1”, “参数2”…]。在指定了 ENTRYPOINT 指令后，用 CMD 指定具体的参数。</li>
</ul>
<p>Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。CMD 指令就是用于指定默认的容器主进程的启动命令的。<br>在运行时可以指定新的命令来替代镜像设置中的这个默认命令<br>在指令格式上，一般推荐使用 <code>exec</code> 格式，这类格式在解析时会被解析为 <code>JSON</code> 数组，因此一定要使用双引号 <code>&quot;</code>，而不要使用单引号。<br>如果使用 shell 格式的话，实际的命令会被包装为 <code>sh -c</code> 的参数的形式进行执行。这就是为什么可以使用环境变量的原因，因为这些环境变量会被 shell 进行解析处理。<br>Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 systemd 去启动后台服务，容器内没有后台服务的概念。</p>
<p><code>CMD service nginx start</code> 会被理解为 <code>CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;service nginx start&quot;]</code>，因此主进程实际上是 <code>sh</code>。那么当 <code>service nginx start</code> 命令结束后，<code>sh</code> 也就结束了，<code>sh</code> 作为主进程退出了，自然就会令容器退出。正确的做法是直接执行 nginx 可执行文件，并且要求以前台形式运行。比如：<code>CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</code></p>
<h4 id="ENTRYPOINT-入口点"><a href="#ENTRYPOINT-入口点" class="headerlink" title="ENTRYPOINT 入口点"></a>ENTRYPOINT 入口点</h4><p>ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数。ENTRYPOINT 在运行时也可以替代，不过需要通过 <code>docker run</code> 的参数 <code>--entrypoint</code> 来指定。<br>那么有了 CMD 后，为什么还要有 ENTRYPOINT 呢？<br>场景一：让镜像变成像命令一样使用<br>场景二：应用运行前的准备工作</p>
<h5 id="ENV-设置环境变量"><a href="#ENV-设置环境变量" class="headerlink" title="ENV 设置环境变量"></a>ENV 设置环境变量</h5><ul>
<li>ENV <code>&lt;key&gt; &lt;value&gt;</code></li>
<li>ENV <code>&lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code><br>无论是Dockerfile后面的其它指令，如 RUN，还是运行时的应用，都可以直接使用这里定义的环境变量。</li>
</ul>
<h4 id="ARG-构建参数"><a href="#ARG-构建参数" class="headerlink" title="ARG 构建参数"></a>ARG 构建参数</h4><p>构建参数和 ENV 的效果一样，都是设置环境变量。所不同的是，ARG 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。<br>Dockerfile 中的 ARG 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 <code>docker build</code> 中用 <code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code> 来覆盖。<br>灵活的使用 ARG 指令，能够在不修改 Dockerfile 的情况下，构建出不同的镜像。</p>
<p>ARG 指令有生效范围，如果在 FROM 指令之前指定，那么只能用于 FROM 指令中。</p>
<h4 id="VOLUME-定义匿名卷"><a href="#VOLUME-定义匿名卷" class="headerlink" title="VOLUME 定义匿名卷"></a>VOLUME 定义匿名卷</h4><ul>
<li>VOLUME [“&lt;路径1&gt;”, “&lt;路径2&gt;”…]</li>
<li>VOLUME &lt;路径&gt;<br>为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。</li>
</ul>
<h4 id="EXPOSE-暴露端口"><a href="#EXPOSE-暴露端口" class="headerlink" title="EXPOSE 暴露端口"></a>EXPOSE 暴露端口</h4><p>EXPOSE 指令是声明容器运行时提供服务的端口，这只是一个声明，在容器运行时并不会因为这个声明应用就会开启这个端口的服务。<br>在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 <code>docker run -P</code> 时，会自动随机映射 EXPOSE 的端口。<br>要将 EXPOSE 和在运行时使用 <code>-p &lt;宿主端口&gt;:&lt;容器端口&gt;</code> 区分开来。<code>-p</code>，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 EXPOSE 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p>
<h4 id="WORKDIR-指定工作目录"><a href="#WORKDIR-指定工作目录" class="headerlink" title="WORKDIR 指定工作目录"></a>WORKDIR 指定工作目录</h4><ul>
<li>WORKDIR &lt;工作目录路径&gt;</li>
</ul>
<h4 id="USER-指定当前用户"><a href="#USER-指定当前用户" class="headerlink" title="USER 指定当前用户"></a>USER 指定当前用户</h4><ul>
<li>USER &lt;用户名&gt;[:&lt;用户组&gt;]</li>
</ul>
<p>USER 指令和 WORKDIR 相似，都是改变环境状态并影响以后的层。WORKDIR 是改变工作目录，USER 则是改变之后层的执行 RUN, CMD 以及 ENTRYPOINT 这类命令的身份。<br>注意，USER 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。<br>如果以 root 执行的脚本，在执行期间希望改变身份，比如希望以某个已经建立好的用户来运行某个服务进程，不要使用 <code>su</code> 或者 <code>sudo</code>。建议使用 <code>gosu</code>。</p>
<h4 id="HEALTHCHECK-健康检查"><a href="#HEALTHCHECK-健康检查" class="headerlink" title="HEALTHCHECK 健康检查"></a>HEALTHCHECK 健康检查</h4><ul>
<li>HEALTHCHECK [选项] CMD &lt;命令&gt;：设置检查容器健康状况的命令</li>
<li>HEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令<br>在没有 HEALTHCHECK 指令前，Docker 引擎只可以通过容器内主进程是否退出来判断容器是否状态异常。很多情况下这没问题，但是如果程序进入死锁状态，或者死循环状态，应用进程并不退出，但是该容器已经无法提供服务了。在 1.12 以前，Docker 不会检测到容器的这种状态，从而不会重新调度，导致可能会有部分容器已经无法提供服务了却还在接受用户请求。</li>
</ul>
<p>以守护态运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 hello-world:1.0</span><br><span class="line">docker container run -d  -v /pathOfHost:/home/paddle_out -p 9999:9999 paddle_zh_cn_py-server:v5</span><br></pre></td></tr></table></figure>

<p>进入服务操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it hello-world:1.0 bash</span><br></pre></td></tr></table></figure>

<p>修改完成后，保存镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit --author &quot;frank&quot; --message &quot;change default index.html&quot; webserver nginx:2.0</span><br></pre></td></tr></table></figure>

<p>备注： 慎用 <code>docker commit</code>。使用 docker commit 命令虽然可以比较直观的帮助理解镜像分层存储的概念，但是实际环境中并不会这样使用。因为：1.有大量的无关内容被添加进来，将会导致镜像极为臃肿。2.所有对镜像的操作都是黑箱操作，生成的镜像也被称为 黑箱镜像。3. 每一次修改都会让镜像更加臃肿一次，所删除的上一层的东西并不会丢失</p>
<p>查询修改历史</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker history nginx:2.0</span><br></pre></td></tr></table></figure>

<p>至此，可以访问Python服务</p>
<h5 id="附-Python-hello-world"><a href="#附-Python-hello-world" class="headerlink" title="附  Python hello-world"></a>附  Python hello-world</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> waitress <span class="keyword">import</span> serve</span><br><span class="line"><span class="keyword">from</span> http_flask <span class="keyword">import</span> flask_service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 初始化 Flask 服务</span></span><br><span class="line">    flask_service.config[<span class="string">&#x27;JSON_AS_ASCII&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决返回中文乱码</span></span><br><span class="line">    serve(flask_service,listen=<span class="string">&#x27;*:8080&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> crypt <span class="keyword">import</span> methods</span><br><span class="line"><span class="keyword">from</span> logging.config <span class="keyword">import</span> listen</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request, send_from_directory</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务初始化</span></span><br><span class="line">flask_service = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@flask_service.route(<span class="params"><span class="string">&#x27;/api/hello&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;code&#x27;</span>:<span class="number">200</span>,<span class="string">&#x27;message&#x27;</span>:<span class="string">&#x27;文本转语音成功&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="镜像备份-恢复"><a href="#镜像备份-恢复" class="headerlink" title="镜像备份&#x2F;恢复"></a>镜像备份&#x2F;恢复</h3><h4 id="1-备份"><a href="#1-备份" class="headerlink" title="1. 备份"></a>1. 备份</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images | grep  image-name  # 查询镜像ID</span><br><span class="line">docker save [OPTIONS] IMAGE [IMAGE...]</span><br><span class="line">docker save -o /root/mycentos7.tar mycentos:7</span><br></pre></td></tr></table></figure>

<h3 id="2-恢复"><a href="#2-恢复" class="headerlink" title="2. 恢复"></a>2. 恢复</h3><p>docker加载镜像：tar-&gt;image的过程</p>
<p>a. 从tar包载入镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker load -i &#123;image_name&#125;.tar</span><br><span class="line">docker load --input &#123;image_name&#125;.tar</span><br></pre></td></tr></table></figure>

<p>b. 查看载入是否成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images | grep &#123;image_name&#125;</span><br></pre></td></tr></table></figure>

<p>c. 如果看到加载的镜像没有tag和镜像名，则手动打tag:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker tag &#123;image_id&#125; &#123;image_name&#125;:&#123;image_tag&#125;</span><br></pre></td></tr></table></figure>

<p>d. 确认镜像是否成功打上tag</p>
<p>设置代理</p>
<p>只能通过创建<code>systemd</code>配置文件，<code>/etc/docker/daemon.json</code>,<code>~/.docker/config.json</code>无效</p>
<p>创建<code>/etc/systemd/system/docker.service.d/http-proxy.conf</code>文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/systemd/system/docker.service.d</span><br><span class="line">sudo vi /etc/systemd/system/docker.service.d/http-proxy.conf</span><br></pre></td></tr></table></figure>

<p>并编辑内容:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=&quot;HTTP_PROXY=socks5://192.168.1.3:10810&quot;</span><br><span class="line">Environment=&quot;HTTPS_PROXY=socks5://192.168.1.3:10810&quot;</span><br></pre></td></tr></table></figure>

<p>然后运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line">sudo systemctl show --property=Environment docker</span><br></pre></td></tr></table></figure>

<p><a href="https://docs.docker.com/config/daemon/proxy/#httphttps-proxy">配置<code>docker</code>服务使用代理</a></p>
<p><a href="https://docs.docker.com/">官方文档</a><br><a href="https://yeasy.gitbook.io/docker_practice/">Docker — 从入门到实践</a></p>
<h3 id="Docker磁盘占用情况"><a href="#Docker磁盘占用情况" class="headerlink" title="Docker磁盘占用情况"></a>Docker磁盘占用情况</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 <span class="built_in">df</span> -h 可以发现所有磁盘的使用情况， /var/lib/docker 为 docker 容器安装的默认磁盘目录</span></span><br><span class="line">frank@localhost:~$ sudo df -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev            944M     0  944M   0% /dev</span><br><span class="line">tmpfs           191M  512K  190M   1% /run</span><br><span class="line">/dev/sda3        28G  3.1G   23G  12% /</span><br><span class="line">tmpfs           951M     0  951M   0% /dev/shm</span><br><span class="line">tmpfs           5.0M     0  5.0M   0% /run/lock</span><br><span class="line">/dev/sda4        93G  2.3G   86G   3% /home</span><br><span class="line">/dev/sda2       488M   12M  476M   3% /boot/efi</span><br><span class="line">overlay          28G  3.1G   23G  12% /var/lib/docker/overlay2/9b3c4b326acbfe36b17bef23e847ed2260e3a91f42c027d64d43b901b9392157/merged</span><br><span class="line">tmpfs           191M     0  191M   0% /run/user/1000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看docker 磁盘使用情况</span></span><br><span class="line">frank@localhost:~$ sudo du -sh /var/lib/docker/</span><br><span class="line">1.3G    /var/lib/docker/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker system <span class="built_in">df</span>  命令，类似于Linux上的<span class="built_in">df</span>命令，用于查看Docker的磁盘使用情况</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-v 选项可用查询更详细的信息</span></span><br><span class="line">frank@localhost:~$ sudo docker system df</span><br><span class="line">TYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE</span><br><span class="line">Images          4         2         1.145GB   583.7MB (50%)</span><br><span class="line">Containers      8         1         2.887kB   758B (26%)</span><br><span class="line">Local Volumes   1         0         0B        0B</span><br><span class="line">Build Cache     0         0         0B        0B</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker system prune命令可以用于清理磁盘，删除关闭的容器、无用的数据卷和网络，以及dangling镜像(即无tag的镜像)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-a  选项清理得更加彻底，可以将没有容器使用Docker镜像都删掉</span></span><br><span class="line">frank@localhost:~$ sudo docker system prune</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ-IDEA中JDK版本不对的检查</title>
    <url>/2024/07/30/IntelliJ-IDEA%E4%B8%ADJDK%E7%89%88%E6%9C%AC%E4%B8%8D%E5%AF%B9%E7%9A%84%E6%A3%80%E6%9F%A5/</url>
    <content><![CDATA[<ol>
<li><code>File</code>-&gt;<code>Project Structure</code>-&gt;<code>Project</code>-&gt;<code>Porject SDK:</code></li>
<li><code>File</code>-&gt;<code>Project Structure</code>-&gt;<code>Project</code>-&gt;<code>Porject language level:</code></li>
<li><code>File</code>-&gt;<code>Project Structure</code>-&gt;<code>Modules</code>-&gt;<code>Source</code>-&gt;<code>Language level</code></li>
<li><code>File</code>-&gt;<code>Project Structure</code>-&gt;<code>Modules</code>-&gt;<code>Dependencies</code>-&gt;<code>Module SDK:</code></li>
<li><code>File</code>-&gt;<code>Settings</code>-&gt;<code>Build,Execution,Deployment</code>-&gt;<code>Compiler</code>-&gt;<code>Java Compiler</code>-&gt;<code>Pre-module bytecode version:</code></li>
<li><code>pom.xml</code>的<code>properties</code>节点设置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">  &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">  &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt;</span><br><span class="line">  &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ-IDEA之HttpClient组件使用</title>
    <url>/2024/07/30/IntelliJ-IDEA%E4%B9%8BHttpClient%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="添加运行环境"><a href="#添加运行环境" class="headerlink" title="添加运行环境"></a>添加运行环境</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dev&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.1.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">8080</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### TEST POST</span><br><span class="line">POST  /rbac/user/login</span><br><span class="line">Host: &#123;&#123;host&#125;&#125;:&#123;&#123;port&#125;&#125;</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;verifyCode&quot;: &quot;1234&quot;,</span><br><span class="line">  &quot;sign&quot;: &quot;&quot;,</span><br><span class="line">  &quot;loginId&quot;: &quot;username&quot;,</span><br><span class="line">  &quot;loginPwd&quot;: &quot;password&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt; &#123;%</span><br><span class="line">client.global.set(&quot;Access-Token&quot;,response.body.data.token)</span><br><span class="line">client.log(&quot;打印:&quot;+client.global.get(&quot;Access-Token&quot;))</span><br><span class="line"> %&#125;</span><br><span class="line"></span><br><span class="line">### TEST TOKEN HEADER</span><br><span class="line">GET  /biz/substation/get-count</span><br><span class="line">Host: &#123;&#123;host&#125;&#125;:&#123;&#123;port&#125;&#125;</span><br><span class="line">Accept: application/json</span><br><span class="line">Access-Token: &#123;&#123;Access-Token&#125;&#125;</span><br><span class="line"></span><br><span class="line">### TEST GET WITH PARAMETER</span><br><span class="line">GET /biz/substation/get-as-page?pageNo=1&amp;pageSize=100&amp;searchStr=</span><br><span class="line">Host: &#123;&#123;host&#125;&#125;:&#123;&#123;port&#125;&#125;</span><br><span class="line">Accept: application/json</span><br><span class="line">Access-Token: &#123;&#123;Access-Token&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### TEST form-data  注意下面的空格行，不能少</span><br><span class="line">POST /file/upload</span><br><span class="line">Host: &#123;&#123;host&#125;&#125;:&#123;&#123;port&#125;&#125;</span><br><span class="line">Content-Type: multipart/form-data;boundary=boundary</span><br><span class="line"></span><br><span class="line">--boundary</span><br><span class="line">Content-Disposition: form-data;name=&quot;file&quot;; filename=&quot;151245340746448896.jpg&quot;</span><br><span class="line"></span><br><span class="line">&lt; ./151245340746448896.jpg</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ-IDEA之一键Docker部署Java程序</title>
    <url>/2024/07/30/IntelliJ-IDEA%E4%B9%8B%E4%B8%80%E9%94%AEDocker%E9%83%A8%E7%BD%B2Java%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p>在完成打包好<code>jar</code>步骤后<br>检查docker 服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/docker.service</span><br><span class="line"># 在ExecStart=/usr/bin/dockerd追加 `-H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock`</span><br><span class="line"># 重新启动</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<p>给idea安装JetBrains出的<code>Docker</code>插件，<br>配置idea的插件<code>Docker</code>,设置为上面的地址<code>tcp://xxx.xxx.xxx.xxx:2375</code></p>
<p>针对java项目，不建议使用&#96;&#96;插件，因其需要本地安装docker，并且无人维护。建议如下两种方式：</p>
<ol>
<li><p>使用<code>docker-maven-plugin</code>。复制以下代码到<code>pom.xml</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">  &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">  &lt;executions&gt;</span><br><span class="line">    &lt;!--执行mvn package,即执行 mvn clean package docker:build--&gt;</span><br><span class="line">    &lt;execution&gt;</span><br><span class="line">      &lt;id&gt;build-image&lt;/id&gt;</span><br><span class="line">      &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">      &lt;goals&gt;</span><br><span class="line">        &lt;goal&gt;build&lt;/goal&gt;</span><br><span class="line">      &lt;/goals&gt;</span><br><span class="line">    &lt;/execution&gt;</span><br><span class="line">  &lt;/executions&gt;</span><br><span class="line"></span><br><span class="line">  &lt;configuration&gt;</span><br><span class="line">    &lt;!-- 镜像名称 --&gt;</span><br><span class="line">    &lt;imageName&gt;$&#123;project.artifactId&#125;&lt;/imageName&gt;</span><br><span class="line">    &lt;!-- 指定标签 --&gt;</span><br><span class="line">    &lt;imageTags&gt;</span><br><span class="line">      &lt;imageTag&gt;latest&lt;/imageTag&gt;</span><br><span class="line">    &lt;/imageTags&gt;</span><br><span class="line">    &lt;!-- 基础镜像--&gt;</span><br><span class="line">    &lt;baseImage&gt;openjdk:8-jdk-alpine&lt;/baseImage&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 切换到容器工作目录--&gt;</span><br><span class="line">    &lt;workdir&gt;/ROOT&lt;/workdir&gt;</span><br><span class="line"></span><br><span class="line">    &lt;entryPoint&gt;[&quot;java&quot;,&quot;-jar&quot;,&quot;$&#123;project.build.finalName&#125;.jar&quot;]&lt;/entryPoint&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 指定远程 Docker API地址  --&gt;</span><br><span class="line">    &lt;dockerHost&gt;http://192.168.1.20:2375&lt;/dockerHost&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 复制 jar包到docker容器指定目录--&gt;</span><br><span class="line">    &lt;resources&gt;</span><br><span class="line">      &lt;resource&gt;</span><br><span class="line">        &lt;targetPath&gt;/ROOT&lt;/targetPath&gt;</span><br><span class="line">        &lt;!-- 用于指定需要复制的根目录，$&#123;project.build.directory&#125;表示target目录 --&gt;</span><br><span class="line">        &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class="line">        &lt;!-- 用于指定需要复制的文件，$&#123;project.build.finalName&#125;.jar就是打包后的target目录下的jar包名称　--&gt;</span><br><span class="line">        &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span><br><span class="line">      &lt;/resource&gt;</span><br><span class="line">    &lt;/resources&gt;</span><br><span class="line">  &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>
<p>然后再次执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure>
<p>选择<code>server</code>,找到生成的镜像，右键<code>创建容器</code>，就能看到docker运行结果。或者到容器里，创建容器运行该image。</p>
</li>
<li><p>使用<code>jib</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.cloud.tools&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jib-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.1.4&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;from&gt;</span><br><span class="line">            &lt;!-- 注意：`docker`官方地址要填`docker.io/username/image-name:version`，如下。 --&gt;</span><br><span class="line">            &lt;!-- 如果把 `docker.io`更换为 `registry.hub.docker.com`(JetBrain插件里面填写的地址)或`hub.docker.com`（网页访问的地址）或`index.docker.io/v1/`(`docker info`显示的仓库)都不能成功--&gt;</span><br><span class="line">            &lt;image&gt;docker.io/frankbsd/openjdk8:v1&lt;/image&gt;</span><br><span class="line">            &lt;auth&gt;</span><br><span class="line">                &lt;username&gt;username&lt;/username&gt;</span><br><span class="line">                &lt;password&gt;password&lt;/password&gt;</span><br><span class="line">            &lt;/auth&gt;</span><br><span class="line">        &lt;/from&gt;</span><br><span class="line">        &lt;to&gt;</span><br><span class="line">            &lt;image&gt;docker.io/frankbsd/test-docker&lt;/image&gt;</span><br><span class="line">            &lt;auth&gt;</span><br><span class="line">                &lt;username&gt;username&lt;/username&gt;</span><br><span class="line">                &lt;password&gt;password&lt;/password&gt;</span><br><span class="line">            &lt;/auth&gt;</span><br><span class="line">        &lt;/to&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;build&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">        &lt;/execution&gt;</span><br><span class="line">    &lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>然后执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker run frankbsd/test-docker -it /bin/bash</span><br></pre></td></tr></table></figure>
<p>或spring-boot类web应用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker run -d --name test-docker -p 8080:8080 -it frankbsd/test-docker  </span><br></pre></td></tr></table></figure>

<p>设置私有仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker run -d \</span><br><span class="line">    -p 5000:5000 \</span><br><span class="line">    -v /opt/data/registry:/var/lib/registry \</span><br><span class="line">    registry</span><br></pre></td></tr></table></figure>
<p>此时，只能使用<code>127.0.0.1:5000</code>访问<br>要局域网可以访问，须配置非<code>https</code>仓库地址。编辑<code>/etc/docker/daemon.json</code>(位于docker安装的机器，非<code>registry</code>镜像中的文件)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;insecure-registries&quot;: [</span><br><span class="line">    &quot;192.168.199.100:5000&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查看私有仓库有的镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看私有仓库所有镜像名</span><br><span class="line">curl ip:port/v2/_catalog</span><br><span class="line"># 查看某个镜像的标签列表</span><br><span class="line">curl ip:port/v2/image-name/tags/list</span><br></pre></td></tr></table></figure>
<p>要在<code>jib</code>中使用非<code>https</code>的私有仓库，需要配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;allowInsecureRegistries&gt;true&lt;/allowInsecureRegistries&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<p>官方没有直接提供删除命令，但有api，可参考<a href="https://github.com/burnettk/delete-docker-registry-image">delete-docker-registry-image</a></p>
<p><a href="https://yeasy.gitbook.io/docker_practice/repository/registry">在私有仓库上传、搜索、下载镜像</a></p>
<p>设置私有仓库后，使用<code>docker pull</code>不能再直接从docker hub拉取镜像，要使用如下方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull docker.io/username/image-name:tag</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Java</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA使用</title>
    <url>/2024/07/30/IntelliJ-IDEA%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="设置IDEA的配置文件"><a href="#设置IDEA的配置文件" class="headerlink" title="设置IDEA的配置文件"></a>设置IDEA的配置文件</h2><p>a. <code>C:\Users\FRANK\AppData\Roaming\JetBrains\IntelliJIdea2021.3\idea.properties</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 避免编译日志过长，前面的被覆盖掉</span><br><span class="line">idea.cycle.buffer.size=disabled</span><br></pre></td></tr></table></figure>

<p>【注意】IdeaConfig和IDEA主程序目录并列存放在IDEA下，如果ideaConfig存放在主程序目录下，会导致报错“临时文件目录在安装文件夹下”，无法更新</p>
<h2 id="设置vmoptions"><a href="#设置vmoptions" class="headerlink" title="设置vmoptions"></a>设置<code>vmoptions</code></h2><p>b. <code>C:\Users\FRANK\AppData\Roaming\JetBrains\IntelliJIdea2021.3\idea64.exe.vmoptions</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 解决`IDEA`各种乱码</span><br><span class="line">-Dfile.encoding=UTF-8</span><br><span class="line">#最小启动内存参数</span><br><span class="line">-Xms1g</span><br><span class="line">#最大运行内存参数</span><br><span class="line">-Xmx2g</span><br><span class="line">#使用ZGC</span><br><span class="line">-XX:+useZGC</span><br><span class="line">#保留代码占用的内存容量参数</span><br><span class="line">-XX:ReservedCodeCacheSize=512m  </span><br><span class="line"># 使用`ja-netfilter`</span><br><span class="line">--add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED</span><br><span class="line">--add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED</span><br><span class="line">-javaagent:D:/Java/IdeaIUConfig/jetbra/ja-netfilter.jar=jetbrains</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/ja-netfilter/ja-netfilter">ja-netfilter</a><br><a href="https://jetbra.in/s">jetbra</a></p>
<h2 id="配置项目编码和IDE编码"><a href="#配置项目编码和IDE编码" class="headerlink" title="配置项目编码和IDE编码"></a>配置项目编码和IDE编码</h2><p>【File】→【Settings】→【Editor】→【File Encodings】<br>设置【IDE Encoding】、【Project Encoding】、【Default encoding for properties files】为<code>UTF-8</code></p>
<h2 id="设置Shared-Indexes"><a href="#设置Shared-Indexes" class="headerlink" title="设置Shared Indexes"></a>设置<code>Shared Indexes</code></h2><ol>
<li>idea设置<br><code>Settings</code>-&gt;<code>Tools</code>-&gt;<code>Shared Indexes</code>-&gt;<code>Wait for shared indexes</code><br><code>Settings</code>-&gt;<code>Tools</code>-&gt;<code>Shared Indexes</code>-&gt;<code>JDKs</code>-&gt;<code>Download automatically</code><br><code>Settings</code>-&gt;<code>Tools</code>-&gt;<code>Shared Indexes</code>-&gt;<code>Maven libraries</code>-&gt;<code>Download automatically</code><br><code>Settings</code>-&gt;<code>Appearance &amp; Behavior</code>-&gt;<code>System Settings</code>-&gt;<code>Http Porxy</code>-&gt;<code>Auto-detect proxy settings</code></li>
<li>把<code>index-cdn.jetbrains.com</code>加入代理</li>
</ol>
<h2 id="添加右键快捷键"><a href="#添加右键快捷键" class="headerlink" title="添加右键快捷键"></a>添加右键快捷键</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\IdeaIU]</span><br><span class="line">@=&quot;Open With IntelliJ IDEA Ultimate&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;D:\\Java\\IdeaIU\\bin\\idea64.exe&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\IdeaIU\command]</span><br><span class="line">@=&quot;\&quot;D:\\Java\\IdeaIU\\bin\\idea64.exe\&quot; \&quot;%1\&quot;&quot;</span><br></pre></td></tr></table></figure>

<h2 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h2><p>设置IDEA的代理，以提高打从开网络下载的项目时，下载 <code>Maven Wrapper</code>指定的 <code>Maven</code>的速度，同时，确认代理服务器代理域名含有<code>apache.org</code>的地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-DsocksProxyHost=127.0.0.1 -DsocksProxyPort=10808</span><br></pre></td></tr></table></figure>

<h2 id="JDK文档"><a href="#JDK文档" class="headerlink" title="JDK文档"></a>JDK文档</h2><p>新建项目或打开任意已有项目</p>
<p>文件–&gt;项目结构–&gt;SDK–&gt;JDK version–&gt;文档路径</p>
<ul>
<li><p>添加本地文档</p>
<ul>
<li>添加 JDK 的 <code>doc\api</code>目录</li>
</ul>
</li>
<li><p>使用在线</p>
<ul>
<li>使用最右侧的添加网页链接按钮</li>
</ul>
</li>
</ul>
<p><a href="https://docs.oracle.com/en/java/javase/21/docs/api/">甲骨文官网</a> 提供全部英文文档<br><a href="https://cunzaima.cn/">存在码</a> 提供JDK 21 API中文文档<br><a href="https://www.mklab.cn/apis">mklab</a>提供 JDK7-21的API文档，中文版有8和11<br><a href="https://www.apiref.com/">apiref</a>提供 JDK 8和11的中文文档<br><a href="https://www.matools.com/api">matools</a> 提供 JDK 8和11的中文文档</p>
<h2 id="配置-Maven"><a href="#配置-Maven" class="headerlink" title="配置 Maven"></a>配置 <code>Maven</code></h2><p><a href="https://mirrors.aliyun.com/apache/maven/">下载<code>Maven</code></a>或者使用IDEA自带Maven(位置在<code>$&#123;IntelliJ IDEA&#125;\plugins\maven\lib\maven3</code>)</p>
<p>配置环境变量<code>MAVEN_HOME</code>为<code>D:\ProgramFiles\Java\apache-maven-3.6.0</code>或<code>D:\ProgramFiles\Java\ideaIU-2019.3.1.win\plugins\maven\lib\maven3</code><br>并将<code>%MAVEN_HOME%\bin</code>添加到<code>PATH</code>中<br>命令行测试</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mvn <span class="literal">-v</span></span><br></pre></td></tr></table></figure>

<h3 id="约定配置"><a href="#约定配置" class="headerlink" title="约定配置"></a>约定配置</h3><p><code>Maven</code>提倡使用一个共同的标准目录结构，<code>Maven</code>使用约定优于配置的原则，大家尽可能的遵守这样的目录结构。如下所示：</p>
<table>
<thead>
<tr>
<th>目录</th>
<th>目的</th>
</tr>
</thead>
<tbody><tr>
<td><code>$&#123;basedir&#125;</code></td>
<td>存放<code>pom.xml</code>和所有的子目录</td>
</tr>
<tr>
<td><code>$&#123;basedir&#125;/src/main/java</code></td>
<td>项目的<code>java</code>源代码</td>
</tr>
<tr>
<td><code>$&#123;basedir&#125;/src/main/resources</code></td>
<td>项目的资源，比如说<code>property</code>文件，<code>springmvc.xml</code></td>
</tr>
<tr>
<td><code>$&#123;basedir&#125;/src/test/java</code></td>
<td>项目的测试类，比如说<code>Junit</code>代码</td>
</tr>
<tr>
<td><code>$&#123;basedir&#125;/src/test/resources</code></td>
<td>测试用的资源</td>
</tr>
<tr>
<td><code>$&#123;basedir&#125;/src/main/webapp/WEB-INF</code></td>
<td><code>web</code>应用文件目录，<code>web</code>项目的信息，比如存放<code>web.xml</code>、本地图片、<code>jsp</code>视图页面</td>
</tr>
<tr>
<td><code>$&#123;basedir&#125;/target</code></td>
<td>打包输出目录</td>
</tr>
<tr>
<td><code>$&#123;basedir&#125;/target/classes</code></td>
<td>编译输出目录</td>
</tr>
<tr>
<td><code>$&#123;basedir&#125;/target/test-classes</code></td>
<td>测试编译输出目录</td>
</tr>
<tr>
<td><code>Test.java</code></td>
<td><code>Maven</code>只会自动运行符合该命名规则的测试类</td>
</tr>
<tr>
<td><code>~/.m2/repository</code></td>
<td><code>Maven</code>默认的本地仓库目录位置（可更改）</td>
</tr>
</tbody></table>
<h3 id="设置本地仓库"><a href="#设置本地仓库" class="headerlink" title="设置本地仓库"></a>设置本地仓库</h3><p>编辑<code>%MAVEN_HOME%\conf\settings.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:/PackagesRepository/Java/Maven<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="设置镜像"><a href="#设置镜像" class="headerlink" title="设置镜像"></a>设置镜像</h3><p>在<code>mirrors</code>标签中添加子节点:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- mirrorOf设置</span></span><br><span class="line"><span class="comment">        *           匹配所有仓库ID。</span></span><br><span class="line"><span class="comment">        external:*  匹配除本地主机或基于文件的存储库外的所有仓库。</span></span><br><span class="line"><span class="comment">        从 Maven 3.8.0 开始，external:http:* 匹配所有使用 HTTP 的存储库，除了那些使用 localhost 的存储库。</span></span><br><span class="line"><span class="comment">        可以使用逗号作为分隔符指定多个存储库</span></span><br><span class="line"><span class="comment">        感叹号可以与上述通配符之一结合使用以排除存储库 ID</span></span><br><span class="line"><span class="comment">      </span></span><br><span class="line"><span class="comment">        注意不要在逗号分隔列表中的标识符或通配符周围包含额外的空格。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        当您使用高级语法并配置多个镜像时，声明顺序很重要。&lt;mirrorOf&gt;当 Maven</span></span><br><span class="line"><span class="comment">    查找某个存储库的镜像时，它首先检查与存储库标识符完全匹配的镜像。如果没有找到直接匹配，Maven会根据上面的规则（如果有的话）选择第一个匹配的镜像声明。因此，您可以通过更改定义中的顺序来影响匹配顺序settings.xml</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        例子：</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        * = 一切</span></span><br><span class="line"><span class="comment">        external:* = 不在本地主机上且不基于文件的所有内容。</span></span><br><span class="line"><span class="comment">        repo,repo1 = repo 或 repo1</span></span><br><span class="line"><span class="comment">        *,!repo1 = 除 repo1 之外的所有内容</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h3><p>如果想使用其它代理仓库,可在<code>&lt;repositories&gt;&lt;/repositories&gt;</code>节点中加入对应的仓库使用地址。以使用spring代理仓为例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/spring<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置archetype"><a href="#配置archetype" class="headerlink" title="配置archetype"></a>配置<code>archetype</code></h3><p>archetype配置(<code>maven-archetype-plugin 3.x</code>已经不支持此配置,<code>maven-archetype-plugin 2.x</code>可以)</p>
<p><code>archetype</code>插件有一个<code>archetypeCatalog</code>参数，这个参数指定从哪里获取<code>archetype-catalog.xml</code>文件，可选的取值有：</p>
<ul>
<li><code>internal</code> 只使用内置的目录文件（只包含<code>org.apache.maven.archetypes</code>底下的模板工程）</li>
<li><code>local</code> 使用本地的目录文件（<code>~/.m2/archetype-catalog.xml</code>）</li>
<li><code>remote</code> 使用<code>maven</code>网站上的目录文件</li>
<li><code>file://path/to/archetype-catalog.xml</code> 指定本地的一个目录文件，如果文件叫<code>archetype-catalog.xml</code>指定目录就可以了</li>
<li><code>http://url/to/archetype-catalog.xml</code> 指定远程的一个目录文件，如果文件叫<code>archetype-catalog.xml</code>指定目录就可以了<br>默认的值是<code>remote,local</code>，也就是先显示官方网站上的，再显示本地的。</li>
</ul>
<p>所以我们可以有两种做法：</p>
<ul>
<li>如果你觉得<code>org.apache.maven.archetypes</code>里的模板工程够用了，直接指定<code>-DarchetypeCatalog=internal</code>即可</li>
<li>如果你想要完整的模板工程，可以先下载<a href="https://repo.maven.apache.org/maven2/archetype-catalog.xml">archetype-catalog.xml</a><code>https://repo.maven.apache.org/maven2/archetype-catalog.xml</code>，然后把它放到<code>~/.m2</code>下，然后指定<code>-DarchetypeCatalog=local</code>即可</li>
</ul>
<p>参考</p>
<ol>
<li><a href="https://maven.apache.org/settings.html">Maven Settings Reference</a></li>
<li><a href="https://maven.apache.org/settings.html#Mirrors">Maven Settings Reference Mirrors</a></li>
<li><a href="https://maven.apache.org/guides/mini/guide-mirror-settings.html">Using Mirrors for Repositories</a></li>
<li><a href="https://swenfang.github.io/2018/06/03/Maven-Priority/">Maven仓库理解和优先级</a></li>
<li><a href="https://maven.aliyun.com/mvn/guide">阿里云云效 Maven</a></li>
</ol>
<h3 id="IDEA-的Maven配置"><a href="#IDEA-的Maven配置" class="headerlink" title="IDEA 的Maven配置"></a><code>IDEA</code> 的<code>Maven</code>配置</h3><p>【File】→【Settings】→【Build，Execution，Deployment】→【Build Tools】→【Maven】,其中</p>
<ul>
<li>【Maven home directory】设为<code>%MAVEN_HOME%</code>，即<code>Marven</code>的目录</li>
<li>【User Settings file】设为<code>%MAVEN_HOME%\conf\settings.xml</code>,即配置文件</li>
<li>【Local repository】设为<code>E:\PackagesRepository\Java</code>,即本地存放<code>maven</code>仓库的目录，默认会随着【User Settings file】的更改而更改</li>
<li>下一级【Runner】里【<code>VM Options</code>】设为<code>-DarchetypeCatalog=internal</code></li>
</ul>
<p><em><strong>注意：</strong></em><br>这种配置方式，都是针对项目的具体配置，若新建项目，可能还需要配置。</p>
<p>全局配置，都是从启动页面的【Configure】→【Settings】开始。具体路径如下：<br>【Configure】→【Settings】→【Build，Execution，Deployment】→【Build Tools】→【Maven】</p>
<h2 id="配置Gradle"><a href="#配置Gradle" class="headerlink" title="配置Gradle"></a>配置Gradle</h2><ol>
<li><a href="https://mirrors.cloud.tencent.com/gradle/">下载Gradle</a>,解压到<code>D:\ProgramFiles\Java\gradle-version</code></li>
<li>配置环境变量<br><code>GRADLE_HOME</code>，值为<code>D:\ProgramFiles\Java\gradle-version</code><br><code>GRADLE_USER_HOME</code>,值为<code>D:\PackagesRepository\Java\Gradle</code>,不能与maven公用本地仓库，只能通过mavenLocal()使用maven的本地仓库</li>
<li>添加<code>PATH</code><br><code>%GRADLE_HOME%\bin</code></li>
<li>命令行测试</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">gradle <span class="literal">-v</span></span><br></pre></td></tr></table></figure>

<p>另外，为了加快gradle构建，在家目录下的.gradle&#x2F;gradle.properties文件（如没有，可需要新建文件），加上如下的代码即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.gradle.parallel=true</span><br><span class="line">org.gradle.daemon=true</span><br><span class="line">org.gradle.jvmargs=-Xmx2g -XX:MaxPermSize=2048m -XX:+HeapDumpOnOutOfMemoryError</span><br></pre></td></tr></table></figure>

<p>参考</p>
<ol>
<li><a href="https://droidyue.com/blog/2017/04/16/speedup-gradle-building/">一些关于加速Gradle构建的个人经验</a></li>
<li><a href="https://blog.csdn.net/IOT_AI/article/details/106617626">IDEA如何正确配置Gradle? GRADLE_USER_HOME 和 Gradle user home的区别</a></li>
</ol>
<h2 id="IDEA的Tomcat配置"><a href="#IDEA的Tomcat配置" class="headerlink" title="IDEA的Tomcat配置"></a><code>IDEA</code>的<code>Tomcat</code>配置</h2><ol>
<li><p>【Run】→【Edit Configurations】→【Templates】→【Tomcat Server】&#x2F;【TomEE Server】→【+】<br>另对具体项目还需设置【Depoyment】，否则，运行不正常</p>
</li>
<li><p>【Configure】→【Settings】→【Build，Execution，Deployment】→【Application Servers】→【+】→【Tomcat Server】</p>
</li>
</ol>
<h3 id="CATALINA-HOME与CATALINA-BASE的区别"><a href="#CATALINA-HOME与CATALINA-BASE的区别" class="headerlink" title="CATALINA_HOME与CATALINA_BASE的区别?"></a><code>CATALINA_HOME</code>与<code>CATALINA_BASE</code>的区别?</h3><ol>
<li><code>CATALINA_HOME</code>即<code>Tomcat</code>的安装目录，<code>CATALINA_BASE</code>是<code>Tomcat</code>的工作目录。如果同时运行多个<code>Tomcat</code>实例，通常会配置多个工作目录。每个<code>Tomcat</code>实例独占一个工作目录，但是共享一个安装目录。</li>
<li><code>Tomcat</code>每个运行实例需要使用自己的<code>conf</code>、<code>logs</code>、<code>temp</code>、<code>webapps</code>、<code>work</code>和<code>shared</code>目录，因此<code>CATALINA_BASE</code>就指向这些目录。 而其他目录主要包括了<code>Tomcat</code>的二进制文件和脚本，<code>CATALINA_HOME</code>就指向这些目录。<code>IntelliJ Idea</code>在每次重新启动<code>Tomcat</code>的时候都会重新建立或者说更新<code>Tomcat</code>工作目录的内容。</li>
</ol>
<h4 id="IntelliJ-Idea中的Tomcat项目为何在-IntelliJIdea2019-1-system-tomcat中？"><a href="#IntelliJ-Idea中的Tomcat项目为何在-IntelliJIdea2019-1-system-tomcat中？" class="headerlink" title="IntelliJ Idea中的Tomcat项目为何在.IntelliJIdea2019.1\system\tomcat中？"></a><code>IntelliJ Idea</code>中的<code>Tomcat</code>项目为何在<code>.IntelliJIdea2019.1\system\tomcat</code>中？</h4><p><code>intelliJ Idea</code>在每次启动<code>Tomcat</code>服务器的时候都会修改<code>CATALINA_BASE</code></p>
<h4 id="Tomcat服务器是如何找到localhost-8080页面与localhost-8080-demotwo页面的？"><a href="#Tomcat服务器是如何找到localhost-8080页面与localhost-8080-demotwo页面的？" class="headerlink" title="Tomcat服务器是如何找到localhost:8080页面与localhost:8080/demotwo页面的？"></a><code>Tomcat</code>服务器是如何找到<code>localhost:8080</code>页面与<code>localhost:8080/demotwo</code>页面的？</h4><ol>
<li><code>IntelliJ Idea</code>根据<code>CATALINA_HOME</code>的启动<code>Tomcat</code>服务器</li>
<li><code>IntelliJ Idea</code>在<code>CATALINA_BASE</code>指定的目录下生成项目独有的<code>conf</code>、<code>logs</code>、<code>work</code>等文件夹。</li>
<li>在<code>CATALINA_BASE</code>中的<code>conf</code>文件夹下，文件<code>server.xml</code>的<code>Host</code>标签指定了<code>Tomcat</code>的根目录（通常为<code>CATALINA_HOME\webapps\ROOT</code>），即在浏览器中显示的<code>localhost:8080</code>定位的就是此处。<code>name</code>属性和<code>appBase</code>属性起到了一个映射的作用</li>
<li><code>conf</code>的子目录<code>Catalina\localhost\</code>下的<code>xml</code>文件（以虚拟路径命名）<code>Context</code>标签中的<code>path</code>属性和<code>docBase</code>属性也起到了同样的映射作用。即<code>name + path</code> （<code>localhost:8080/demotwo</code>）对应的是项目的发布路径。</li>
<li>如果在发布项目的时候将虚拟路径设置成“<code>\</code>”，<code>IntelliJ Idea</code>则不会生成<code>Catalina</code>子目录，而会在<code>server.xml</code>中将<code>name</code>属性映射到项目的发布路径</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Jackson封装</title>
    <url>/2024/07/31/Jackson%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rl.algorithmassistance.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.type.TypeReference;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对象的所有字段全部列入，还是其他的选项，可以忽略null等</span></span><br><span class="line">        om.setSerializationInclusion(JsonInclude.Include.ALWAYS);</span><br><span class="line">        <span class="comment">// 设置Date类型的序列化及反序列化格式</span></span><br><span class="line">        om.setDateFormat(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 忽略空Bean转json的错误</span></span><br><span class="line">        om.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 忽略未知属性，防止json字符串中存在，java对象中不存在对应属性的情况出现错误</span></span><br><span class="line">        om.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册一个时间序列化及反序列化的处理模块，用于解决jdk8中localDateTime等的序列化问题</span></span><br><span class="line">        om.registerModule(<span class="keyword">new</span> <span class="title class_">JavaTimeModule</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对象 =&gt; json字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 源对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; String <span class="title function_">toJson</span><span class="params">(T obj)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                json = om.writeValueAsString(obj);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">                log.warn(e.getMessage(), e);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * json字符串 =&gt; 对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> json  源json串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 对象类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;   泛型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">parse</span><span class="params">(String json, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> parse(json, clazz, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * json字符串 =&gt; 对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> json 源json串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 对象类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;  泛型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">parse</span><span class="params">(String json, TypeReference type)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> parse(json, <span class="literal">null</span>, type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * json =&gt; 对象处理方法</span></span><br><span class="line"><span class="comment">     * &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 参数clazz和type必须一个为null，另一个不为null</span></span><br><span class="line"><span class="comment">     * &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 此方法不对外暴露，访问权限为private</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> json  源json串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 对象类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type  对象类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;   泛型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">parse</span><span class="params">(String json, Class&lt;T&gt; clazz, TypeReference type)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">T</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(json)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">                    obj = om.readValue(json, clazz);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    obj = (T) om.readValue(json, type);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                log.warn(e.getMessage(), e);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT分析</title>
    <url>/2024/07/31/JWT%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p><a href="https://learnku.com/articles/17883">原文</a></p>
<p>本篇文章不讨论 Laravel 中 JWT 这个怎么使用，要这方面内容的可以看我另一篇文章 <a href="https://learnku.com/articles/10885/full-use-of-jwt">JWT 完整使用详解</a> 。</p>
<p>在此我要从一个更深的层次来探讨 JWT 在实际运用中的使用以及其优缺点，以及 JWT 和 Oauth 2.0 这两者到底有什么差别和联系。</p>
<p>首先我们从 Token 入手，再联系到 JWT，然后分析 JWT 的优缺点和使用场景，最后再联系到 Oauth2.0。</p>
<h3 id="一、Token"><a href="#一、Token" class="headerlink" title="一、Token"></a>一、Token</h3><p>token 是一串字符串，通常因为作为鉴权凭据，最常用的使用场景是 API 鉴权。</p>
<h4 id="1-API-鉴权"><a href="#1-API-鉴权" class="headerlink" title="1. API 鉴权"></a>1. API 鉴权</h4><p>那么 API 鉴权一般有几种方式呢？我大概整理了如下：</p>
<h5 id="cookie-session"><a href="#cookie-session" class="headerlink" title="cookie + session"></a>cookie + session</h5><p>和平常 web 登陆一样的鉴权方式，很常见，不再赘述。</p>
<h5 id="HTTP-Basic"><a href="#HTTP-Basic" class="headerlink" title="HTTP Basic"></a>HTTP Basic</h5><p>将账号和密码拼接然后 base64 编码加到 header 头中。很显然，因为账号和密码几乎是『明文』传输的，而且每次请求都传，安全性可想而知。</p>
<h5 id="HTTP-Digest"><a href="#HTTP-Digest" class="headerlink" title="HTTP Digest"></a>HTTP Digest</h5><p>将账号和密码加上其他一些信息拼接然后取摘要加到 header 头中。这个安全性比上面要好一点，因为如果是取摘要的话，即使信息段被截取，也无法轻易破解出来（当然也是有破解的可能）。</p>
<p>不过其实最大的问题还是：每次请求都要对账号、密码取一次摘要，也就是说每次请求都要有账号和密码，也就是说账号和密码要么缓存一下，要么就每次请求要去用户输一次密码，这样显然不合适。同样，上面的 Basic 也存在这样的问题。</p>
<h5 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h5><p>token 通过一次登录验证，得到一个鉴权字符串，然后以后带着这个鉴权字符串进行后续操作，这样就可以解决每次请求都要带账号密码的问题，而且也不需要反复使用账号和密码。</p>
<p>所以我们接下来主要探讨 token 相对于 Cookie + Session 的认证方式有什么优势呢？</p>
<h4 id="2-Token-的优势"><a href="#2-Token-的优势" class="headerlink" title="2. Token 的优势"></a>2. Token 的优势</h4><p>token 相对于 Cookie + Session 的优点，主要有下面两个：</p>
<h5 id="CSRF-攻击"><a href="#CSRF-攻击" class="headerlink" title="CSRF 攻击"></a>CSRF 攻击</h5><p>这个原理不多做介绍，构成这个攻击的原因，就在于 Cookie + Session 的鉴权方式中，鉴权数据（cookie 中的 session_id）是由浏览器自动携带发送到服务端的，借助这个特性，攻击者就可以通过让用户误点攻击链接，达到攻击效果。而 token 是通过客户端本身逻辑作为动态参数加到请求中的，token 也不会轻易泄露出去，因此 token 在 CSRF 防御方面存在天然优势。</p>
<h5 id="适合移动应用"><a href="#适合移动应用" class="headerlink" title="适合移动应用"></a>适合移动应用</h5><p>移动端上不支持 cookie，而 token 只要客户端能够进行存储就能够使用，因此 token 在移动端上也具有优势。</p>
<h4 id="3-Token-的种类"><a href="#3-Token-的种类" class="headerlink" title="3. Token 的种类"></a>3. Token 的种类</h4><p>一般来说 token 主要三种：</p>
<ul>
<li>自定义的 token：开发者根据业务逻辑自定义的 token</li>
<li>JWT：JSON Web Token，定义在 RFC 7519 中的一种 token 规范</li>
<li>Oauth2.0：定义在 RFC 6750 中的一种授权规范，但这其实并不是一种 token，只是其中也有用到 token<br>以上，我仔细介绍了 API 常用的鉴权方式，以及 token 相对于 cookie + session 的优点。然后接下来仔细分析 JWT。</li>
</ul>
<h3 id="二、JWT-的组成和优势"><a href="#二、JWT-的组成和优势" class="headerlink" title="二、JWT 的组成和优势"></a>二、JWT 的组成和优势</h3><p>JWT 全称 JSON Web Tokens ，是一种规范化的 token。可以理解为对 token 这一技术提出一套规范，是在 RFC 7519 中提出的。</p>
<h4 id="1-组成"><a href="#1-组成" class="headerlink" title="1. 组成"></a>1. 组成</h4><p>一个 JWT token 是一个字符串，它由三部分组成，头部、载荷与签名，中间用 . 分隔，例如：xxxxx.yyyyy.zzzzz</p>
<h5 id="头部（header）"><a href="#头部（header）" class="headerlink" title="头部（header）"></a>头部（header）</h5><p>头部通常由两部分组成：令牌的类型（即 JWT）和正在使用的签名算法（如 HMAC SHA256 或 RSA.）。<br>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后用 <code>Base64Url</code> 编码得到头部，即<code>xxxxx</code>。</p>
<h5 id="载荷（Payload）"><a href="#载荷（Payload）" class="headerlink" title="载荷（Payload）"></a>载荷（Payload）</h5><p>载荷中放置了 token 的一些基本信息，以帮助接受它的服务器来理解这个 token。同时还可以包含一些自定义的信息，用户信息交换。</p>
<p>载荷的属性也分三类：</p>
<ul>
<li>预定义（Registered）</li>
<li>公有（public）</li>
<li>私有（private）</li>
<li>预定义的载荷<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;sub&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;iss&quot;: &quot;http://localhost:8000/auth/login&quot;,</span><br><span class="line">  &quot;iat&quot;: 1451888119,</span><br><span class="line">  &quot;exp&quot;: 1454516119,</span><br><span class="line">  &quot;nbf&quot;: 1451888119,</span><br><span class="line">  &quot;jti&quot;: &quot;37c107e4609ddbcc9c096ea5ee76c667&quot;,</span><br><span class="line">  &quot;aud&quot;: &quot;dev&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>这里面的前 7 个字段都是由官方所定义的，也就是预定义（Registered claims）的，并不都是必需的。</p>
<ul>
<li>iss (issuer)：签发人</li>
<li>sub (subject)：主题</li>
<li>aud (audience)：受众</li>
<li>exp (expiration time)：过期时间</li>
<li>nbf (Not Before)：生效时间，在此之前是无效的</li>
<li>iat (Issued At)：签发时间</li>
<li>jti (JWT ID)：编号</li>
</ul>
<h5 id="公有的载荷"><a href="#公有的载荷" class="headerlink" title="公有的载荷"></a>公有的载荷</h5><p>在使用 JWT 时可以额外定义的载荷。为了避免冲突，应该使用 IANA JSON Web Token Registry 中定义好的，或者给额外载荷加上类似命名空间的唯一标识。</p>
<h5 id="私有载荷"><a href="#私有载荷" class="headerlink" title="私有载荷"></a>私有载荷</h5><p>在信息交互的双方之间约定好的，既不是预定义载荷也不是公有载荷的一类载荷。这一类载荷可能会发生冲突，所以应该谨慎使用。</p>
<p>将上面的 json 进行 Base64Url 编码得到载荷，，即 yyyyy。</p>
<blockquote>
<p>关于载荷的理解：</p>
</blockquote>
<blockquote>
<p>这里三种载荷的定义应该明确的一点是 —— 对于后两种载荷，它并非定义了载荷的种类，然后让你去选用哪种载荷，而是对你可能会定义出来的载荷做一个分类。</p>
</blockquote>
<blockquote>
<p>比如你定义了一个 admin 载荷，这个载荷按其分类应该是私有载荷，可能会和其他人定义的发生冲突。但如果你加了一个前缀（命名空间），如 namespace-admin，那么这应该就算一个公有载荷了。（但其实标准并没有定义怎么去声明命名空间，所以严格来说，还是可能会冲突）</p>
</blockquote>
<blockquote>
<p>但是在现实中，团队都是约定好的了要使用的载荷，这样的话，好像根本不存在冲突的可能。那为什么文档要这么定义呢？我的理解是，RFC 是提出一种技术规范，出发点是一套通用的规范，考虑的范围是所有开发者，而不仅仅局限于一个开发者团队。就像用 token 做认证已经是很常见的技术了，但是 JWT 的提出就相当于提出了一套较为通用的技术规范。既然是为了通用，那么考虑在大环境下的冲突可能性也是必须的。</p>
</blockquote>
<h5 id="签名（Signature）"><a href="#签名（Signature）" class="headerlink" title="签名（Signature）"></a>签名（Signature）</h5><p>签名时需要用到前面编码过的两个字符串，如果以 HMACSHA256 加密，就如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">    base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">    base64UrlEncode(payload),</span><br><span class="line">    secret</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>加密后再进行 <code>base64url</code> 编码最后得到的字符串就是 token 的第三部分 <code>zzzzz</code>。</p>
<p>组合便可以得到 token：<code>xxxxx.yyyyy.zzzzz</code>。</p>
<p>签名的作用：保证 JWT 没有被篡改过，原理如下：</p>
<blockquote>
<p>HMAC 算法是不可逆算法，类似 MD5 和 hash ，但多一个密钥，密钥（即上面的 secret）由服务端持有，客户端把 token 发给服务端后，服务端可以把其中的头部和载荷再加上事先共享的 secret 再进行一次 HMAC 加密，得到的结果和 token 的第三段进行对比，如果一样则表明数据没有被篡改。</p>
</blockquote>
<blockquote>
<p>Hash-based Message Authentication Code</p>
</blockquote>
<h5 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h5><p>JWT 的使用有两种方式：</p>
<ul>
<li>加到 url 中：?token&#x3D;你的token</li>
<li>加到 header 中，建议用这种，因为在 https 情况下更安全：Authorization:Bearer 你的token</li>
</ul>
<p>JWT 在客户端的存储有三种方式：</p>
<ul>
<li>LocalStorage</li>
<li>SessionStorage</li>
<li>Cookie [不能设置 HTTPonly]<br>但是最推荐的还是第三种，因为第一二种存在跨域读取限制，而 Cookie 使用不同的跨域策略</li>
</ul>
<p>因为没开 HTTPonly，所以要注意防范 XSS 漏洞。</p>
<h5 id="Cookie-的跨域策略"><a href="#Cookie-的跨域策略" class="headerlink" title="Cookie 的跨域策略"></a>Cookie 的跨域策略</h5><p>子可以读父，但是父不可以读子，兄弟之间不能互相访问。</p>
<p>a.xxx.com 和 b.xxx.com 可以读 xxx.com，但是 a.xxx.com 和 b.xxx.com 不能互相读取，xxx.com 也不能读 a.xxx.com 和 b.xxx.com 的。</p>
<blockquote>
<p>你可能会想：存 Cookie 那我不是又变得和 cookie + session 一样了吗？</p>
</blockquote>
<blockquote>
<p>其实不然，因为存 cookie 在这只是用到了其存储机制，而没有利用其去鉴权。也就是说我只是简单存一下，并没有期望浏览器带上去 token 去鉴权，将 token 加入请求这部分操作还是我手动进行的。</p>
</blockquote>
<h4 id="3-相对于一般-token-的优点"><a href="#3-相对于一般-token-的优点" class="headerlink" title="3. 相对于一般 token 的优点"></a>3. 相对于一般 token 的优点</h4><p>既然 JWT 也是一种 token，那么它相对于普通的 token 有何优点呢？</p>
<h5 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h5><p>因为 JWT 的有效期完全与其载荷中编码的过期时间，服务端不维护任何状态，因此 JWT 『一般』是『无状态』的（为什么是一般，后面会仔细说）。无状态最大的优势在于三点：</p>
<ul>
<li>节省服务器的资源：因为服务端无需维护一个状态，因此能够节省服务端原先保存这些状态所花费的资源</li>
<li>适合分布式：因为服务端无需维护状态，因此如果服务端是多台服务器组成的分布式集群，那么无需像『有状态』一样互相同步各自的状态。</li>
<li>时间换空间：因为 token 的校验时通过签名校验来进行的，签名校验消耗的是 CPU 时间，而『有状态』是需要通过客户端提供的凭据对服务端现有的状态进行一次查询，消耗的是 I&#x2F;O 和内存、磁盘空间。通常对于一个 Web 服务来说，其属于 I&#x2F;O 密集型，因此通过时间换空间这一操作，可以提高整体的硬件使用率。</li>
</ul>
<h5 id="编码数据"><a href="#编码数据" class="headerlink" title="编码数据"></a>编码数据</h5><p>因为 JWT 能够在载荷中编码了部分信息，所以如果把常用数据编码进去的话，能够大大减少数据库的查询次数，不过有两点需要额外注意的：</p>
<ul>
<li>载荷信息是明文编码的，所以不能编码敏感信息在里面，如果要编码可以先加密再编码进去</li>
<li>token 在每次请求时都会进行传输，所以载荷中不能编码过多的信息，否则会降低传输效率</li>
</ul>
<p>所以 JWT 就有四个优点了：</p>
<ul>
<li>防 CSRF</li>
<li>适合移动应用</li>
<li>无状态</li>
<li>编码数据<br>前两个是 token 的优势，后两个是 JWT 独特的优势。</li>
</ul>
<h3 id="三、JWT-的安全问题"><a href="#三、JWT-的安全问题" class="headerlink" title="三、JWT 的安全问题"></a>三、JWT 的安全问题</h3><p>既然主要使用场景是鉴权，那么安全问题就是不得不考虑的问题了。下面对 JWT 可能需要的安全问题都进行一次深入的探讨并寻求最佳的解决方案。</p>
<h4 id="1-重放攻击"><a href="#1-重放攻击" class="headerlink" title="1. 重放攻击"></a>1. 重放攻击</h4><p>重放攻击是通过把原先的包进行一次重放来进行攻击的手段。需要先明确是的 cookie + session 也是存在重放攻击的问题的。</p>
<p>常用的防范重放攻击的措施主要有以下几种：</p>
<h5 id="timestamp"><a href="#timestamp" class="headerlink" title="timestamp"></a>timestamp</h5><p>在请求中夹带一个时间戳，设置较短的有效期，如果一个新来的请求的请求时间超过了请求中的有效期，则认为无效。但是这种策略也存在问题，即如果一个黑客『眼疾手快』在有效期以内将你的包进行了重放， 那就来攻击成功。</p>
<p>这种策略对应到 JWT 中就是给 token 设置一个较短的有效期。</p>
<h5 id="nonce"><a href="#nonce" class="headerlink" title="nonce"></a>nonce</h5><p>在请求中夹带一个随机字符串，这个字符串传送到客户端后即存入客户端的黑名单中，如果一个新来的请求其中存在的随机字符串已经在黑名单中则认为无效。但是显然，这个策略存在巨大的问题：服务端需要维护一个黑名单库，这个库的大小会随着业务运行的时间而变得无比巨大，从而严重影响效率。</p>
<p>这种策略对应到 JWT 中就是给 token 设置一个黑名单，但是不设置有效期。</p>
<h5 id="timestamp-nonce"><a href="#timestamp-nonce" class="headerlink" title="timestamp + nonce"></a>timestamp + nonce</h5><p>在请求中夹带一个随机字符串和一个时间戳，如果一个新来的请求，其随机字符串已经在黑名单中则认为无效，或者一个请求的的请求时间超过了其有效期，则也认为其无效。这样黑名单的范围只需设置为时间戳策略的有效期范围即可。</p>
<p>这种策略对应到 JWT 中就是给 token 既设置一个黑名单，又设置一个有效期。</p>
<h5 id="挑战-应答"><a href="#挑战-应答" class="headerlink" title="挑战 - 应答"></a>挑战 - 应答</h5><p>这个其实和 timestamp + nonce 策略一样，只是随机字符串是有服务端生成给客户端的，客户端携带服务端所给的随机串来请求。这样有什么好处呢？服务端可以通过一个加密算法来生成这个串，使其和时间戳相关，同时客户端又无法伪造。这样就不需要维护黑名单了。同样也是时间换空间的策略。但是显然每次或几次请求就要进行一次与预请求以得到随机串，并不是特别方便，造成的额外消耗也有待考量。</p>
<h5 id="序列号"><a href="#序列号" class="headerlink" title="序列号"></a>序列号</h5><p>通过在请求中嵌入一个序列号，每次请求依次加一，如果一个请求的序列号早已用过，则认为无效。但是这个要用逻辑额外一个全局序列号，并不是特别方便。</p>
<h5 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h5><p>终极解决方案了，HTTPS 在握手过程中会自动维护一个隐式序列号，解决了上面要自己维护序列号的问题。</p>
<p>注意：以上均没有讨论客户端主动重放的问题，有兴趣的同学可以自己研究一下。</p>
<h4 id="2-token-被盗"><a href="#2-token-被盗" class="headerlink" title="2. token 被盗"></a>2. token 被盗</h4><p>因为 token 中包含了登陆状态，因此一旦 token 被盗，那么就会被人盗用身份。那么 token 针对被盗的防范措施整理如下：</p>
<ul>
<li>使用 HTTPS 传输：从传输层的角度解决问题</li>
<li>HTTPOnly：从存储层的角度解决问题，防止 XSS 攻击窃取 cookie，但是这种方案其实存在问题，因为这样 js 就无法读取 token 并把它加到 header 头中了。所以不开启 HTTPOnly 的话必须要额外注意防范 XSS 攻击。</li>
<li>在 token 中嵌入客户端指纹：通过客户端指纹，即使黑客盗取了你的 cookie，他也无法用你的 cookie 进行请求。</li>
<li>设置较短的 token 有效期：这样如果 token 被盗，只要超过一定时限就无法使用。</li>
</ul>
<h3 id="四、JWT-的其他问题"><a href="#四、JWT-的其他问题" class="headerlink" title="四、JWT 的其他问题"></a>四、JWT 的其他问题</h3><p>除了安全问题，JWT 还有许多其他需要考虑的问题。</p>
<h4 id="1-注销问题"><a href="#1-注销问题" class="headerlink" title="1. 注销问题"></a>1. 注销问题</h4><p>因为 JWT 是无状态的，所以它的有效期完全由其本身决定，也就是说服务端无法让一个 token 失效。显然这是一个比较大的问题，对此也有诸多解决方案：</p>
<h5 id="1-1-客户端主动注销"><a href="#1-1-客户端主动注销" class="headerlink" title="1.1 客户端主动注销"></a>1.1 客户端主动注销</h5><h5 id="客户端直接删除存储-token-的-cookie"><a href="#客户端直接删除存储-token-的-cookie" class="headerlink" title="客户端直接删除存储 token 的 cookie"></a>客户端直接删除存储 token 的 cookie</h5><p>这种方案最为简单，操作的结果是无论客户端还是服务端都没有这个 token，可问题是，这个 token 并没有真正不可使用，而是处于一个游离态。</p>
<h5 id="黑名单策略"><a href="#黑名单策略" class="headerlink" title="黑名单策略"></a>黑名单策略</h5><p>客户端携带要注销的 token 访问一个注销接口，服务端把 token 加入一个黑名单。</p>
<p>此策略是否会出现黑名单过大的问题？</p>
<p>答案是不会，因为黑名单只需维护本身没有过期但又要使其无效的 token，过期的 token 就可以不用存在黑名单了。</p>
<h5 id="1-2-服务端主动注销-用户修改密码"><a href="#1-2-服务端主动注销-用户修改密码" class="headerlink" title="1.2 服务端主动注销 \ 用户修改密码"></a>1.2 服务端主动注销 \ 用户修改密码</h5><h5 id="把-token-和-uuid-用-key-value-对存储在-redis"><a href="#把-token-和-uuid-用-key-value-对存储在-redis" class="headerlink" title="把 token 和 uuid 用 key-value 对存储在 redis"></a>把 token 和 uuid 用 key-value 对存储在 redis</h5><p>这种方案看上去没问题，但是实际上，相当于自己实现了一次 cookie + session，JWT 就失去了『无状态』这一特性，从也会失去『无状态』特性带来的一系列的优点。</p>
<h5 id="让每个用户都有一个-secret"><a href="#让每个用户都有一个-secret" class="headerlink" title="让每个用户都有一个 secret"></a>让每个用户都有一个 secret</h5><p>前面讲到签发 token 的时候用到了 secret ，这种策略的思想就是让每个用户都有一个 secret，注销一个用户的时候修改其 secret，即可使其前面签发的 token 无法通过校验而失效。</p>
<p>这种策略上听上去不需要维护一个状态，但是实际上存在更大的问题。试想一下，第一种方案是通过 uuid 在已登录用户的 token 表中找到要注销的 token 注销。cookie + session 是通过 session_id 在已登录的用户的 session 表中找到其对应的 session 并删除来注销。而此方案是通过 uuid 在所有用户（而非已登录用户）中找到对于的 secret 修改来注销。这样看来会发现效率更低，因为查找范围更大了。</p>
<h5 id="预黑名单"><a href="#预黑名单" class="headerlink" title="预黑名单"></a>预黑名单</h5><p>把要注销的用户的 uuid 和当前时间（TIME） 组成 key-value 对加入预黑名单，下次请求来时，若其 uuid 和黑名单中的对应，并且签发时间在 TIME 之前，则将其注销。这样查找范围就是未过期但又要注销的用户。并且在实现逻辑上这个预黑名单可以和签名的黑名单做到一起。</p>
<blockquote>
<p>关于黑名单策略的补充：</p>
</blockquote>
<blockquote>
<p>有人可能会觉得黑名单也是一种状态，用这种策略实现的 JWT 并不能算纯正的无状态。这种说法没错，但是考虑每次要检索的数据范围可以得到下面一个关系：</p>
</blockquote>
<blockquote>
<p>未过期但要提前注销的用户或 token 数 &lt; 所有已登录用户数 &lt; 所有用户数</p>
</blockquote>
<blockquote>
<p>此处的『 &lt; 』基本可以看成『远远小于』，所以黑名单策略虽然也算有状态，但是其维护的状态数也是特别小的。</p>
</blockquote>
<blockquote>
<p>可见 『黑名单』策略能够有效解决 JWT 的注销问题。</p>
</blockquote>
<h4 id="2-续签问题"><a href="#2-续签问题" class="headerlink" title="2. 续签问题"></a>2. 续签问题</h4><p>session 可以自动续签，那 token 如何实现自动续签呢？我们先仔细分析一下在 web 和 app 环境中，token 分别如何续签。先具体分析 web 续签和 app 续签分别是什么样的具体需求。</p>
<h5 id="web"><a href="#web" class="headerlink" title="web"></a>web</h5><p>超过一段时间没有请求，需要重新登录，这个时间一般设置为 1-2 小时</p>
<h5 id="app"><a href="#app" class="headerlink" title="app"></a>app</h5><p>超过一段较长的时间没有请求，需要重新登录，这个时间一般为 15-30 天</p>
<p>那这个需求可以如何实现呢？</p>
<h5 id="2-1-方式一"><a href="#2-1-方式一" class="headerlink" title="2.1 方式一"></a>2.1 方式一</h5><ul>
<li>服务端接管刷新</li>
<li>token 设置一个『过期时间』</li>
<li>token 过期后但是仍在『刷新时间』内时仍然可刷新</li>
<li>token 过期后超过『刷新时间』就不能再刷新，需重新登录</li>
</ul>
<h5 id="web-1"><a href="#web-1" class="headerlink" title="web"></a>web</h5><p>假设一个 token 的签发时间为 12:00，需求为 2h 未进行请求就要重新登录。则过期时间为 1h，刷新时间为 3h。</p>
<p>那么在 12:00 - 13:00 其都是可以正常使用的，如果在 13:00 - 15:00 进行请求，服务端自动换一个新 token 给客户端，达成续签。</p>
<p>如果 13:00 -15:00 之间没有进行请求，而是在 15:00 之后进行的请求，那么判断过期，需重新登录。</p>
<p>这样的话，最终的实现效果是：token 过期 2h 后需要重新登录 ，而不是 token 2h 未使用需要重新登录，导致的结果是，用户是 2 - 3h 未进行请求，需要重新登录。比设定的需求要多一个小时的不确定时间，但这也是没办法的办法了，至于会不会对业务造成影响，看具体需求吧，大多数的情况还是不会的。</p>
<h5 id="app-1"><a href="#app-1" class="headerlink" title="app"></a>app</h5><p>和 web 端类似，设置成更长的时间周期即可。</p>
<p>对使用 Laravel 开发并使用 tymon&#x2F;jwt-auth 这个插件的开发者，有个必须要注意的地方。</p>
<p>此处进行 token 的刷新并不是通过 refresh 这个操作获得新 token，因为这样 token 在不断的刷新过程中会达到一个刷新时间的上限。而上面的逻辑是每次都新签发一个 token，只要不断签就能够一直使用下去。 然后这里的旧 token 放入黑名单，黑名单有效期设置为『刷新时间』—— 3h。</p>
<p>当然如果开发者觉得这样不断签就能够一直使用不太好，那就可以设置更长的刷新时间，用 refresh 操作来获取新 token，刷新时间保证每次登陆得到 token 后，即使每次及时续签，最终也不会超过刷新时间。</p>
<p>然后这里又会出现一个新坑：</p>
<p>如果刷新时间设置为 14 天，过期时间设置为 2h。</p>
<p>token A 在 『 &lt;&#x3D; 14 天 』时刷新得到 token B，此时若再拿 token A 去请求刷新，肯定是不允许，否则 token 会出现『 1 变 N 』的问题，所以显然必须设置一个黑名单去放这些已过期但是又已经刷新过的 token。而这个黑名单的有效期范围应当为 token 的刷新期，即 14 天。然后你会发现对于每个用户每次登陆，需要维护的黑名单 token 数目最大可达 14 * 24 &#x2F; 2 &#x3D; 168 个，黑名单变得很大。</p>
<p>所以，如果要使用 refresh 操作，刷新时间务必是过期时间的尽量小的倍数。</p>
<h5 id="2-2-方式二"><a href="#2-2-方式二" class="headerlink" title="2.2 方式二"></a>2.2 方式二</h5><ul>
<li>每次请求 token 都进行一次刷新</li>
<li>token 设置一个过期时间</li>
<li>token 过期后无法再刷新</li>
<li>token 没必要设置刷新时间了</li>
</ul>
<h5 id="web-2"><a href="#web-2" class="headerlink" title="web"></a>web</h5><p>假设一个 token 的签发时间为 12:00，需求为 2h 未进行请求即过期。则设置有效期 2h，不需要设置刷新期。那么每次请求都会把一个 token 换成一个新 token。如果 2h 没有进行请求，那么上一次请求的到的 token 就会过期，需要重新登录。同样是不断签就能一直使用下去。</p>
<p>如果想要和上面一样，不希望永久续签，则设置一个刷新时间即可。这个刷新时间不会导致进一步膨胀。</p>
<h5 id="app-2"><a href="#app-2" class="headerlink" title="app"></a>app</h5><p>和 web 端类似，设置更长时间即可。</p>
<p>然后又到了问题时间：</p>
<ul>
<li><p>每次都刷新 token，带来的性能影响如何？</p>
<blockquote>
<p>以前每次请求，需要进行一次 token 签名校验，而现在是要签发一个新 token，进行的都是一次签名运算，那么运算量即从 n 变成 2n。<br>其次，每次刷新都要把旧 token 加入黑名单，会导致黑名单特别大，远远比方式一的设置刷新期大。</p>
</blockquote>
</li>
<li><p>每次都刷新 token，并发请求时会不会因为 token 刷新而导致只有一个请求成功？</p>
<blockquote>
<p>答案是确实会导致这个问题，怎么解决呢？设置一个宽限时间，每次 token 刷新后，原来逻辑应该是立刻不可用，现在设置一个宽限时间，让其在 n 秒之内仍然可用即可。</p>
</blockquote>
</li>
</ul>
<p>总之，这种策略会导致花费的 CPU 运算翻倍，并导致巨大的黑名单，然后必须设置一个宽限时间以解决并发请求问题，至于宽限时间会不会带来安全问题，微乎其微吧。</p>
<h5 id="2-3-黑名单膨胀的解决方案"><a href="#2-3-黑名单膨胀的解决方案" class="headerlink" title="2.3 黑名单膨胀的解决方案"></a>2.3 黑名单膨胀的解决方案</h5><p>上面讲到，对于方式一【限定不能一直续签】，会导致巨大的黑名单，对于方式二，总会导致一个更加巨大的黑名单。那有没有解决方案呢？当然是有的。</p>
<p>我们可以这么想，既然一个 token 进行了刷新，那么签发时间在这次刷新之前的即可认为无效。于是，和上面的『预黑名单』策略类似，我刷新时不是把一个 token 加入黑名单，而是把 uuid-refresh_time 组成 key-vakue 对加入黑名单，这样针对每个用户的每次登陆，要存储到黑名单中的条目数就从 N 个变成了一个。</p>
<p>但是这样还要考虑一个问题：就是一个用户开两个浏览器，在不同的时刻在同一个系统都登陆了（假设业务允许），那么一个浏览器的 token 刷新就可能会导致另一个浏览器登陆失效。所以存储在黑名单中的 key-value 应该再加一个 key 以代表每次登陆，并且这个 key 要在 JWT 的载荷中随着刷新一直传承。</p>
<p>基于以上的优化，黑名单的大小变成了：每个用户同时登陆的系统个数之和，就变的和 cookie + session 一样了。</p>
<p>比如，A 系统（假设 2h 过期时间，14 天刷新时间），你用一个浏览器登陆了你的账号，我用 Chrome 浏览器登陆了我的账号，然后我又用 QQ 浏览器再登陆我的账号，那么黑名单的大小就为 ： 1 + 2 &#x3D; 3</p>
<p>而对于方式一【限定不能一直续签】，黑名单的大小（最大）：168 + 168 * 2</p>
<p>而对于方式二，黑名单的大小为：你在 2h 内请求的次数 x ，我在 Chrome 浏览器请求的次数 y，我在 QQ 浏览器请求的次数 z 之和，即：x + y + z</p>
<h4 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4 总结"></a>2.4 总结</h4><p>如果要解决续签问题，方式一【可以一直续签】是个比较好的解决方案，虽然会带来一点小问题，但是并不会有太大的影响。方式二【限定不能一直续签】和 每次刷新会让黑名单的维护量和有状态差不多，但是有更高的安全性。</p>
<h5 id="3-token-有没有必要每次刷新"><a href="#3-token-有没有必要每次刷新" class="headerlink" title="3. token 有没有必要每次刷新"></a>3. token 有没有必要每次刷新</h5><p>我们先列举每次刷新 token 的优缺点：</p>
<p>优点：</p>
<ul>
<li>能够实现续签</li>
<li>能够解决重放</li>
<li>更安全</li>
</ul>
<p> 缺点：</p>
<ul>
<li>双倍的 CPU 消耗</li>
<li>几乎和有状态一样的空间消耗</li>
<li>必须设置宽限时间解决并发问题</li>
</ul>
<p>上面讨论过，『续签』和『重放』都可以通过其他方式解决。只有『更安全』算半个痛点，为什么是半个痛点呢？因为如果采用 HTTPS 的话，那么盗取 token 的手段就只要以下几种办法：</p>
<ul>
<li>破解 HTTPS</li>
<li>直接从你电脑上手抄过去</li>
<li>XSS【前面说到为了能够让 js 读取，不能设置 HTTPOnly】</li>
</ul>
<p>只有第三种方法存在一点可能性。</p>
<p>所以，要不要每次刷新，还是根据各位的具体业务情况进行选择吧。</p>
<h3 id="五、JWT-适合用来做什么"><a href="#五、JWT-适合用来做什么" class="headerlink" title="五、JWT 适合用来做什么"></a>五、JWT 适合用来做什么</h3><h4 id="1-无状态的-RESTful-API"><a href="#1-无状态的-RESTful-API" class="headerlink" title="1. 无状态的 RESTful API"></a>1. 无状态的 RESTful API</h4><p>这个显然很适合。</p>
<h4 id="2-SSO-单点登录"><a href="#2-SSO-单点登录" class="headerlink" title="2. SSO 单点登录"></a>2. SSO 单点登录</h4><p>单点登录必须要实现的：</p>
<ul>
<li>会话管理：通过黑名单和预黑名单解决</li>
<li>续签：通过签名的解决方案解决<br>可见，对 JWT 部署一些额外逻辑（黑名单，续签管理）即可让 JWT 在大部分场景代替 cookie + session。</li>
</ul>
<h3 id="六、JWT-与-Oauth2-0"><a href="#六、JWT-与-Oauth2-0" class="headerlink" title="六、JWT 与 Oauth2.0"></a>六、JWT 与 Oauth2.0</h3><p>Oauth 2.0 是干嘛的不再赘述，它与 JWT 其实并不是一个层面的东西。Oauth2.0 是一个方便的第三方授权规范，而 JWT 是一个 token 结构规范。只是 JWT 常用来登陆鉴权，而 Oauth2.0 在授权时也涉及到了登陆，所以就比较容易搞混。</p>
<p>但是在此，我要说的是，Oauth 2.0 其实可以和 JWT 结合使用。</p>
<p>以下是一个常见的 Oauth2.0 登陆返回：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;access_token&quot;:&quot;kag2geh11a3eh56e23hj&quot;,</span><br><span class="line">    &quot;expires_in&quot;:7200,</span><br><span class="line">    &quot;refresh_token&quot;:&quot;jgko97cq4c8wn69j&quot;,</span><br><span class="line">    &quot;scope&quot;:&quot;SCOPE&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Oauth2.0 中，access_token 用来进行数据请求，而 refresh_token 用来刷新 access_token。每次刷新，上一个 access_token 就会失效，而 access_token 和 refresh_token 显然都没有记录任何状态，所以必须为服务端进行状态的维护。</p>
<p>把 JWT 和 Oauth2.0 结合后，可以得到这样的返回：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;access_token&quot;:&quot;xxx.yyy.zzz&quot;,</span><br><span class="line">    &quot;expires_in&quot;:7200,</span><br><span class="line">    &quot;refresh_token&quot;:&quot;xxxxx.yyyyy.zzzzz&quot;,</span><br><span class="line">    &quot;scope&quot;:&quot;SCOPE&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>进行结合后有如下优势：</p>
<ul>
<li>Oauth2.0 的 token 也能够实现无状态（虽然也要用到黑名单）</li>
<li>Oauth2.0 的 token 也能够附带部分常用数据</li>
<li>前面讲到 JWT 续签，在需要限定不能一直续签的情形，可能会导致黑名单库膨胀，但是和 Oauth2.0 结合，通过 refresh_token 的机制，让黑名单库中 token 的有效期从 『刷新时间』又变回『过期时间』，从而解决了这个问题。</li>
</ul>
<h3 id="七、关于-token-十件必须知道的事"><a href="#七、关于-token-十件必须知道的事" class="headerlink" title="七、关于 token 十件必须知道的事"></a>七、关于 token 十件必须知道的事</h3><p>这是我从 Auth0 组织的这篇文章 <a href="https://auth0.com/blog/refresh-tokens-what-are-they-and-when-to-use-them/">10 Things You Should Know about Tokens</a> 整理过来的：</p>
<ul>
<li><p>Token 获取到后需要保存起来以便下次使用，可以选择存储在 localstorage &#x2F;sessionstorage&#x2F;cookie</p>
</li>
<li><p>Token 是包含有效期的，你必须部署一些逻辑来进行有效期的控制</p>
</li>
<li><p>localstorage &#x2F;sessionstorage 的跨域限制较 cookie 更为严格，推荐使用 cookie</p>
</li>
<li><p>在你进行异步请求时，浏览器一般都会发送预检请求（option），后端应对此部署相应的逻辑</p>
</li>
</ul>
<p><a href="https://cloud.tencent.com/developer/article/1046663">为什么会有 OPTIONS 请求 </a></p>
<ul>
<li><p>使用 cookie 可以轻松处理一个文件下载请求，但是 token 一般都是通过 XHR 方式进行请求的，所以你必须部署额外的逻辑。比如生成一个实时 ticket ，以 ticket 进行访问，然后校验，重定向，最后下载文件。</p>
</li>
<li><p>处理 XSS 比处理 CSRF 更容易（这一点我实在没看到他是什么个逻辑，大家可以去看看原文）</p>
</li>
<li><p>token 在每次请求时都会被编码到请求中，所以请注意 token 的大小，不要编码过多数据</p>
</li>
<li><p>如果在 token 中编码敏感信息，请对 token 进行加密</p>
</li>
<li><p>JSON Web Token 可以用于 Oauth2.0 的 Bearer Token 中，赋予 Oauth2.0 无状态的优势</p>
</li>
<li><p>Token 不是银弹，请根据实际业务需要进行选择</p>
</li>
</ul>
<h3 id="八、结语"><a href="#八、结语" class="headerlink" title="八、结语"></a>八、结语</h3><p>前阵子写的两篇文章，承蒙各位关照，指出了许多问题。最近公司分享，我恰好打算对以前提出的问题结合我新的理解写一篇文章，于是便有了本文，前面两篇文章，近期我会重新整理一下，补上一些细节，修复一些错误，各位若不嫌弃到时候可以再看看。</p>
<p>JWT 完整使用详解<br>JWT 扩展具体实现详解</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript之一基本类型和结构语句</title>
    <url>/2024/07/31/JavaScript%E4%B9%8B%E4%B8%80%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%92%8C%E7%BB%93%E6%9E%84%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<br />
  
<h2 id="说明，该学习内容来自廖雪峰老师—-JavaScript教程，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录"><a href="#说明，该学习内容来自廖雪峰老师—-JavaScript教程，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录" class="headerlink" title="说明，该学习内容来自廖雪峰老师—-JavaScript教程，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录!"></a>说明，该学习内容来自<a href="https://www.liaoxuefeng.com/wiki/1022910821149312">廖雪峰老师—-JavaScript教程</a>，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录!</h2><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ol>
<li><p><code>Number</code><br>JavaScript不区分整数和浮点数，统一用<code>Number</code>表示  </p>
</li>
<li><p>字符串<br>符串是以单引号<code>&#39;</code>或双引号<code>&quot;</code>括起来的任意文本。请注意，<code>&#39;&#39;</code>或<code>&quot;&quot;</code>本身只是一种表示方式，不是字符串的一部分。<br>由于多行字符串用<code>\n</code>写起来比较费事，所以最新的ES6标准新增了一种多行字符串的表示方法，用反引号<code>...</code>表示<br>要把多个字符串连接起来，可以用<code>+</code>号连接：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var name = &#x27;小明&#x27;;</span><br><span class="line">var age = 20;</span><br><span class="line">var message = `你好, $&#123;name&#125;, 你今年$&#123;age&#125;岁了!`;</span><br></pre></td></tr></table></figure>
<p>要获取字符串某个指定位置的字符，使用类似<code>Array</code>的下标操作，索引号从<code>0</code>开始<br>需要特别注意的是，字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果<br>常用方法:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">length</span><br><span class="line">toUpperCase</span><br><span class="line">toLowerCase</span><br><span class="line">indexOf</span><br><span class="line">substring</span><br><span class="line">s.trim(); // 注意：IE9以下的版本没有trim()方法  </span><br></pre></td></tr></table></figure>
</li>
<li><p>布尔值<br>布尔值和布尔代数的表示完全一致，一个布尔值只有<code>true</code>、<code>false</code>两种值<br>JavaScript把<code>null</code>、<code>undefined</code>、<code>0</code>、<code>NaN</code>和空字符串<code>&#39;&#39;</code>视为<code>false</code>，其他值一概视为<code>true</code>,允许对任意数据类型做比较：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">false == 0; // true</span><br><span class="line">false === 0; // false</span><br></pre></td></tr></table></figure>
<p>要特别注意相等运算符<code>==</code>。JavaScript在设计时，有两种比较运算符：<br>a. 第一种是<code>==</code>比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；<br>b. 第二种是<code>===</code>比较，它不会自动转换数据类型，如果数据类型不一致，返回<code>false</code>，如果一致，再比较。<br>由于JavaScript这个设计缺陷，不要使用<code>==</code>比较，始终坚持使用<code>===</code>比较。<br>另一个例外是<code>NaN</code>这个特殊的<code>Number</code>与所有其他值都不相等，包括它自己：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NaN === NaN; // false</span><br></pre></td></tr></table></figure>
<p>唯一能判断<code>NaN</code>的方法是通过<code>isNaN()</code>函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">isNaN(NaN); // true</span><br></pre></td></tr></table></figure>
<p>最后要注意浮点数的相等比较：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 / 3 === (1 - 2 / 3); // false</span><br></pre></td></tr></table></figure>
<p>这不是JavaScript的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。</p>
</li>
<li><p><code>null</code>和<code>undefined</code><br><code>null</code>表示一个<code>“空”</code>的值，它和<code>0</code>以及空字符串<code>&#39;&#39;</code>不同，<code>0</code>是一个数值，<code>&#39;&#39;</code>表示长度为<code>0</code>的字符串，而<code>null</code>表示<code>“空”</code>。<br>在其他语言中，也有类似JavaScript的<code>null</code>的表示，例如Java也用<code>null</code>，Swift用<code>nil</code>，Python用<code>None</code>表示。但是，在JavaScript中，还有一个和<code>null</code>类似的<code>undefined</code>，它表示<code>“未定义”</code>。<br>JavaScript的设计者希望用<code>null</code>表示一个<code>空</code>的值，而<code>undefined</code>表示值<code>未定义</code>。事实证明，这并没有什么卵用，区分两者的意义不大。大多数情况下，我们都应该用<code>null</code>。<code>undefined</code>仅仅在判断函数参数是否传递的情况下有用。  </p>
</li>
<li><p>数组  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1, 2, 3.14, &#x27;Hello&#x27;, null, true];</span><br><span class="line">new Array(1, 2, 3); // 创建了数组[1, 2, 3]</span><br></pre></td></tr></table></figure>
<p>然而，出于代码的可读性考虑，强烈建议直接使用<code>[]</code>。<br>数组的元素可以通过<code>索引</code>来访问。请注意，索引的起始值为<code>0</code>。多维数组<br>常用属性或方法:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">length    //请注意: 1. 直接给Array的length赋一个新的值会导致Array大小的变化; 2. 如果通过索引赋值时，索引超过了范围，同样会引起Array大小的变化：</span><br><span class="line">indexOf  </span><br><span class="line">slice    //slice()就是对应String的substring()版本，它截取Array的部分元素，然后返回一个新的Array。注意到slice()的起止参数包括开始索引，不包括结束索引。如果不给slice()传递任何参数，它就会从头到尾截取所有元素</span><br><span class="line">push()      //向Array的末尾添加若干元素，pop()则把Array的最后一个元素删除掉：</span><br><span class="line">unshift()  //方法，往Array的头部添加若干元素，shift()方法则把Array的第一个元素删掉</span><br><span class="line">sort()</span><br><span class="line">reverse()  </span><br><span class="line">splice()  // 从指定的索引开始删除若干元素，然后再从该位置添加若干元素</span><br><span class="line">concat()  // 请注意，concat()方法并没有修改当前Array，而是返回了一个新的Array。实际上，concat()方法可以接收任意个元素和Array，并且自动把Array拆开，然后全部添加到新的Array里</span><br><span class="line">var arr = [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;];</span><br><span class="line">arr.concat(1, 2, [3, 4]); // [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, 1, 2, 3, 4]</span><br><span class="line">join(&#x27;-&#x27;)        //如果Array的元素不是字符串，将自动转换为字符串后再连接。</span><br></pre></td></tr></table></figure>
</li>
<li><p>对象<br>JavaScript的对象是一组由键-值组成的无序集合。用一个{…}表示一个对象，键值对以<code>xxx: xxx</code>形式申明，用<code>,</code>隔开。注意，最后一个键值对不需要在末尾加,，如果加了，有的浏览器（如低版本的IE）将报错。<br>访问属性是通过<code>.</code>操作符完成的，但这要求属性名必须是一个有效的变量名。如果属性名包含特殊字符，就必须用<code>&#39;&#39;</code>括起来；访问这个属性也无法使用<code>.</code>操作符，必须用<code>[&#39;xxx&#39;]</code>来访问<br>给一个对象添加或删除属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xiaoming.age = 18; // 新增一个age属性</span><br><span class="line">delete xiaoming.age; // 删除age属性</span><br></pre></td></tr></table></figure>
<p><code>in</code>检测是否拥有某一属性。要小心，如果<code>in</code>判断一个属性存在，这个属性不一定是对象自身拥有的，它可能是对象继承得到的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;toString&#x27; in xiaoming; // true,但tostring是继承自object的</span><br><span class="line">hasOwnProperty()    //判断一个属性是否是xiaoming自身拥有的，而不是继承得到的</span><br></pre></td></tr></table></figure></li>
<li><p>变量<br>变量的概念基本上和初中代数的方程变量是一致的，只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。<br>变量在JavaScript中就是用一个变量名表示，变量名是<code>大小写英文</code>、<code>数字</code>、<code>$</code>和<code>_</code>的组合，且不能用数字开头。变量名也不能是JavaScript的关键字<br>这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。</p>
</li>
<li><p>strict模式<br>JavaScript在设计之初，为了方便初学者学习，并不强制要求用<code>var</code>申明变量。这个设计错误带来了严重的后果：如果一个变量没有通过<code>var</code>申明就被使用，那么该变量就自动被申明为全局变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i = 10; // i现在是全局变量</span><br></pre></td></tr></table></figure>
<p>在同一个页面的不同的JavaScript文件中，如果都不用<code>var</code>申明，恰好都使用了变量<code>i</code>，将造成变量<code>i</code>互相影响，产生难以调试的错误结果。<br>使用<code>var</code>申明的变量则不是全局变量，它的范围被限制在该变量被申明的函数体内（函数的概念将稍后讲解），同名变量在不同的函数体内互不冲突。</p>
</li>
</ol>
<p>为了修补JavaScript这一严重设计缺陷，ECMA在后续规范中推出了<code>strict</code>模式，在<code>strict</code>模式下运行的JavaScript代码，强制通过<code>var</code>申明变量，未使用<code>var</code>申明变量就使用的，将导致运行错误。<br>启用<code>strict</code>模式的方法是在JavaScript代码的第一行写上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br></pre></td></tr></table></figure>
<p>这是一个字符串，不支持<code>strict</code>模式的浏览器会把它当做一个字符串语句执行，支持<code>strict</code>模式的浏览器将开启<code>strict</code>模式运行JavaScript。</p>
<ol start="9">
<li><p><code>for</code>循环最常用的地方是利用索引来遍历数组<br><code>for ... in</code>把一个对象的所有属性依次循环出来<br>由于<code>Array</code>也是对象，而它的每个元素的索引被视为对象的属性，因此，<code>for ... in</code>循环可以直接循环出<code>Array</code>的索引。请注意，<code>for ... in</code>对Array的循环得到的是<code>String</code>而不是<code>Number</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while (n &gt; 0) &#123;&#125;</span><br><span class="line">do &#123; &#125; while (n &lt; 100);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Map</code>和<code>Set</code><br>JavaScript的默认对象表示方式<code>&#123;&#125;</code>可以视为其他语言中的<code>Map</code>或<code>Dictionary</code>的数据结构，即一组键值对。<br>但是JavaScript的对象有个小问题，就是键必须是字符串。但实际上<code>Number</code>或者其他数据类型作为键也是非常合理的。<br>为了解决这个问题，最新的ES6规范引入了新的数据类型<code>Map</code></p>
</li>
</ol>
<p><code>Map</code> 一组键值对的结构，具有极快的查找速度<br>初始化<code>Map</code>需要一个二维数组，或者直接初始化一个空<code>Map</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var m = new Map([[&#x27;Michael&#x27;, 95], [&#x27;Bob&#x27;, 75], [&#x27;Tracy&#x27;, 85]]);</span><br><span class="line">m.set(&#x27;Adam&#x27;, 67); // 添加新的key-value</span><br><span class="line">m.set(&#x27;Bob&#x27;, 59);</span><br><span class="line">m.has(&#x27;Adam&#x27;); // 是否存在key &#x27;Adam&#x27;: true</span><br><span class="line">m.get(&#x27;Adam&#x27;); // 67</span><br><span class="line">m.delete(&#x27;Adam&#x27;); // 删除key &#x27;Adam&#x27;</span><br></pre></td></tr></table></figure>
<p>由于一个<code>key</code>只能对应一个<code>value</code>，所以，多次对一个<code>key</code>放入<code>value</code>，后面的值会把前面的值冲掉</p>
<p><code>Set</code>和<code>Map</code>类似，也是一组<code>key</code>的集合，但不存储<code>value</code>。由于<code>key</code>不能重复，所以，在<code>Set</code>中，没有重复的<code>key</code><br>创建一个<code>Set</code>，需要提供一个<code>Array</code>作为输入，或者直接创建一个空<code>Set</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var s1 = new Set(); // 空Set</span><br><span class="line">var s2 = new Set([1, 2, 3]); // 含1, 2, 3</span><br><span class="line">s.add(4);</span><br><span class="line">s.delete(3);</span><br></pre></td></tr></table></figure>

<ol start="11">
<li>iterable<br>遍历<code>Array</code>可以采用下标循环，遍历<code>Map</code>和<code>Set</code>就无法使用下标。为了统一集合类型，ES6标准引入了新的<code>iterable</code>类型，<code>Array</code>、<code>Map</code>和<code>Set</code>都属于<code>iterable</code>类型。<br>具有<code>iterable</code>类型的集合可以通过新的<code>for ... of</code>循环来遍历。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (var x of s) &#123; &#125; // 遍历</span><br></pre></td></tr></table></figure>
<code>for ... in</code>循环由于历史遗留问题，它遍历的实际上是对象的属性名称。<br>一个<code>Array</code>数组实际上也是一个对象，它的每个元素的索引被视为一个属性。<code>for ... in</code>循环将把额外给<code>Array</code>添加的属性包括在内，但<code>Array</code>的<code>length</code>属性却不包括在内<br><code>for ... of</code>循环则完全修复了这些问题，它只循环集合本身的元素<br><code>iterable</code>内置的<code>forEach</code>方法，它接收一个函数，每次迭代就自动回调该函数<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">var a = [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;];</span><br><span class="line">a.forEach(function (element, index, array) &#123;</span><br><span class="line">    // element: 指向当前元素的值</span><br><span class="line">    // index: 指向当前索引</span><br><span class="line">    // array: 指向Array对象本身</span><br><span class="line">    console.log(element + &#x27;, index = &#x27; + index);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<code>forEach()</code>方法是ES5.1标准引入的<br><code>Set</code>没有索引，因此回调函数的前两个参数都是元素本身<br><code>Map</code>的回调函数参数依次为value、key和map本身<br>如果对某些参数不感兴趣，由于JavaScript的函数调用不要求参数必须一致，因此可以忽略它们</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript之七错误处理</title>
    <url>/2024/07/31/JavaScript%E4%B9%8B%E4%B8%83%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<br />
  
<h2 id="说明，该学习内容来自廖雪峰老师—-JavaScript教程，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录"><a href="#说明，该学习内容来自廖雪峰老师—-JavaScript教程，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录" class="headerlink" title="说明，该学习内容来自廖雪峰老师—-JavaScript教程，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录!"></a>说明，该学习内容来自<a href="https://www.liaoxuefeng.com/wiki/1022910821149312">廖雪峰老师—-JavaScript教程</a>，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录!</h2><br />
<br />
<br />

<h4 id="try-…-catch-…-finally"><a href="#try-…-catch-…-finally" class="headerlink" title="try … catch … finally"></a>try … catch … finally</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var r1, r2, s = null;</span><br><span class="line">try &#123;</span><br><span class="line">    r1 = s.length; // 此处应产生错误</span><br><span class="line">    r2 = 100; // 该语句不会执行</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">    console.log(&#x27;出错了：&#x27; + e);</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">    console.log(&#x27;finally&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">console.log(&#x27;r1 = &#x27; + r1); // r1应为undefined</span><br><span class="line">console.log(&#x27;r2 = &#x27; + r2); // r2应为undefined</span><br></pre></td></tr></table></figure>

<h4 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h4><p>JavaScript有一个标准的<code>Error</code>对象表示错误，还有从<code>Error</code>派生的<code>TypeError</code>、<code>ReferenceError</code>等错误对象。我们在处理错误时，可以通过<code>catch(e)</code>捕获的变量<code>e</code>访问错误对象：</p>
<h4 id="抛出错误"><a href="#抛出错误" class="headerlink" title="抛出错误"></a>抛出错误</h4><p>程序也可以主动抛出一个错误，让执行流程直接跳转到catch块。抛出错误使用throw语句。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">throw new Error(&#x27;输入错误&#x27;);</span><br></pre></td></tr></table></figure>
<p>JavaScript允许抛出任意对象，包括数字、字符串。但是，最好还是抛出一个Error对象。<br>最后，当我们用catch捕获错误时，一定要编写错误处理语句<br>因为catch到错误却什么都不执行，就不知道程序执行过程中到底有没有发生错误。<br>处理错误时，请不要简单粗暴地用alert()把错误显示给用户。教程的代码使用alert()是为了便于演示。</p>
<h4 id="错误传播"><a href="#错误传播" class="headerlink" title="错误传播"></a>错误传播</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getLength(s) &#123;</span><br><span class="line">    return s.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function printLength() &#123;</span><br><span class="line">    console.log(getLength(&#x27;abc&#x27;)); // 3</span><br><span class="line">    console.log(getLength(null)); // Error!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printLength();</span><br></pre></td></tr></table></figure>
<p>如果在一个函数内部发生了错误，它自身没有捕获，错误就会被抛到外层调用函数，如果外层函数也没有捕获，该错误会一直沿着函数调用链向上抛出，直到被JavaScript引擎捕获，代码终止执行。<br>所以，我们不必在每一个函数内部捕获错误，只需要在合适的地方来个统一捕获，一网打尽</p>
<h4 id="异步错误处理"><a href="#异步错误处理" class="headerlink" title="异步错误处理"></a>异步错误处理</h4><p>编写JavaScript代码时，我们要时刻牢记，JavaScript引擎是一个事件驱动的执行引擎，代码总是以单线程执行，而回调函数的执行需要等到下一个满足条件的事件出现后，才会被执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function printTime() &#123;</span><br><span class="line">    console.log(&#x27;It is time!&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setTimeout(printTime, 1000);</span><br><span class="line">console.log(&#x27;done&#x27;);</span><br></pre></td></tr></table></figure>
<p>如果<code>printTime()</code>函数内部发生了错误，我们试图用<code>try</code>包裹<code>setTimeout()</code>是无效的<br>涉及到异步代码，无法在调用时捕获，原因就是在捕获的当时，回调函数并未执行。<br>类似的，当我们处理一个事件时，在绑定事件的代码处，无法捕获事件处理函数的错误。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript之三标准对象</title>
    <url>/2024/07/31/JavaScript%E4%B9%8B%E4%B8%89%E6%A0%87%E5%87%86%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<br />
  
<h2 id="说明，该学习内容来自廖雪峰老师—-JavaScript教程，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录"><a href="#说明，该学习内容来自廖雪峰老师—-JavaScript教程，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录" class="headerlink" title="说明，该学习内容来自廖雪峰老师—-JavaScript教程，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录!"></a>说明，该学习内容来自<a href="https://www.liaoxuefeng.com/wiki/1022910821149312">廖雪峰老师—-JavaScript教程</a>，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录!</h2><br />
<br />
<br />
  
<ol>
<li><p>标准对象<br>在JavaScript的世界里，一切都是对象。<br>用<code>typeof</code>操作符获取对象的类型，它总是返回一个字符串<br>特别注意<code>null</code>的类型是<code>object</code>，<code>Array</code>的类型也是<code>object</code>，如果我们用<code>typeof</code>将无法区分出<code>null</code>、<code>Array</code>和通常意义上的<code>object</code>——<code>&#123;&#125;</code>。</p>
</li>
<li><p>包装对象<br>在JavaScript中，也区分标准类型和它的包装类型。包装对象用<code>new</code>创建，即类型<code>object</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var n = new Number(123); // 123,生成了新的包装类型</span><br><span class="line">var b = new Boolean(true); // true,生成了新的包装类型</span><br><span class="line">var s = new String(&#x27;str&#x27;); // &#x27;str&#x27;,生成了新的包装类型</span><br></pre></td></tr></table></figure>
<p>所以闲的蛋疼也不要使用包装对象！尤其是针对<code>string</code>类型！！！<br>如果我们在使用<code>Number</code>、<code>Boolean</code>和<code>String</code>时，没有写<code>new</code>，此时，<code>Number()</code>、<code>Boolean</code>和<code>String()</code>被当做普通函数，把任何类型的数据转换为<code>number</code>、<code>boolean</code>和<code>string</code>类型（注意不是其包装类型）</p>
</li>
</ol>
<p>总结一下，有这么几条规则需要遵守：</p>
<ul>
<li>不要使用<code>new Number()</code>、<code>new Boolean()</code>、<code>new String()</code>创建包装对象；</li>
<li>用<code>parseInt()</code>或<code>parseFloat()</code>来转换任意类型到<code>number</code>；</li>
<li>用<code>String()</code>来转换任意类型到<code>string</code>，或者直接调用某个对象的<code>toString()</code>方法；</li>
<li>通常不必把任意类型转换为<code>boolean</code>再判断，因为可以直接写<code>if (myVar) &#123;...&#125;</code>；</li>
<li><code>typeof</code>操作符可以判断出<code>number</code>、<code>boolean</code>、<code>string</code>、<code>function</code>和<code>undefined</code>；</li>
<li>判断<code>Array</code>要使用<code>Array.isArray(arr)</code>；</li>
<li>判断<code>null</code>请使用<code>myVar === null</code>；</li>
<li>判断某个全局变量是否存在用<code>typeof window.myVar === &#39;undefined&#39;</code>；</li>
<li>函数内部判断某个变量是否存在用<code>typeof myVar === &#39;undefined&#39;</code>。</li>
</ul>
<p>最后有细心的同学指出，任何对象都有<code>toString()</code>方法吗？<code>null</code>和<code>undefined</code>就没有！确实如此，这两个特殊值要除外，虽然<code>null</code>还伪装成了<code>object</code>类型。<br><code>number</code>对象调用<code>toString()</code>报<code>SyntaxError</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123.toString(); // SyntaxError</span><br></pre></td></tr></table></figure>
<p>遇到这种情况，要特殊处理一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123..toString(); // &#x27;123&#x27;, 注意是两个点！</span><br><span class="line">(123).toString(); // &#x27;123&#x27;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Date</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var d1 = new Date(2015, 5, 19, 20, 15, 30, 123);</span><br><span class="line">var d2 = Date.parse(&#x27;2015-06-24T19:49:22.875+08:00&#x27;);  // 1435146562875</span><br><span class="line">var d3 = new Date(d2); // Wed Jun 24 2015 19:49:22 GMT+0800 (CST)</span><br></pre></td></tr></table></figure>
<p>JavaScript的月份范围用整数表示是0~11，0表示一月，1表示二月……<br>Date对象表示的时间总是按浏览器所在时区显示的<br>时间戳是一个自增的整数，它表示从1970年1月1日零时整的GMT时区开始的那一刻，到现在的毫秒数。时间戳可以精确地表示一个时刻，并且与时区无关。</p>
<ol start="4">
<li>RegExp<br>单个字符</li>
</ol>
<ul>
<li><code>\d</code>可以匹配一个数字，</li>
<li><code>\w</code>可以匹配一个字母或数字,</li>
<li><code>.</code>可以匹配任意字符,</li>
<li><code>\s</code>可以匹配一个空格（也包括Tab等空白符）</li>
</ul>
<p>变长的字符</p>
<ul>
<li><code>*</code>表示任意个字符（包括0个），</li>
<li><code>+</code>表示至少一个字符，</li>
<li><code>?</code>表示0个或1个字符，</li>
<li><code>&#123;n&#125;</code>表示n个字符，</li>
<li><code>&#123;n,m&#125;</code>表示n-m个字符</li>
</ul>
<p>特殊字符，在正则表达式中，要用<code>&#39;\&#39;</code>转义</p>
<ul>
<li><code>&#39;-&#39;</code></li>
</ul>
<p>进阶  </p>
<ul>
<li><code>[]</code>表示范围</li>
<li><code>A|B</code>可以匹配A或B</li>
<li><code>^</code>表示行的开头</li>
<li><code>$</code>表示行的结束</li>
<li><code>()</code>表示的就是要提取的分组（Group）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//匹配&#x27;ABC-001&#x27;或者&#x27;ABC\-001&#x27;,re1=/ABC-001/也可以匹配这两项</span><br><span class="line">var re1 = /ABC\-001/;  //  &quot;/正则表达式/&quot;写出来</span><br><span class="line">var re2 = new RegExp(&#x27;ABC\\-001&#x27;);  // new RegExp(&#x27;正则表达式&#x27;)创建一个RegExp对象。</span><br><span class="line">re1 .test(&#x27;ABC-001&#x27;)    // true</span><br><span class="line">re1 .test(&#x27;ABC\-001&#x27;)  // true</span><br><span class="line">&#x27;a,b;; c  d&#x27;.split(/[\s\,\;]+/); // [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span><br><span class="line">var re = /^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$/;</span><br><span class="line">re.exec(&#x27;010-12345&#x27;); // [&#x27;010-12345&#x27;, &#x27;010&#x27;, &#x27;12345&#x27;]，也可以分组&#x27;010\-12345&#x27;</span><br><span class="line">re.exec(&#x27;010 12345&#x27;); // null</span><br></pre></td></tr></table></figure>

<p>贪婪匹配和非贪婪匹配</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var re = /^(\d+)(0*)$/;</span><br><span class="line">re.exec(&#x27;102300&#x27;); // [&#x27;102300&#x27;, &#x27;102300&#x27;, &#x27;&#x27;],贪婪匹配</span><br><span class="line">var re = /^(\d+?)(0*)$/;</span><br><span class="line">re.exec(&#x27;102300&#x27;); // [&#x27;102300&#x27;, &#x27;1023&#x27;, &#x27;00&#x27;]，加个?可以让\d+采用非贪婪匹配</span><br></pre></td></tr></table></figure>

<p>特殊标志</p>
<ul>
<li>g标志，表示全局匹配</li>
<li>i标志，表示忽略大小写，</li>
<li>m标志，表示执行多行匹配</li>
</ul>
<p>多次执行exec()方法来搜索一个匹配的字符串。每次运行exec()，正则表达式本身会更新lastIndex属性，表示上次匹配到的最后索引<br>使用<code>/^...$/</code>，那样只会最多匹配一次</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var r1 = /test/g;</span><br><span class="line">var r2 = new RegExp(&#x27;test&#x27;, &#x27;g&#x27;);</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>JSON<br>JSON是JavaScript Object Notation的缩写，它是一种数据交换格式。为道格拉斯·克罗克福特（Douglas Crockford）2002年发明。<br>字符集必须是<code>UTF-8</code>，JSON的字符串也规定必须用双引号<code>&quot;&quot;</code>，<code>Object</code>的键也必须用双引号<code>&quot;&quot;</code>。</li>
</ol>
<p>数据类型：</p>
<ul>
<li><code>number</code>：和JavaScript的<code>number</code>完全一致；</li>
<li><code>boolean</code>：就是JavaScript的<code>true</code>或<code>false</code>；</li>
<li><code>string</code>：就是JavaScript的<code>string</code>；</li>
<li><code>null</code>：就是JavaScript的<code>null</code>；</li>
<li><code>array</code>：就是JavaScript的Array表示方式——<code>[]</code>；</li>
<li><code>object</code>：就是JavaScript的<code>&#123; ... &#125;</code>表示方式。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(JSON.stringify(xiaoming));</span><br><span class="line"></span><br><span class="line">// 第二个参数用于控制如何筛选对象的键值</span><br><span class="line">console.log(JSON.stringify(xiaoming, null, &#x27;  &#x27;));</span><br><span class="line">// 传入Array,输出指定的属性</span><br><span class="line">console.log(JSON.stringify(xiaoming, [&#x27;name&#x27;, &#x27;skills&#x27;], &#x27;  &#x27;));</span><br><span class="line">// 传入一个函数</span><br><span class="line">function convert(key, value) &#123;</span><br><span class="line">    if (typeof value === &#x27;string&#x27;) &#123;</span><br><span class="line">        return value.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">    return value;</span><br><span class="line">&#125;</span><br><span class="line">console.log(JSON.stringify(xiaoming, convert, &#x27;  &#x27;));</span><br></pre></td></tr></table></figure>

<p>自定义<code>toJSON()</code>方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var xiaoming = &#123;</span><br><span class="line">    name: &#x27;小明&#x27;,</span><br><span class="line">    age: 14,</span><br><span class="line">    gender: true,</span><br><span class="line">    height: 1.65,</span><br><span class="line">    grade: null,</span><br><span class="line">    &#x27;middle-school&#x27;: &#x27;\&quot;W3C\&quot; Middle School&#x27;,</span><br><span class="line">    skills: [&#x27;JavaScript&#x27;, &#x27;Java&#x27;, &#x27;Python&#x27;, &#x27;Lisp&#x27;],</span><br><span class="line">    toJSON: function () &#123;</span><br><span class="line">        return &#123; // 只输出name和age，并且改变了key：</span><br><span class="line">            &#x27;Name&#x27;: this.name,</span><br><span class="line">            &#x27;Age&#x27;: this.age</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(JSON.stringify(xiaoming)); // &#x27;&#123;&quot;Name&quot;:&quot;小明&quot;,&quot;Age&quot;:14&#125;&#x27;</span><br></pre></td></tr></table></figure>

<p>反序列化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JSON.parse(&#x27;&#123;&quot;name&quot;:&quot;小明&quot;,&quot;age&quot;:14&#125;&#x27;)</span><br><span class="line">JSON.parse(&#x27;true&#x27;); </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript之二函数</title>
    <url>/2024/07/31/JavaScript%E4%B9%8B%E4%BA%8C%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<br />
  
<h2 id="说明，该学习内容来自廖雪峰老师—-JavaScript教程，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录"><a href="#说明，该学习内容来自廖雪峰老师—-JavaScript教程，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录" class="headerlink" title="说明，该学习内容来自廖雪峰老师—-JavaScript教程，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录!"></a>说明，该学习内容来自<a href="https://www.liaoxuefeng.com/wiki/1022910821149312">廖雪峰老师—-JavaScript教程</a>，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录!</h2><br />
<br />
<br />
  
<ol>
<li><p>函数定义和调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function abs(x) &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>如果没有<code>return</code>语句，函数执行完毕后也会返回结果，只是结果为<code>undefined</code>。<br>由于JavaScript的函数也是一个对象，上述定义的<code>abs()</code>函数实际上是一个函数对象，而函数名<code>abs</code>可以视为指向该函数的变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var abs = function (x) &#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>在这种方式下，<code>function (x) &#123; ... &#125;</code>是一个匿名函数，它没有函数名。但是，这个匿名函数赋值给了变量<code>abs</code>，所以，通过变量<code>abs</code>就可以调用该函数<br>上述两种定义完全等价，注意第二种方式按照完整语法需要在函数体末尾加一个<code>;</code>，表示赋值语句结束。<br>由于JavaScript允许传入任意个参数而不影响调用，因此传入的参数比定义的参数多也没有问题，虽然函数内部并不需要这些参数;传入的参数比定义的少也没有问题：<br>要避免收到<code>undefined</code>，可以对参数进行检查：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function abs(x) &#123;</span><br><span class="line">    if (typeof x !== &#x27;number&#x27;) &#123;</span><br><span class="line">        throw &#x27;Not a number&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>arguments</code><br>只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。<code>arguments</code>类似Array但它不是一个Array。常用于判断传入参数的个数</p>
</li>
<li><p><code>rest</code>参数<br>ES6标准引入了<code>rest</code>参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function foo(a, b, ...rest) &#123;</span><br><span class="line">    console.log(&#x27;a = &#x27; + a);</span><br><span class="line">    console.log(&#x27;b = &#x27; + b);</span><br><span class="line">    console.log(rest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>rest</code>参数只能写在最后，前面用<code>...</code>标识，从运行结果可知，传入的参数先绑定<code>a</code>、<code>b</code>，多余的参数以数组形式交给变量<code>rest</code><br>如果传入的参数连正常定义的参数都没填满，也不要紧，<code>rest</code>参数会接收一个空数组（注意不是<code>undefined</code>）</p>
</li>
</ol>
<p>小心你的<code>return</code>语句<br>JavaScript引擎有一个在行末自动添加分号的机制<br>如果把<code>return</code>语句拆成两行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">    return</span><br><span class="line">        &#123; name: &#x27;foo&#x27; &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(); // undefined</span><br></pre></td></tr></table></figure>
<p>上面的代码实际上变成了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">    return; // 自动添加了分号，相当于return undefined;</span><br><span class="line">        &#123; name: &#x27;foo&#x27; &#125;; // 这行语句已经没法执行到了</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>变量作用域与解构赋值<br>在JavaScript中，用<code>var</code>申明的变量实际上是有作用域的。<br>如果一个变量在函数体内部申明，则该变量的作用域为整个函数体，在函数体外不可引用该变量：<br>如果两个不同的函数各自申明了同一个变量，那么该变量只在各自的函数体内起作用。换句话说，不同函数内部的同名变量互相独立，互不影响<br>由于JavaScript的函数可以嵌套，此时，内部函数可以访问外部函数定义的变量，反过来则不行<br>JavaScript的函数在查找变量时从自身函数定义开始，从“内”向“外”查找。如果内部函数定义了与外部函数重名的变量，则内部函数的变量将“屏蔽”外部函数的变量</p>
</li>
<li><p>变量提升<br>JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部，但不会提升变量的赋值<br>由于JavaScript的这一怪异的“特性”，我们在函数内部定义变量时，请严格遵守“在函数内部首先申明所有变量”这一规则。最常见的做法是用一个var申明函数内部用到的所有变量。</p>
</li>
<li><p>全局作用域<br>不在任何函数内定义的变量就具有全局作用域。实际上，JavaScript默认有一个全局对象<code>window</code>，全局作用域的变量实际上被绑定到<code>window</code>的一个属性<br>以变量方式<code>var foo = function () &#123;&#125;</code>定义的函数实际上也是一个全局变量，因此，顶层函数的定义也被视为一个全局变量，并绑定到<code>window</code>对象<br><code>alert()</code>函数其实也是<code>window</code>的一个变量<br>JavaScript实际上只有一个全局作用域。任何变量（函数也视为变量），如果没有在当前函数作用域中找到，就会继续往上查找，最后如果在全局作用域中也没有找到，则报<code>ReferenceError</code>错误。</p>
</li>
<li><p>名字空间<br>全局变量会绑定到<code>window</code>上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。<br>减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var MYAPP = &#123;&#125;;  // 唯一的全局变量MYAPP</span><br><span class="line">MYAPP.name = &#x27;myapp&#x27;;  // 其他变量</span><br><span class="line">MYAPP.version = 1.0;</span><br><span class="line">// 其他函数</span><br><span class="line">MYAPP.foo = function () &#123;</span><br><span class="line">    return &#x27;foo&#x27;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>把自己的代码全部放入唯一的名字空间<code>MYAPP</code>中，会大大减少全局变量冲突的可能。许多著名的JavaScript库都是这么干的：<code>jQuery</code>，<code>YUI</code>，<code>underscore</code>等等。</p>
</li>
<li><p>局部作用域<br>由于JavaScript的变量作用域实际上是函数内部，我们在<code>for</code>循环等语句块中是无法定义具有局部作用域的变量的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">function foo() &#123;</span><br><span class="line">    for (var i=0; i&lt;100; i++) &#123;</span><br><span class="line">        //</span><br><span class="line">    &#125;</span><br><span class="line">    i += 100; // 仍然可以引用变量i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了解决块级作用域，ES6引入了新的关键字<code>let</code>，用<code>let</code>替代<code>var</code>可以申明一个块级作用域的变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">function foo() &#123;</span><br><span class="line">    var sum = 0;</span><br><span class="line">    for (let i=0; i&lt;100; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    // SyntaxError:</span><br><span class="line">    i += 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>常量<br>由于<code>var</code>和<code>let</code>申明的是变量，如果要申明一个常量，在ES6之前是不行的，我们通常用全部大写的变量来表示“这是一个常量，不要修改它的值”：<br>ES6标准引入了新的关键字<code>const</code>来定义常量，<code>const</code>与<code>let</code>都具有块级作用域：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">const PI = 3.14;</span><br><span class="line">PI = 3; // 某些浏览器不报错，但是无效果！</span><br></pre></td></tr></table></figure>
</li>
<li><p>解构赋值<br>从ES6开始，JavaScript引入了解构赋值，可以同时对一组变量进行赋值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 如果浏览器支持解构赋值就不会报错:</span><br><span class="line">var [x, y, z] = [&#x27;hello&#x27;, &#x27;JavaScript&#x27;, &#x27;ES6&#x27;];</span><br></pre></td></tr></table></figure>
<p>注意，对数组元素进行解构赋值时，多个变量要用<code>[...]</code>括起来。<br>如果数组本身还有嵌套，也可以通过下面的形式进行解构赋值，注意嵌套层次和位置要保持一致</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let [x, [y, z]] = [&#x27;hello&#x27;, [&#x27;JavaScript&#x27;, &#x27;ES6&#x27;]];</span><br></pre></td></tr></table></figure>
<p>解构赋值还可以忽略某些元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let [, , z] = [&#x27;hello&#x27;, &#x27;JavaScript&#x27;, &#x27;ES6&#x27;]; // 忽略前两个元素，只对z赋值第三个元素</span><br></pre></td></tr></table></figure>
<p>如果需要从一个对象中取出若干属性，也可以使用解构赋值，便于快速获取对象的指定属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">    name: &#x27;小明&#x27;,</span><br><span class="line">    age: 20,</span><br><span class="line">    gender: &#x27;male&#x27;,</span><br><span class="line">    passport: &#x27;G-12345678&#x27;,</span><br><span class="line">    school: &#x27;No.4 middle school&#x27;</span><br><span class="line">&#125;;</span><br><span class="line">var &#123;name, age, passport&#125; = person;</span><br></pre></td></tr></table></figure>
<p>对一个对象进行解构赋值时，同样可以直接对嵌套的对象属性进行赋值，只要保证对应的层次是一致的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">    name: &#x27;小明&#x27;,</span><br><span class="line">    age: 20,</span><br><span class="line">    gender: &#x27;male&#x27;,</span><br><span class="line">    passport: &#x27;G-12345678&#x27;,</span><br><span class="line">    school: &#x27;No.4 middle school&#x27;,</span><br><span class="line">    address: &#123;</span><br><span class="line">        city: &#x27;Beijing&#x27;,</span><br><span class="line">        street: &#x27;No.1 Road&#x27;,</span><br><span class="line">        zipcode: &#x27;100001&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var &#123;name, address: &#123;city, zip&#125;&#125; = person;</span><br></pre></td></tr></table></figure>
<p>使用解构赋值对对象属性进行赋值时，如果对应的属性不存在，变量将被赋值为<code>undefined</code>，这和引用一个不存在的属性获得<code>undefined</code>是一致的。如果要使用的变量名和属性名不一致，可以用下面的语法获取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">    name: &#x27;小明&#x27;,</span><br><span class="line">    age: 20,</span><br><span class="line">    gender: &#x27;male&#x27;,</span><br><span class="line">    passport: &#x27;G-12345678&#x27;,</span><br><span class="line">    school: &#x27;No.4 middle school&#x27;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let &#123;name, passport:id&#125; = person;  // 注意: passport不是变量，而是为了让变量id获得passport属性</span><br><span class="line">name; // &#x27;小明&#x27;</span><br><span class="line">id; // &#x27;G-12345678&#x27;</span><br><span class="line">passport; // Uncaught ReferenceError: passport is not defined</span><br></pre></td></tr></table></figure>
<p>解构赋值还可以使用默认值，这样就避免了不存在的属性返回<code>undefined</code>的问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">    name: &#x27;小明&#x27;,</span><br><span class="line">    age: 20,</span><br><span class="line">    gender: &#x27;male&#x27;,</span><br><span class="line">    passport: &#x27;G-12345678&#x27;</span><br><span class="line">&#125;;</span><br><span class="line">// 如果person对象没有single属性，默认赋值为true:</span><br><span class="line">var &#123;name, single=true&#125; = person;</span><br><span class="line">name; // &#x27;小明&#x27;</span><br><span class="line">single; // true</span><br></pre></td></tr></table></figure>
<p>有些时候，如果变量已经被声明了，再次赋值的时候，正确的写法也会报语法错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var x, y;  // 声明变量</span><br><span class="line">&#123;x, y&#125; = &#123; name: &#x27;小明&#x27;, x: 100, y: 200&#125;;  // 解构赋值,会报语法错误: Uncaught SyntaxError: Unexpected token =</span><br></pre></td></tr></table></figure>
<p>这是因为JavaScript引擎把<code>&#123;</code>开头的语句当作了块处理，于是<code>=</code>不再合法。解决方法是用小括号括起来：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&#123;x, y&#125; = &#123; name: &#x27;小明&#x27;, x: 100, y: 200&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法<br>在一个对象中绑定函数，称为这个对象的方法。<br>绑定到对象上的函数称为方法，它在内部使用了一个<code>this</code>关键字，其始终指向当前对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var xiaoming = &#123;</span><br><span class="line">    name: &#x27;小明&#x27;,</span><br><span class="line">    birth: 1990,</span><br><span class="line">    age: function () &#123;</span><br><span class="line">        var y = new Date().getFullYear();</span><br><span class="line">        return y - this.birth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>拆开写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getAge() &#123;</span><br><span class="line">    var y = new Date().getFullYear();</span><br><span class="line">    return y - this.birth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var xiaoming = &#123;</span><br><span class="line">    name: &#x27;小明&#x27;,</span><br><span class="line">    birth: 1990,</span><br><span class="line">    age: getAge</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.age(); // 25, 正常结果</span><br><span class="line">getAge(); // NaN</span><br></pre></td></tr></table></figure>
<p>如果以对象的方法形式调用，比如<code>xiaoming.age()</code>，该函数的<code>this</code>指向被调用的对象，也就是<code>xiaoming</code>，这是符合我们预期的。<br>如果单独调用函数，比如<code>getAge()</code>，此时，该函数的<code>this</code>指向全局对象，也就是<code>window</code>。<br>如果这么写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var fn = xiaoming.age; // 先拿到xiaoming的age函数</span><br><span class="line">fn(); // NaN</span><br></pre></td></tr></table></figure>
<p>也是不行的！要保证<code>this</code>指向正确，必须用<code>obj.xxx()</code>的形式调用！<br>由于这是一个巨大的设计错误。ECMA决定，在<code>strict</code>模式下让函数的<code>this</code>指向<code>undefined</code>，因此，在<code>strict</code>模式下，你会得到一个错误。这个决定只是让错误及时暴露出来，并没有解决<code>this</code>应该指向的正确位置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">var xiaoming = &#123;</span><br><span class="line">    name: &#x27;小明&#x27;,</span><br><span class="line">    birth: 1990,</span><br><span class="line">    age: function () &#123;</span><br><span class="line">        function getAgeFromBirth() &#123;</span><br><span class="line">            var y = new Date().getFullYear();</span><br><span class="line">            return y - this.birth;</span><br><span class="line">        &#125;</span><br><span class="line">        return getAgeFromBirth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.age(); // Uncaught TypeError: Cannot read property &#x27;birth&#x27; of undefined</span><br></pre></td></tr></table></figure>
<p>结果又报错了！原因是<code>this</code>指针只在<code>age</code>方法的函数内指向<code>xiaoming</code>，在函数内部定义的函数，<code>this</code>又指向<code>undefined</code>了！（在非<code>strict</code>模式下，它重新指向全局对象<code>window</code>！）<br>修复的办法也不是没有，我们用一个<code>that</code>变量首先捕获<code>this</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">var xiaoming = &#123;</span><br><span class="line">    name: &#x27;小明&#x27;,</span><br><span class="line">    birth: 1990,</span><br><span class="line">    age: function () &#123;</span><br><span class="line">        var that = this; // 在方法内部一开始就捕获this</span><br><span class="line">        function getAgeFromBirth() &#123;</span><br><span class="line">            var y = new Date().getFullYear();</span><br><span class="line">            return y - that.birth; // 用that而不是this</span><br><span class="line">        &#125;</span><br><span class="line">        return getAgeFromBirth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.age(); // 25</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>apply()</code>和<code>call()</code><br>指定函数的<code>this</code>指向哪个对象，可以用函数本身的<code>apply</code>方法，它接收两个参数，第一个参数就是需要绑定的<code>this</code>变量，第二个参数是<code>Array</code>，表示函数本身的参数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getAge() &#123;</span><br><span class="line">    var y = new Date().getFullYear();</span><br><span class="line">    return y - this.birth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var xiaoming = &#123;</span><br><span class="line">    name: &#x27;小明&#x27;,</span><br><span class="line">    birth: 1990,</span><br><span class="line">    age: getAge</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.age(); // 25</span><br><span class="line">getAge.apply(xiaoming, []); // 25, this指向xiaoming, 参数为空</span><br></pre></td></tr></table></figure></li>
</ol>
<p><code>apply()</code>把参数打包成<code>Array</code>再传入；<br><code>call()</code>把参数按顺序传入<br>对普通函数调用，我们通常把this绑定为null。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Math.max.apply(null, [3, 5, 4]); // 5</span><br><span class="line">Math.max.call(null, 3, 5, 4); // 5</span><br></pre></td></tr></table></figure>

<ol start="13">
<li><p>装饰器<br>JavaScript的所有对象都是动态的，即使内置的函数，我们也可以重新指向新的函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">var count = 0;</span><br><span class="line">var oldParseInt = parseInt; // 保存原函数</span><br><span class="line"></span><br><span class="line">window.parseInt = function () &#123;</span><br><span class="line">    count += 1;</span><br><span class="line">    return oldParseInt.apply(null, arguments); // 调用原函数</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>高阶函数<br>JavaScript的函数其实都指向某个变量。既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。</p>
</li>
</ol>
<p>14.1 Array中的map和reduce</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arr.map(String);  // 把Array的所有数字转为字符串</span><br></pre></td></tr></table></figure>

<p><code>reduce()</code>把一个函数作用在这个<code>Array</code>的<code>[x1, x2, x3...]</code>上，这个函数必须接收两个参数，<code>reduce()</code>把结果继续和序列的下一个元素做累积计算，其效果就是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(parseInt) // While one might expect [1, 2, 3], the actual result is [1, NaN, NaN].</span><br></pre></td></tr></table></figure>

<p>说明:parseInt is often used with one argument, but takes two. The first is an expression and the second is the radix to the callback function, Array.prototype.map passes 3 arguments:</p>
<ul>
<li>the element</li>
<li>the index</li>
<li>the array<br>The third argument is ignored by parseInt—but not the second one! This is the source of possible confusion.<br>Here is a concise example of the iteration steps:</li>
<li>parseInt(string, radix) -&gt; map(parseInt(value, index))</li>
<li>first iteration  (index is 0):  <code>parseInt(&quot;1&quot;, 0)</code>  &#x3D;&gt; 1</li>
<li>second iteration (index is 1):  <code>parseInt(&quot;2&quot;, 1)</code>  &#x3D;&gt; NaN</li>
<li>third iteration  (index is 2):  <code>parseInt(&quot;3&quot;, 2)</code>  &#x3D;&gt; NaN<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">parseInt(string)</span><br><span class="line">parseInt(string, radix)</span><br></pre></td></tr></table></figure>
<code>radix</code>可选。表示要解析的数字的基数。该值介于 2 ~ 36 之间。<br>如果省略该参数或其值为 0，则数字将以 10 为基础来解析。<br>如果该参数小于 2 或者大于 36，则 <code>parseInt()</code> 将返回 <code>NaN</code>。如果<code>string</code>不在<code>radix</code>进制的范围内，也返回<code>NaN</code>,如<code>parseInt(&quot;3&quot;, 2)</code>  &#x3D;&gt; NaN</li>
</ul>
<p>14.2 <code>filter()</code><br>用于把<code>Array</code>的某些元素过滤掉，然后返回剩下的元素。<code>filter()</code>把传入的函数依次作用于每个元素，然后根据返回值是<code>true</code>还是<code>false</code>决定保留还是丢弃该元素。<br>回调函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var r = arr.filter(function (element, index, self) &#123;</span><br><span class="line">    console.log(element); // 依次打印&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;</span><br><span class="line">    console.log(index); // 依次打印0, 1, 2</span><br><span class="line">    console.log(self); // self就是变量arr</span><br><span class="line">    return true;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>去除Array的重复元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r = arr.filter(function (element, index, self) &#123;</span><br><span class="line">    return self.indexOf(element) === index;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>14.3 <code>sort()</code><br>对字符串排序，是按照<code>ASCII</code>的大小比较的<br><code>Array</code>的<code>sort()</code>方法默认把所有元素先转换为<code>String</code>再排序<br>自定义的排序:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arr.sort(function (x, y) &#123;</span><br><span class="line">    if (x &lt; y) &#123;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    if (x &gt; y) &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>sort()</code>方法会直接对<code>Array</code>进行修改，它返回的结果仍是当前<code>Array</code></p>
<p>14.4 其他方法<br><code>every()</code>方法可以判断数组的所有元素是否满足测试条件<br><code>find()</code>方法用于查找符合条件的第一个元素，如果找到了，返回这个元素，否则，返回<code>undefined</code><br><code>findIndex()</code>和<code>find()</code>类似，也是查找符合条件的第一个元素，不同之处在于<code>findIndex()</code>会返回这个元素的索引，如果没有找到，返回<code>-1</code><br><code>forEach()</code>和<code>map()</code>类似，它也把每个元素依次作用于传入的函数，但不会返回新的数组。<code>forEach()</code>常用于遍历数组，因此，传入的函数不需要返回值</p>
<ol start="15">
<li><p>闭包<br>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function lazy_sum(arr) &#123;</span><br><span class="line">    var sum = function () &#123;</span><br><span class="line">        return arr.reduce(function (x, y) &#123;</span><br><span class="line">            return x + y;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当我们调用<code>lazy_sum()</code>时，返回的并不是求和结果，而是求和函数<code>sum</code><br>在函数<code>lazy_sum</code>中又定义了函数<code>sum</code>，并且，内部函数<code>sum</code>可以引用外部函数<code>lazy_sum</code>的参数和局部变量，当<code>lazy_sum</code>返回函数<code>sum</code>时，相关参数和变量都保存在返回的函数中，这种程序结构称为“闭包（Closure）”<br>注意，当我们调用<code>lazy_sum()</code>时，每次调用都会返回一个新的函数，即使传入相同的参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr=[1, 2, 3, 4, 5]</span><br><span class="line">var f1 = lazy_sum(arr);</span><br><span class="line">var f2 = lazy_sum(arr);</span><br><span class="line">f1==f2   //false</span><br><span class="line">f1 === f2; // false</span><br></pre></td></tr></table></figure>
<p>返回的函数并没有立刻执行，而是直到调用了<code>f()</code>才执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function count() &#123;</span><br><span class="line">    var arr = [];</span><br><span class="line">    for (var i=1; i&lt;=3; i++) &#123;</span><br><span class="line">        arr.push(function () &#123;</span><br><span class="line">            return i * i;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var results = count();</span><br><span class="line">var f1 = results[0];</span><br><span class="line">var f2 = results[1];</span><br><span class="line">var f3 = results[2];</span><br></pre></td></tr></table></figure>
<p>很可能认为调用<code>f1()</code>，<code>f2()</code>和<code>f3()</code>结果应该是<code>1</code>，<code>4</code>，<code>9</code>，但实际结果是：都是<code>16</code>。原因就在于返回的函数引用了变量<code>i</code>，但它并非立刻执行。等到3个函数都返回时，它们所引用的变量<code>i</code>已经变成了<code>4</code>，因此最终结果为<code>16</code>。<br>返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，或者后续会发生变化的变量。<br>如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function count() &#123;</span><br><span class="line">    var arr = [];</span><br><span class="line">    for (var i=1; i&lt;=3; i++) &#123;</span><br><span class="line">        arr.push((function (n) &#123;</span><br><span class="line">            return function () &#123;</span><br><span class="line">                return n * n;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)(i));</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>“创建一个匿名函数并立刻执行”的语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function (x) &#123;</span><br><span class="line">    return x * x;</span><br><span class="line">&#125;)(3); // 9</span><br></pre></td></tr></table></figure>
<p>理论上讲，创建一个匿名函数并立刻执行可以这么写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function (x) &#123; return x * x &#125; (3);</span><br></pre></td></tr></table></figure>
<p>但是由于JavaScript语法解析的问题，会报<code>SyntaxError</code>错误，因此需要用括号把整个函数定义括起来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function (x) &#123; return x * x &#125;) (3);</span><br></pre></td></tr></table></figure>
<p>通常，一个立即执行的匿名函数可以把函数体拆开，一般这么写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function (x) &#123;</span><br><span class="line">    return x * x;</span><br><span class="line">&#125;)(3);</span><br></pre></td></tr></table></figure>
<p>在没有<code>class</code>机制，只有函数的语言里，借助闭包，同样可以封装一个私有变量。我们用JavaScript创建一个计数器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">function create_counter(initial) &#123;</span><br><span class="line">    var x = initial || 0;</span><br><span class="line">    return &#123;</span><br><span class="line">        inc: function () &#123;</span><br><span class="line">            x += 1;</span><br><span class="line">            return x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>换句话说，闭包就是携带状态的函数，并且它的状态可以完全对外隐藏起来。<br>闭包还可以把多参数的函数变成单参数的函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">function make_pow(n) &#123;</span><br><span class="line">    return function (x) &#123;</span><br><span class="line">        return Math.pow(x, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var pow2 = make_pow(2);</span><br><span class="line">var pow3 = make_pow(3);</span><br></pre></td></tr></table></figure>
</li>
<li><p>箭头函数<br>ES6标准新增了一种新的函数：Arrow Function（箭头函数）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x =&gt; x * x</span><br></pre></td></tr></table></figure>
<p>相当于：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function (x) &#123;</span><br><span class="line">    return x * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>箭头函数相当于匿名函数，并且简化了函数定义。箭头函数有两种格式，一种像上面的，只包含一个表达式，连<code>&#123; ... &#125;</code>和<code>return</code>都省略掉了。还有一种可以包含多条语句，这时候就不能省略<code>&#123; ... &#125;</code>和<code>return</code><br>如果参数不是一个，就需要用括号<code>()</code>括起来<br>如果要返回一个对象，就要注意，如果是单表达式，这么写的话会报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x =&gt; &#123; foo: x &#125;  // SyntaxError</span><br></pre></td></tr></table></figure>
<p>因为和函数体的<code>&#123; ... &#125;</code>有语法冲突，所以要改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x =&gt; (&#123; foo: x &#125;)  // ok</span><br></pre></td></tr></table></figure>
</li>
<li><p>this<br>箭头函数看上去是匿名函数的一种简写，但实际上，箭头函数和匿名函数有个明显的区别：箭头函数内部的<code>this</code>是词法作用域，由上下文确定。<br>回顾前面的例子，由于JavaScript函数对<code>this</code>绑定的错误处理，下面的例子无法得到预期结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    birth: 1990,</span><br><span class="line">    getAge: function () &#123;</span><br><span class="line">        var b = this.birth; // 1990</span><br><span class="line">        console.log(b);</span><br><span class="line">        var fn = function () &#123;</span><br><span class="line">            return new Date().getFullYear() - this.birth; // this指向window或undefined</span><br><span class="line">        &#125;;</span><br><span class="line">        return fn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>现在，箭头函数完全修复了<code>this</code>的指向，<code>this</code>总是指向词法作用域，也就是外层调用者<code>obj</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    birth: 1990,</span><br><span class="line">    getAge: function () &#123;</span><br><span class="line">        var b = this.birth; // 1990</span><br><span class="line">        var fn = () =&gt; new Date().getFullYear() - this.birth; // this指向obj对象</span><br><span class="line">        return fn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.getAge(); // 25</span><br></pre></td></tr></table></figure>
<p>如果使用箭头函数，以前的那种hack写法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var that = this;</span><br></pre></td></tr></table></figure>
<p>就不再需要了。</p>
</li>
</ol>
<p>由于<code>this</code>在箭头函数中已经按照词法作用域绑定了，所以，用<code>call()</code>或者<code>apply()</code>调用箭头函数时，无法对<code>this</code>进行绑定，即传入的第一个参数被忽略：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    birth: 1990,</span><br><span class="line">    getAge: function (year) &#123;</span><br><span class="line">        var b = this.birth; // 1990</span><br><span class="line">        var fn = (y) =&gt; y - this.birth; // this.birth仍是1990</span><br><span class="line">        return fn.call(&#123;birth:2000&#125;, year);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.getAge(2015); // 25</span><br></pre></td></tr></table></figure>

<ol start="18">
<li><code>generator</code><br><code>generator</code>（生成器）是ES6标准引入的新的数据类型。一个<code>generator</code>看上去像一个函数，但可以返回多次。<br>定义如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function* foo(x) &#123;</span><br><span class="line">    yield x + 1;</span><br><span class="line">    yield x + 2;</span><br><span class="line">    return x + 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<code>generator</code>由<code>function*</code>定义（注意多出的<code>*</code>号），并且，除了<code>return</code>语句，还可以用<code>yield</code>返回多次。<br>常规斐波那数列<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function fib(max) &#123;</span><br><span class="line">    var</span><br><span class="line">        t,</span><br><span class="line">        a = 0,</span><br><span class="line">        b = 1,</span><br><span class="line">        arr = [0, 1];</span><br><span class="line">    while (arr.length &lt; max) &#123;</span><br><span class="line">        [a, b] = [b, a + b];</span><br><span class="line">        arr.push(b);</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
使用<code>generator</code>：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function* fib(max) &#123;</span><br><span class="line">    var</span><br><span class="line">        t,</span><br><span class="line">        a = 0,</span><br><span class="line">        b = 1,</span><br><span class="line">        n = 0;</span><br><span class="line">    while (n &lt; max) &#123;</span><br><span class="line">        yield a;</span><br><span class="line">        [a, b] = [b, a + b];</span><br><span class="line">        n ++;</span><br><span class="line">    &#125;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
直接调用<code>generator fib(5)</code>，仅仅是创建了一个<code>generator</code>对象，还没有去执行它<br>调用<code>generator</code>对象有两个方法，一是不断地调用<code>generator</code>对象的<code>next()</code>方法<br><code>next()</code>方法会执行<code>generator</code>的代码，然后，每次遇到<code>yield x;</code>就返回一个对象<code>&#123;value: x, done: true/false&#125;</code>，然后“暂停”。返回的<code>value</code>就是<code>yield</code>的返回值，<code>done</code>表示这个<code>generator</code>是否已经执行结束了。如果<code>done</code>为<code>true</code>，则<code>value</code>就是<code>return</code>的返回值。当执行到<code>done</code>为<code>true</code>时，这个<code>generator</code>对象就已经全部执行完毕，不要再继续调用<code>next()</code>了。<br>第二个方法是直接用<code>for ... of</code>循环迭代<code>generator</code>对象，这种方式不需要我们自己判断<code>done</code>：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (var x of fib(10)) &#123;</span><br><span class="line">    console.log(x); // 依次输出0, 1, 1, 2, 3, ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
因为<code>generator</code>可以在执行过程中多次返回，所以它看上去就像一个可以记住执行状态的函数，利用这一点，写一个<code>generator</code>就可以实现需要用面向对象才能实现的功能。<br>用一个对象来保存状态，得这么写：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var fib = &#123;</span><br><span class="line">    a: 0,</span><br><span class="line">    b: 1,</span><br><span class="line">    n: 0,</span><br><span class="line">    max: 5,</span><br><span class="line">    next: function () &#123;</span><br><span class="line">        var</span><br><span class="line">            r = this.a,</span><br><span class="line">            t = this.a + this.b;</span><br><span class="line">        this.a = this.b;</span><br><span class="line">        this.b = t;</span><br><span class="line">        if (this.n &lt; this.max) &#123;</span><br><span class="line">            this.n ++;</span><br><span class="line">            return r;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return undefined;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<code>generator</code>还有另一个巨大的好处，就是把异步回调代码变成“同步”代码。<code>AJAX</code>会用到。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">function* next_id() &#123;</span><br><span class="line">    var i=0;</span><br><span class="line">    while(true)&#123;</span><br><span class="line">        yield ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript之五浏览器</title>
    <url>/2024/07/31/JavaScript%E4%B9%8B%E4%BA%94%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
    <content><![CDATA[<br />
  
<h2 id="说明，该学习内容来自廖雪峰老师—-JavaScript教程，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录"><a href="#说明，该学习内容来自廖雪峰老师—-JavaScript教程，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录" class="headerlink" title="说明，该学习内容来自廖雪峰老师—-JavaScript教程，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录!"></a>说明，该学习内容来自<a href="https://www.liaoxuefeng.com/wiki/1022910821149312">廖雪峰老师—-JavaScript教程</a>，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录!</h2><br />
<br />
<br />
  
<p>JavaScript的出现就是为了能在浏览器中运行</p>
<p>目前主流的浏览器分这么几种：</p>
<ul>
<li><p>IE 6~11：国内用得最多的IE浏览器，历来对W3C标准支持差。从IE10开始支持ES6标准；</p>
</li>
<li><p>Chrome：Google出品的基于Webkit内核浏览器，内置了非常强悍的JavaScript引擎——V8。由于Chrome一经安装就时刻保持自升级，所以不用管它的版本，最新版早就支持ES6了；</p>
</li>
<li><p>Safari：Apple的Mac系统自带的基于Webkit内核的浏览器，从OS X 10.7 Lion自带的6.1版本开始支持ES6，目前最新的OS X 10.11 El Capitan自带的Safari版本是9.x，早已支持ES6；</p>
</li>
<li><p>Firefox：Mozilla自己研制的Gecko内核和JavaScript引擎OdinMonkey。早期的Firefox按版本发布，后来终于聪明地学习Chrome的做法进行自升级，时刻保持最新；</p>
</li>
<li><p>移动设备上目前iOS和Android两大阵营分别主要使用Apple的Safari和Google的Chrome，由于两者都是Webkit核心，结果HTML5首先在手机上全面普及（桌面绝对是Microsoft拖了后腿），对JavaScript的标准支持也很好，最新版本均支持ES6。</p>
</li>
<li><p>其他浏览器如Opera等由于市场份额太小就被自动忽略了。</p>
</li>
</ul>
<p>另外还要注意识别各种国产浏览器，如某某安全浏览器，某某旋风浏览器，它们只是做了一个壳，其核心调用的是IE，也有号称同时支持IE和Webkit的“双核”浏览器。</p>
<p>不同的浏览器对JavaScript支持的差异主要是，有些API的接口不一样，比如AJAX，File接口。对于ES6标准，不同的浏览器对各个特性支持也不一样。</p>
<p>在编写JavaScript的时候，就要充分考虑到浏览器的差异，尽量让同一份JavaScript代码能运行在不同的浏览器中。</p>
<p>浏览器对象</p>
<p>JavaScript可以获取浏览器提供的很多对象，并进行操作。</p>
<p><code>window</code><br>充当全局作用域，而且表示浏览器窗口。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">innerWidth</span><br><span class="line">innerHeight</span><br><span class="line">outerWidth</span><br><span class="line">outerHeight</span><br></pre></td></tr></table></figure>

<p><code>navigator</code><br>表示浏览器的信息，最常用的属性包括：</p>
<ul>
<li>navigator.appName：浏览器名称；</li>
<li>navigator.appVersion：浏览器版本；</li>
<li>navigator.language：浏览器设置的语言；</li>
<li>navigator.platform：操作系统类型；</li>
<li>navigator.userAgent：浏览器设定的<code>User-Agent</code>字符串。<br><strong>请注意</strong>，navigator的信息可以很容易地被用户修改，所以JavaScript读取的值不一定是正确的。<br>充分利用JavaScript对不存在属性返回undefined的特性，直接用短路运算符||计算<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var width = window.innerWidth || document.body.clientWidth;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><code>screen</code></p>
<ul>
<li>screen.width：屏幕宽度，以像素为单位；</li>
<li>screen.height：屏幕高度，以像素为单位；</li>
<li>screen.colorDepth：返回颜色位数，如8、16、24。</li>
</ul>
<p><code>location</code><br>表示当前页面的URL信息<br>location.protocol; &#x2F;&#x2F; ‘http’<br>location.host; &#x2F;&#x2F; ‘<a href="http://www.example.com/">www.example.com</a>‘<br>location.port; &#x2F;&#x2F; ‘8080’<br>location.pathname; &#x2F;&#x2F; ‘&#x2F;path&#x2F;index.html’<br>location.search; &#x2F;&#x2F; ‘?a&#x3D;1&amp;b&#x3D;2’<br>location.hash; &#x2F;&#x2F; ‘TOP’</p>
<p><code>document</code><br><code>document</code>对象表示当前页面。由于HTML在浏览器中以DOM形式表示为树形结构，<code>document</code>对象就是整个DOM树的根节点。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title</span><br><span class="line">// Cookie是由服务器发送的key-value标示符。</span><br><span class="line">// 因为HTTP协议是无状态的，但是服务器要区分到底是哪个用户发过来的请求，就可以用Cookie来区分。</span><br><span class="line">// 当一个用户成功登录后，服务器发送一个Cookie给浏览器，例如user=ABC123XYZ(加密的字符串)...，此后，浏览器访问该网站时，会在请求头附上这个Cookie，服务器根据Cookie即可区分出用户。</span><br><span class="line">// Cookie还可以存储网站的一些设置，例如，页面显示的语言等等。</span><br><span class="line">cookie  </span><br><span class="line">getElementById()</span><br><span class="line">getElementsByTagName()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>由于JavaScript能读取到页面的Cookie，而用户的登录信息通常也存在Cookie中，这就造成了巨大的安全隐患，这是因为在HTML页面中引入第三方的JavaScript代码是允许的。如果引入的第三方的JavaScript中存在恶意代码，则<a href="http://www.foo.com网站将直接获取到www.example.com网站的用户登录信息./">www.foo.com网站将直接获取到www.example.com网站的用户登录信息。</a><br>为了解决这个问题，服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。<br><em><strong>为了确保安全，服务器端在设置Cookie时，应该始终坚持使用httpOnly</strong></em>。</p>
<p><code>history</code><br><em><strong>任何情况，你都不应该使用history这个对象了</strong></em>。对于现代Web页面来说，由于大量使用AJAX和页面交互，简单粗暴地调用history.back()可能会让用户感到非常愤怒。</p>
<h3 id="操作DOM"><a href="#操作DOM" class="headerlink" title="操作DOM"></a>操作DOM</h3><p>DOM是一个树形结构。操作一个DOM节点实际上就是这么几个操作：</p>
<ul>
<li>更新：更新该DOM节点的内容，相当于更新了该DOM节点表示的HTML的内容；</li>
<li>遍历：遍历该DOM节点下的子节点，以便进行进一步操作；</li>
<li>添加：在该DOM节点下新增一个子节点，相当于动态增加了一个HTML节点；</li>
<li>删除：将该节点从HTML中删除，相当于删掉了该DOM节点的内容以及它包含的所有子节点。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.getElementById()</span><br><span class="line">document.getElementsByTagName()</span><br><span class="line">document.getElementsByClassName()  //CSS选择器,先定位父节点，再从父节点开始选择，以缩小范围</span><br><span class="line">querySelector()  //低版本的IE&lt;8不支持querySelector和querySelectorAll。IE8仅有限支持</span><br><span class="line">querySelectorAll()</span><br><span class="line">children</span><br><span class="line">firstElementChild</span><br><span class="line">lastElementChild</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>严格地讲，我们这里的DOM节点是指<code>Element</code>，但是DOM节点实际上是<code>Node</code>，在HTML中，<code>Node</code>包括<code>Element</code>、<code>Comment</code>、<code>CDATA_SECTION</code>等很多种，以及根节点<code>Document</code>类型，但是，绝大多数时候我们只关心<code>Element</code>，也就是实际控制页面结构的<code>Node</code>，其他类型的<code>Node</code>忽略即可。根节点<code>Document</code>已经自动绑定为全局变量<code>document</code></p>
<h4 id="更新DOM"><a href="#更新DOM" class="headerlink" title="更新DOM"></a>更新DOM</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 不但可以修改一个DOM节点的文本内容，还可以直接通过HTML片段修改DOM节点内部的子树</span><br><span class="line">// 用innerHTML时要注意，是否需要写入HTML。如果写入的字符串是通过网络拿到的，要注意对字符编码来避免XSS攻击</span><br><span class="line">innerHTML  </span><br><span class="line">// innerText或textContent属性,自动对字符串进行HTML编码，保证无法设置任何HTML标签</span><br><span class="line">// 区别在于：innerText不返回隐藏元素的文本，而textContent返回所有文本</span><br><span class="line">innerText  </span><br><span class="line">textContent      </span><br></pre></td></tr></table></figure>

<h4 id="插入DOM"><a href="#插入DOM" class="headerlink" title="插入DOM"></a>插入DOM</h4><ul>
<li>如果这个DOM节点是空的，例如，<code>&lt;div&gt;&lt;/div&gt;</code>，那么，直接使用<code>innerHTML = &#39;&lt;span&gt;child&lt;/span&gt;&#39;</code>就可以修改DOM节点的内容，相当于“插入”了新的DOM节点<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list.appendChild(js);  // 把一个子节点添加到父节点的最后一个子节点</span><br><span class="line">document.createElement(&#x27;p&#x27;)</span><br><span class="line">// 使用insertBefore重点是要拿到一个“参考子节点”的引用。很多时候，需要循环一个父节点的所有子节点，可以通过迭代children属性实现</span><br><span class="line">parentElement.insertBefore(newElement, referenceElement);</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="删除DOM"><a href="#删除DOM" class="headerlink" title="删除DOM"></a>删除DOM</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var removed = parent.removeChild(self);</span><br></pre></td></tr></table></figure>
<p>当遍历一个父节点的子节点并进行删除操作时，要注意，<code>children</code>属性是一个只读属性，并且它在子节点变化时会实时更新。</p>
<h4 id="操作表单"><a href="#操作表单" class="headerlink" title="操作表单"></a>操作表单</h4><p>用JavaScript操作表单和操作DOM是类似的，因为表单本身也是DOM树。<br>HTML表单的输入控件主要有以下几种：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">文本框，对应的&lt;input type=&quot;text&quot;&gt;，用于输入文本；</span><br><span class="line">口令框，对应的&lt;input type=&quot;password&quot;&gt;，用于输入口令；</span><br><span class="line">单选框，对应的&lt;input type=&quot;radio&quot;&gt;，用于选择一项；</span><br><span class="line">复选框，对应的&lt;input type=&quot;checkbox&quot;&gt;，用于选择多项；</span><br><span class="line">下拉框，对应的&lt;select&gt;，用于选择一项；</span><br><span class="line">隐藏文本，对应的&lt;input type=&quot;hidden&quot;&gt;，用户不可见，但表单提交时会把隐藏文本发送到服务器。</span><br></pre></td></tr></table></figure>

<p><code>input</code>,<code>text</code>、<code>password</code>、<code>hidden</code>以及<code>select</code>可以直接通过<code>value</code>获取值。。但是，对于单选框和复选框，<code>value</code>属性返回的永远是<code>HTML预设的值</code>，而我们需要获得的实际是用户是否“勾上了”选项，所以应该用<code>checked</code>判断</p>
<p><code>input</code>,<code>text</code>、<code>password</code>、<code>hidden</code>以及<code>select</code>可以直接设置<code>value</code>；对于单选框和复选框，设置<code>checked</code>为<code>true</code>或<code>false</code>即可。</p>
<p>HTML5新增了大量标准控件，常用的包括<code>date</code>、<code>datetime</code>、<code>datetime-local</code>、<code>color</code>等，它们都使用<code>&lt;input&gt;</code>标签<br>不支持HTML5的浏览器无法识别新的控件，会把它们当做<code>type=&quot;text&quot;</code>来显示。支持HTML5的浏览器将获得格式化的字符串。例如，<code>type=&quot;date&quot;</code>类型的<code>input</code>的<code>value</code>将保证是一个有效的<code>YYYY-MM-DD</code>格式的日期，或者空字符串。</p>
<p>提交表单<br>方式一是通过<code>&lt;form&gt;</code>元素的<code>submit()</code>方法提交一个表单,缺点是扰乱了浏览器对form的正常提交</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- HTML --&gt;</span><br><span class="line">&lt;form id=&quot;test-form&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;test&quot;&gt;</span><br><span class="line">    &lt;button type=&quot;button&quot; onclick=&quot;doSubmitForm()&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">function doSubmitForm() &#123;</span><br><span class="line">    var form = document.getElementById(&#x27;test-form&#x27;);</span><br><span class="line">    // 可以在此修改form的input...</span><br><span class="line">    // 提交form:</span><br><span class="line">    form.submit();</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>浏览器默认点击<code>&lt;button type=&quot;submit&quot;&gt;</code>时提交表单，或者用户在最后一个输入框按回车键.。因此，第二种方式是响应<code>&lt;form&gt;</code>本身的<code>onsubmit</code>事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- HTML --&gt;</span><br><span class="line">&lt;form id=&quot;test-form&quot; onsubmit=&quot;return checkForm()&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;test&quot;&gt;</span><br><span class="line">    &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">function checkForm() &#123;</span><br><span class="line">    var form = document.getElementById(&#x27;test-form&#x27;);</span><br><span class="line">    // 可以在此修改form的input...</span><br><span class="line">    // 继续下一步:</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>注意要return true来告诉浏览器继续提交，如果return false，浏览器将不会继续提交form，这种情况通常对应用户输入有误，提示用户错误信息后终止提交form。</p>
<p>要想不改变用户的输入，可以利用<code>&lt;input type=&quot;hidden&quot;&gt;</code>实现。没有name属性的<code>&lt;input&gt;</code>的数据不会被提交</p>
<h4 id="操作文件"><a href="#操作文件" class="headerlink" title="操作文件"></a>操作文件</h4><p>在HTML表单中，可以上传文件的唯一控件就是<code>&lt;input type=&quot;file&quot;&gt;</code>。</p>
<p><strong>注意：</strong> 当一个表单包含<code>&lt;input type=&quot;file&quot;&gt;</code>时，表单的<code>enctype</code>必须指定为<code>multipart/form-data</code>，<code>method</code>必须指定为<code>post</code>，浏览器才能正确编码并以<code>multipart/form-data</code>格式发送表单的数据。</p>
<p>出于安全考虑，浏览器只允许用户点击<code>&lt;input type=&quot;file&quot;&gt;</code>来选择本地文件，用JavaScript对<code>&lt;input type=&quot;file&quot;&gt;</code>的<code>value</code>赋值是没有任何效果的。当用户选择了上传某个文件后，JavaScript也无法获得该文件的真实路径</p>
<p>由于JavaScript对用户上传的文件操作非常有限，尤其是无法读取文件内容，使得很多需要操作文件的网页不得不用Flash这样的第三方插件来实现。<br>HTML5的File API提供了<code>File</code>和<code>FileReader</code>两个主要对象，可以获得文件信息并读取文件。</p>
<p>回调<br>上面的代码还演示了JavaScript的一个重要的特性就是单线程执行模式。在JavaScript中，浏览器的JavaScript执行引擎在执行JavaScript代码时，总是以单线程模式执行，也就是说，任何时候，JavaScript代码都不可能同时有多于1个线程在执行。</p>
<h4 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h4><p>AJAX不是JavaScript的规范，它只是一个哥们“发明”的缩写：Asynchronous JavaScript and XML，意思就是用JavaScript执行异步网络请求。<br>AJAX请求是异步执行的，也就是说，要通过回调函数获得响应。在现代浏览器上写AJAX主要依靠<code>XMLHttpRequest</code>对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">function success(text) &#123;</span><br><span class="line">    var textarea = document.getElementById(&#x27;test-response-text&#x27;);</span><br><span class="line">    textarea.value = text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function fail(code) &#123;</span><br><span class="line">    var textarea = document.getElementById(&#x27;test-response-text&#x27;);</span><br><span class="line">    textarea.value = &#x27;Error code: &#x27; + code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var request = new XMLHttpRequest(); // 新建XMLHttpRequest对象</span><br><span class="line"></span><br><span class="line">request.onreadystatechange = function () &#123; // 状态发生变化时，函数被回调</span><br><span class="line">    if (request.readyState === 4) &#123; // 成功完成</span><br><span class="line">        // 判断响应结果:</span><br><span class="line">        if (request.status === 200) &#123;</span><br><span class="line">            // 成功，通过responseText拿到响应的文本:</span><br><span class="line">            return success(request.responseText);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 失败，根据响应码判断失败原因:</span><br><span class="line">            return fail(request.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // HTTP请求还在继续...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 发送请求:</span><br><span class="line">request.open(&#x27;GET&#x27;, &#x27;/api/categories&#x27;);</span><br><span class="line">request.send();</span><br><span class="line"></span><br><span class="line">alert(&#x27;请求已发送，请等待响应...&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var request;</span><br><span class="line">if (window.XMLHttpRequest) &#123;</span><br><span class="line">    request = new XMLHttpRequest();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    request = new ActiveXObject(&#x27;Microsoft.XMLHTTP&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过检测<code>window</code>对象是否有<code>XMLHttpRequest</code>属性来确定浏览器是否支持标准的<code>XMLHttpRequest</code>。<strong>注意</strong>，不要根据浏览器的<code>navigator.userAgent</code>来检测浏览器是否支持某个JavaScript特性，一是因为这个字符串本身可以伪造，二是通过IE版本判断JavaScript特性将非常复杂</p>
<p><code>XMLHttpRequest</code>对象的<code>open()</code>方法有3个参数，第一个参数指定是<code>GET</code>还是<code>POST</code>，第二个参数指定<code>URL</code>地址，第三个参数指定是否使用异步，默认是<code>true</code>，所以不用写。</p>
<p><strong>注意</strong>，千万不要把第三个参数指定为<code>false</code>，否则浏览器将停止响应，直到AJAX请求完成。如果这个请求耗时10秒，那么10秒内你会发现浏览器处于“假死”状态。</p>
<p>最后调用<code>send()</code>方法才真正发送请求。<code>GET</code>请求不需要参数，<code>POST</code>请求需要把<code>body</code>部分以字符串或者<code>FormData</code>对象传进去</p>
<p>安全限制<br>上面代码的URL使用的是相对路径。如果你把它改为<code>&#39;http://www.sina.com.cn/&#39;</code>，再运行，肯定报错。在Chrome的控制台里，还可以看到错误信息。</p>
<p>这是因为浏览器的<code>同源策略</code>导致的。<code>默认情况下，JavaScript在发送AJAX请求时，URL的域名必须和当前页面完全一致</code>。</p>
<p>完全一致的意思是，<code>域名要相同（www.example.com和example.com不同），协议要相同（http和https不同），端口号要相同（默认是:80端口，它和:8080就不同）</code>。有的浏览器口子松一点，允许端口不同，大多数浏览器都会严格遵守这个限制。</p>
<p>JavaScript请求外域（就是其他网站）的URL:</p>
<ul>
<li>一是通过Flash插件发送HTTP请求，这种方式可以绕过浏览器的安全限制，但必须安装Flash，并且跟Flash交互。</li>
<li>二是通过在同源域名下架设一个代理服务器来转发，JavaScript负责把请求发送到代理服务器,代理服务器再把结果返回，这样就遵守了浏览器的同源策略。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;/proxy?url=http://www.sina.com.cn&#x27;</span><br></pre></td></tr></table></figure></li>
<li>第三种方式称为JSONP，它有个限制，只能用GET请求，并且要求返回JavaScript。这种方式跨域实际上是利用了浏览器允许跨域引用JavaScript资源</li>
</ul>
<h4 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h4><p>如果浏览器支持HTML5，那么就可以一劳永逸地使用新的跨域策略：CORS了。<br>CORS全称Cross-Origin Resource Sharing，是HTML5规范定义的如何跨域访问资源。<br><code>Origin</code>表示本域，也就是浏览器当前页面的域。当JavaScript向外域（如sina.com）发起请求后，浏览器收到响应后，首先检查<code>Access-Control-Allow-Origin</code>是否包含本域，如果是，则此次跨域请求成功，如果不是，则请求失败，JavaScript将无法获取到响应的任何数据。跨域能否成功，取决于对方服务器是否愿意给你设置一个正确的<code>Access-Control-Allow-Origin</code>，决定权始终在对方手中<br>简单请求包括<code>GET</code>、<code>HEAD</code>和<code>POST</code>（<code>POST</code>的<code>Content-Type</code>类型 仅限<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>和<code>text/plain</code>），并且不能出现任何自定义头（例如，<code>X-Custom: 12345</code>），通常能满足90%的需求。</p>
<p>对于<code>PUT</code>、<code>DELETE</code>以及其他类型如<code>application/json</code>的<code>POST</code>请求，在发送AJAX请求之前，浏览器会先发送一个<code>OPTIONS</code>请求（称为<code>preflighted</code>请求）到这个<code>URL</code>上，询问目标服务器是否接受</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OPTIONS /path/to/resource HTTP/1.1</span><br><span class="line">Host: bar.com</span><br><span class="line">Origin: http://my.com</span><br><span class="line">Access-Control-Request-Method: POST</span><br></pre></td></tr></table></figure>
<p>服务器必须响应并明确指出允许的Method：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Access-Control-Allow-Origin: http://my.com</span><br><span class="line">Access-Control-Allow-Methods: POST, GET, PUT, OPTIONS</span><br><span class="line">Access-Control-Max-Age: 86400</span><br></pre></td></tr></table></figure>
<p>浏览器确认服务器响应的Access-Control-Allow-Methods头确实包含将要发送的AJAX请求的Method，才会继续发送AJAX，否则，抛出一个错误。</p>
<p>由于以POST、PUT方式传送JSON格式的数据在REST中很常见，所以要跨域正确处理POST和PUT请求，服务器端必须正确响应OPTIONS请求。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">CORS文档</a></p>
<h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function callback() &#123;</span><br><span class="line">    console.log(&#x27;Done&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">console.log(&#x27;before setTimeout()&#x27;);</span><br><span class="line">setTimeout(callback, 1000); // 1秒钟后调用callback函数</span><br><span class="line">console.log(&#x27;after setTimeout()&#x27;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Promise(function (resolve, reject) &#123;</span><br><span class="line">    console.log(&#x27;start new Promise...&#x27;);</span><br><span class="line">    var timeOut = Math.random() * 2;</span><br><span class="line">    console.log(&#x27;set timeout to: &#x27; + timeOut + &#x27; seconds.&#x27;);</span><br><span class="line">    setTimeout(function () &#123;</span><br><span class="line">        if (timeOut &lt; 1) &#123;</span><br><span class="line">            console.log(&#x27;call resolve()...&#x27;);</span><br><span class="line">            resolve(&#x27;200 OK&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            console.log(&#x27;call reject()...&#x27;);</span><br><span class="line">            reject(&#x27;timeout in &#x27; + timeOut + &#x27; seconds.&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, timeOut * 1000);</span><br><span class="line">&#125;).then(function (r) &#123;</span><br><span class="line">    console.log(&#x27;Done: &#x27; + r);</span><br><span class="line">&#125;).catch(function (reason) &#123;</span><br><span class="line">    console.log(&#x27;Failed: &#x27; + reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 0.5秒后返回input*input的计算结果:</span><br><span class="line">function multiply(input) &#123;</span><br><span class="line">    return new Promise(function (resolve, reject) &#123;</span><br><span class="line">        console.log(&#x27;calculating &#x27; + input + &#x27; x &#x27; + input + &#x27;...&#x27;);</span><br><span class="line">        setTimeout(resolve, 500, input * input);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 0.5秒后返回input+input的计算结果:</span><br><span class="line">function add(input) &#123;</span><br><span class="line">    return new Promise(function (resolve, reject) &#123;</span><br><span class="line">        console.log(&#x27;calculating &#x27; + input + &#x27; + &#x27; + input + &#x27;...&#x27;);</span><br><span class="line">        setTimeout(resolve, 500, input + input);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var p = new Promise(function (resolve, reject) &#123;</span><br><span class="line">    console.log(&#x27;start new Promise...&#x27;);</span><br><span class="line">    resolve(123);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(multiply)</span><br><span class="line"> .then(add)</span><br><span class="line"> .then(multiply)</span><br><span class="line"> .then(add)</span><br><span class="line"> .then(function (result) &#123;</span><br><span class="line">    console.log(&#x27;Got value: &#x27; + result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">// ajax函数将返回Promise对象:</span><br><span class="line">function ajax(method, url, data) &#123;</span><br><span class="line">    var request = new XMLHttpRequest();</span><br><span class="line">    return new Promise(function (resolve, reject) &#123;</span><br><span class="line">        request.onreadystatechange = function () &#123;</span><br><span class="line">            if (request.readyState === 4) &#123;</span><br><span class="line">                if (request.status === 200) &#123;</span><br><span class="line">                    resolve(request.responseText);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    reject(request.status);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        request.open(method, url);</span><br><span class="line">        request.send(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Promise还可以并行执行异步任务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var p1 = new Promise(function (resolve, reject) &#123;</span><br><span class="line">    setTimeout(resolve, 500, &#x27;P1&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">var p2 = new Promise(function (resolve, reject) &#123;</span><br><span class="line">    setTimeout(resolve, 600, &#x27;P2&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">// 同时执行p1和p2，并在它们都完成后执行then:</span><br><span class="line">Promise.all([p1, p2]).then(function (results) &#123;</span><br><span class="line">    console.log(results); // 获得一个Array: [&#x27;P1&#x27;, &#x27;P2&#x27;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var p1 = new Promise(function (resolve, reject) &#123;</span><br><span class="line">    setTimeout(resolve, 500, &#x27;P1&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">var p2 = new Promise(function (resolve, reject) &#123;</span><br><span class="line">    setTimeout(resolve, 600, &#x27;P2&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">Promise.race([p1, p2]).then(function (result) &#123;</span><br><span class="line">    console.log(result); // &#x27;P1&#x27;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h4><p>Canvas是HTML5新增的组件，它就像一块幕布，可以用JavaScript在上面绘制各种图表、动画等。<br>没有Canvas的年代，绘图只能借助Flash插件实现，页面不得不用JavaScript和Flash进行交互。</p>
<p>Canvas除了能绘制基本的形状和文本，还可以实现动画、缩放、各种滤镜和像素转换等高级操作。如果要实现非常复杂的操作，考虑以下优化方案：</p>
<ul>
<li>通过创建一个不可见的Canvas来绘图，然后将最终绘制结果复制到页面的可见Canvas中；</li>
<li>尽量使用整数坐标而不是浮点数；</li>
<li>可以创建多个重叠的Canvas绘制不同的层，而不是在一个Canvas中绘制非常复杂的图；</li>
<li>背景图片如果不变可以直接用<img>标签并放到最底层。</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript之六jQuery</title>
    <url>/2024/07/31/JavaScript%E4%B9%8B%E5%85%ADjQuery/</url>
    <content><![CDATA[<br />
  
<h2 id="说明，该学习内容来自廖雪峰老师—-JavaScript教程，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录"><a href="#说明，该学习内容来自廖雪峰老师—-JavaScript教程，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录" class="headerlink" title="说明，该学习内容来自廖雪峰老师—-JavaScript教程，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录!"></a>说明，该学习内容来自<a href="https://www.liaoxuefeng.com/wiki/1022910821149312">廖雪峰老师—-JavaScript教程</a>，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录!</h2><br />
<br />
<br />

<p>江湖传言，全世界大约有80~90%的网站直接或间接地使用了jQuery。<br>jQuery这么流行，肯定是因为它解决了一些很重要的问题。实际上，jQuery能帮我们干这些事情：</p>
<ul>
<li>消除浏览器差异：你不需要自己写冗长的代码来针对不同的浏览器来绑定事件，编写AJAX等代码；</li>
<li>简洁的操作DOM的方法：写<code>$(&#39;#test&#39;)</code>肯定比<code>document.getElementById(&#39;test&#39;)</code>来得简洁；</li>
<li>轻松实现动画、修改CSS等各种操作。</li>
<li>jQuery的理念“Write Less, Do More“，让你写更少的代码，完成更多的工作！</li>
</ul>
<p>jQuery有1.x和2.x两个主要版本，区别在于2.x移除了对古老的IE 6、7、8的支持，因此2.x的代码更精简。选择哪个版本主要取决于你是否想支持IE 6~8。<br>目前jQuery，已更新到3.6版本</p>
<p>使用jQuery</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;script src=&quot;https://code.jquery.com/jquery-3.6.0.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">	...</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="符号"><a href="#符号" class="headerlink" title="$符号"></a><code>$</code>符号</h4><p><code>$</code>是著名的<code>jQuery</code>符号。实际上，<code>jQuery</code>把所有功能全部封装在一个全局变量<code>jQuery</code>中，而<code>$</code>也是一个合法的变量名，它是变量<code>jQuery</code>的别名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.jQuery; // jQuery(selector, context)</span><br><span class="line">window.$; // jQuery(selector, context)</span><br><span class="line">$ === jQuery; // true</span><br><span class="line">typeof($); // &#x27;function&#x27;</span><br></pre></td></tr></table></figure>
<p><code>$</code>本质上就是一个函数，但是函数也是对象，于是<code>$</code>除了可以直接调用外，也可以有很多其他属性。</p>
<p><strong>注意</strong>，你看到的<code>$</code>函数名可能不是<code>jQuery(selector, context)</code>，因为很多JavaScript压缩工具可以对函数名和参数改名，所以压缩过的<code>jQuery</code>源码<code>$</code>函数可能变成<code>a(b, c)</code>。</p>
<p>绝大多数时候，我们都直接用<code>$</code>（因为写起来更简单嘛）。但是，如果<code>$</code>这个变量不幸地被占用了，而且还不能改，那我们就只能让<code>jQuery</code>把<code>$</code>变量交出来，然后就只能使用<code>jQuery</code>这个变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$; // jQuery(selector, context)</span><br><span class="line">jQuery.noConflict();</span><br><span class="line">$; // undefined</span><br><span class="line">jQuery; // jQuery(selector, context)</span><br></pre></td></tr></table></figure>
<p>这种黑魔法的原理是<code>jQuery</code>在占用<code>$</code>之前，先在内部保存了原来的<code>$</code>,调用<code>jQuery.noConflict()</code>时会把原来保存的变量还原。</p>
<h3 id="1、选择器"><a href="#1、选择器" class="headerlink" title="1、选择器"></a>1、选择器</h3><p>选择器是<code>jQuery</code>的核心。一个选择器写出来类似<code>$(&#39;#dom-id&#39;)</code>。jQuery的选择器就是帮助我们快速定位到一个或多个DOM节点。</p>
<h4 id="1-1-如果某个DOM节点有id属性，利用jQuery查找如下："><a href="#1-1-如果某个DOM节点有id属性，利用jQuery查找如下：" class="headerlink" title="1.1 如果某个DOM节点有id属性，利用jQuery查找如下："></a>1.1 如果某个DOM节点有id属性，利用jQuery查找如下：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 查找&lt;div id=&quot;abc&quot;&gt;:</span><br><span class="line">var div = $(&#x27;#abc&#x27;);</span><br></pre></td></tr></table></figure>
<p>注意，<code>#abc</code>以<code>#</code>开头。返回的对象是<code>jQuery</code>对象。<br>什么是jQuery对象？jQuery对象类似数组，它的每个元素都是一个引用了DOM节点的对象。<br>以上面的查找为例，如果<code>id</code>为<code>abc</code>的<code>&lt;div&gt;</code>存在，返回的<code>jQuery</code>对象如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&lt;div id=&quot;abc&quot;&gt;...&lt;/div&gt;]</span><br></pre></td></tr></table></figure>
<p>如果<code>id</code>为<code>abc</code>的<code>&lt;div&gt;</code>不存在，返回的<code>jQuery</code>对象如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[]</span><br></pre></td></tr></table></figure>
<p>总之jQuery的选择器不会返回<code>undefined</code>或者<code>null</code>，这样的好处是你不必在下一行判断<code>if (div === undefined)</code>。</p>
<p><code>jQuery</code>对象和<code>DOM</code>对象之间可以互相转化：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var div = $(&#x27;#abc&#x27;); // jQuery对象</span><br><span class="line">var divDom = div.get(0); // 假设存在div，获取第1个DOM元素</span><br><span class="line">var another = $(divDom); // 重新把DOM包装为jQuery对象</span><br></pre></td></tr></table></figure>
<p>通常情况下你不需要获取<code>DOM</code>对象，直接使用<code>jQuery</code>对象更加方便。如果你拿到了一个<code>DOM</code>对象，那可以简单地调用<code>$(aDomObject)</code>把它变成<code>jQuery</code>对象，这样就可以方便地使用<code>jQuery</code>的API了。</p>
<h4 id="1-2-按tag查找只需要写上tag名称就可以了"><a href="#1-2-按tag查找只需要写上tag名称就可以了" class="headerlink" title="1.2 按tag查找只需要写上tag名称就可以了"></a>1.2 按tag查找只需要写上tag名称就可以了</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var ps = $(&#x27;p&#x27;); // 返回所有&lt;p&gt;节点</span><br><span class="line">ps.length; // 数一数页面有多少个&lt;p&gt;节点</span><br></pre></td></tr></table></figure>

<h4 id="1-3-按class查找注意在class名称前加一个"><a href="#1-3-按class查找注意在class名称前加一个" class="headerlink" title="1.3 按class查找注意在class名称前加一个"></a>1.3 按class查找注意在class名称前加一个</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = $(&#x27;.red&#x27;); // 所有节点包含`class=&quot;red&quot;`都将返回</span><br><span class="line">// 例如:</span><br><span class="line">// &lt;div class=&quot;red&quot;&gt;...&lt;/div&gt;</span><br><span class="line">// &lt;p class=&quot;green red&quot;&gt;...&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<p>通常很多节点有多个class，我们可以查找同时包含red和green的节点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = $(&#x27;.red.green&#x27;); // 注意没有空格！</span><br><span class="line">// 符合条件的节点：</span><br><span class="line">// &lt;div class=&quot;red green&quot;&gt;...&lt;/div&gt;</span><br><span class="line">// &lt;div class=&quot;blue green red&quot;&gt;...&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-按属性查找"><a href="#1-4-按属性查找" class="headerlink" title="1.4 按属性查找"></a>1.4 按属性查找</h4><p>一个DOM节点除了id和class外还可以有很多属性，很多时候按属性查找会非常方便，比如在一个表单中按属性来查找：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var email = $(&#x27;[name=email]&#x27;); // 找出&lt;??? name=&quot;email&quot;&gt;</span><br><span class="line">var passwordInput = $(&#x27;[type=password]&#x27;); // 找出&lt;??? type=&quot;password&quot;&gt;</span><br><span class="line">var a = $(&#x27;[items=&quot;A B&quot;]&#x27;); // 找出&lt;??? items=&quot;A B&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>当属性的值包含空格等特殊字符时，需要用双引号括起来。<br>属性查找还可以使用前缀查找或者后缀查找：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var icons = $(&#x27;[name^=icon]&#x27;); // 找出所有name属性值以icon开头的DOM</span><br><span class="line">// 例如: name=&quot;icon-1&quot;, name=&quot;icon-2&quot;</span><br><span class="line">var names = $(&#x27;[name$=with]&#x27;); // 找出所有name属性值以with结尾的DOM</span><br><span class="line">// 例如: name=&quot;startswith&quot;, name=&quot;endswith&quot;</span><br></pre></td></tr></table></figure>
<p>这个方法尤其适合通过<code>class</code>属性查找，且不受<code>class</code>包含多个名称的影响：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var icons = $(&#x27;[class^=&quot;icon-&quot;]&#x27;); // 找出所有class包含至少一个以`icon-`开头的DOM</span><br><span class="line">// 例如: class=&quot;icon-clock&quot;, class=&quot;abc icon-home&quot;</span><br></pre></td></tr></table></figure>

<h4 id="1-5-组合查找"><a href="#1-5-组合查找" class="headerlink" title="1.5 组合查找"></a>1.5 组合查找</h4><p>组合查找就是把上述简单选择器组合起来使用。如果我们查找<code>$(&#39;[name=email]&#39;)</code>，很可能把表单外的<code>&lt;div name=&quot;email&quot;&gt;</code>也找出来，但我们只希望查找<code>&lt;input&gt;</code>，就可以这么写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var emailInput = $(&#x27;input[name=email]&#x27;); // 不会找出&lt;div name=&quot;email&quot;&gt;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：Tag和Attribute之间不能有空格<br>同样的，根据<code>tag</code>和<code>class</code>来组合查找也很常见：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var tr = $(&#x27;tr.red&#x27;); // 找出&lt;tr class=&quot;red ...&quot;&gt;...&lt;/tr&gt;</span><br></pre></td></tr></table></figure>

<h4 id="1-6-多项选择器"><a href="#1-6-多项选择器" class="headerlink" title="1.6 多项选择器"></a>1.6 多项选择器</h4><p>多项选择器就是把多个选择器用<code>,</code>组合起来一块选：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;p,div&#x27;); // 把&lt;p&gt;和&lt;div&gt;都选出来</span><br><span class="line">$(&#x27;p.red,p.green&#x27;); // 把&lt;p class=&quot;red&quot;&gt;和&lt;p class=&quot;green&quot;&gt;都选出来</span><br></pre></td></tr></table></figure>
<p>要注意的是，选出来的元素是按照它们在HTML中出现的顺序排列的，而且不会有重复元素。例如，<code>&lt;p class=&quot;red green&quot;&gt;</code>不会被上面的<code>$(&#39;p.red,p.green&#39;)</code>选择两次。</p>
<h3 id="2、层级选择器（Descendant-Selector）"><a href="#2、层级选择器（Descendant-Selector）" class="headerlink" title="2、层级选择器（Descendant Selector）"></a>2、层级选择器（Descendant Selector）</h3><h4 id="2-1-层级选择器（Descendant-Selector）"><a href="#2-1-层级选择器（Descendant-Selector）" class="headerlink" title="2.1 层级选择器（Descendant Selector）"></a>2.1 层级选择器（Descendant Selector）</h4><p>因为DOM的结构就是层级结构，所以我们经常要根据层级关系进行选择。<br>如果两个DOM元素具有层级关系，就可以用<code>$(&#39;ancestor descendant&#39;)</code>来选择，层级之间用空格隔开。<br>这种层级选择器相比单个的选择器好处在于，它缩小了选择范围，因为首先要定位父节点，才能选择相应的子节点，这样避免了页面其他不相关的元素。多层选择也是允许的</p>
<h4 id="2-2-子选择器（Child-Selector）"><a href="#2-2-子选择器（Child-Selector）" class="headerlink" title="2.2 子选择器（Child Selector）"></a>2.2 子选择器（Child Selector）</h4><p>子选择器<code>$(&#39;parent&gt;child&#39;)</code>类似层级选择器，但是限定了层级关系必须是父子关系，就是<code>&lt;child&gt;</code>节点必须是<code>&lt;parent&gt;</code>节点的直属子节点。</p>
<h4 id="2-3-过滤器（Filter）"><a href="#2-3-过滤器（Filter）" class="headerlink" title="2.3 过滤器（Filter）"></a>2.3 过滤器（Filter）</h4><p>过滤器一般不单独使用，它通常附加在选择器上，帮助我们更精确地定位元素。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;ul.lang li&#x27;); // 选出JavaScript、Python和Lua 3个节点</span><br><span class="line"></span><br><span class="line">$(&#x27;ul.lang li:first-child&#x27;); // 仅选出JavaScript</span><br><span class="line">$(&#x27;ul.lang li:last-child&#x27;); // 仅选出Lua</span><br><span class="line">$(&#x27;ul.lang li:nth-child(2)&#x27;); // 选出第N个元素，N从1开始</span><br><span class="line">$(&#x27;ul.lang li:nth-child(even)&#x27;); // 选出序号为偶数的元素</span><br><span class="line">$(&#x27;ul.lang li:nth-child(odd)&#x27;); // 选出序号为奇数的元素</span><br></pre></td></tr></table></figure>

<h4 id="2-4、表单相关"><a href="#2-4、表单相关" class="headerlink" title="2.4、表单相关"></a>2.4、表单相关</h4><p>针对表单元素，jQuery还有一组特殊的选择器：</p>
<ul>
<li><code>:input</code>：可以选择<code>&lt;input&gt;</code>，<code>&lt;textarea&gt;</code>，<code>&lt;select&gt;</code>和<code>&lt;button&gt;</code>；</li>
<li><code>:file</code>：可以选择<code>&lt;input type=&quot;file&quot;&gt;</code>，和<code>input[type=file]</code>一样；</li>
<li><code>:checkbox</code>：可以选择复选框，和<code>input[type=checkbox]</code>一样；</li>
<li><code>:radio</code>：可以选择单选框，和<code>input[type=radio]</code>一样；</li>
<li><code>:focus</code>：可以选择当前输入焦点的元素，例如把光标放到一个<code>&lt;input&gt;</code>上，用<code>$(&#39;input:focus&#39;)</code>就可以选出；</li>
<li><code>:checked</code>：选择当前勾上的单选框和复选框，用这个选择器可以立刻获得用户选择的项目，如<code>$(&#39;input[type=radio]:checked&#39;)</code>；</li>
<li><code>:enabled</code>：可以选择可以正常输入的<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code> 等，也就是没有灰掉的输入；</li>
<li><code>:disabled</code>：和<code>:enabled</code>正好相反，选择那些不能输入的。<br>此外，jQuery还有很多有用的选择器，例如，选出可见的或隐藏的元素：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;div:visible&#x27;); // 所有可见的div</span><br><span class="line">$(&#x27;div:hidden&#x27;); // 所有隐藏的div</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3、查找和过滤"><a href="#3、查找和过滤" class="headerlink" title="3、查找和过滤"></a>3、查找和过滤</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- HTML结构 --&gt;</span><br><span class="line">&lt;ul class=&quot;lang&quot;&gt;</span><br><span class="line">    &lt;li class=&quot;js dy&quot;&gt;JavaScript&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;dy&quot;&gt;Python&lt;/li&gt;</span><br><span class="line">    &lt;li id=&quot;swift&quot;&gt;Swift&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;dy&quot;&gt;Scheme&lt;/li&gt;</span><br><span class="line">    &lt;li name=&quot;haskell&quot;&gt;Haskell&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<p>通常情况下选择器可以直接定位到我们想要的元素，但是，当我们拿到一个jQuery对象后，还可以以这个对象为基准，进行查找和过滤。</p>
<h4 id="3-1-查找"><a href="#3-1-查找" class="headerlink" title="3.1 查找"></a>3.1 查找</h4><p>最常见的查找是在某个节点的所有子节点中查找，使用find()方法，它本身又接收一个任意的选择器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var ul = $(&#x27;ul.lang&#x27;); // 获得&lt;ul&gt;</span><br><span class="line">var dy = ul.find(&#x27;.dy&#x27;); // 获得JavaScript, Python, Scheme</span><br><span class="line">var swf = ul.find(&#x27;#swift&#x27;); // 获得Swift</span><br><span class="line">var hsk = ul.find(&#x27;[name=haskell]&#x27;); // 获得Haskell</span><br></pre></td></tr></table></figure>
<p>如果要从当前节点开始向上查找，使用<code>parent()</code>方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var swf = $(&#x27;#swift&#x27;); // 获得Swift</span><br><span class="line">var parent = swf.parent(); // 获得Swift的上层节点&lt;ul&gt;</span><br><span class="line">var a = swf.parent(&#x27;.red&#x27;); // 获得Swift的上层节点&lt;ul&gt;，同时传入过滤条件。如果ul不符合条件，返回空jQuery对象</span><br></pre></td></tr></table></figure>

<p>对于位于同一层级的节点，可以通过<code>next()</code>和<code>prev()</code>方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var swift = $(&#x27;#swift&#x27;);</span><br><span class="line"></span><br><span class="line">swift.next(); // Scheme</span><br><span class="line">swift.next(&#x27;[name=haskell]&#x27;); // 空的jQuery对象，因为Swift的下一个元素Scheme不符合条件[name=haskell]</span><br><span class="line"></span><br><span class="line">swift.prev(); // Python</span><br><span class="line">swift.prev(&#x27;.dy&#x27;); // Python，因为Python同时符合过滤器条件.dy</span><br></pre></td></tr></table></figure>

<h4 id="3-2-过滤"><a href="#3-2-过滤" class="headerlink" title="3.2 过滤"></a>3.2 过滤</h4><p>和函数式编程的map、filter类似，jQuery对象也有类似的方法。<br><code>filter()</code>方法可以过滤掉不符合选择器条件的节点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var langs = $(&#x27;ul.lang li&#x27;); // 拿到JavaScript, Python, Swift, Scheme和Haskell</span><br><span class="line">var a = langs.filter(&#x27;.dy&#x27;); // 拿到JavaScript, Python, Scheme</span><br></pre></td></tr></table></figure>
<p>或者传入一个函数，要特别注意函数内部的<code>this</code>被绑定为<code>DOM</code>对象，不是<code>jQuery</code>对象：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var langs = $(&#x27;ul.lang li&#x27;); // 拿到JavaScript, Python, Swift, Scheme和Haskell</span><br><span class="line">langs.filter(function () &#123;</span><br><span class="line">    return this.innerHTML.indexOf(&#x27;S&#x27;) === 0; // 返回S开头的节点</span><br><span class="line">&#125;); // 拿到Swift, Scheme</span><br></pre></td></tr></table></figure>
<p><code>map()</code>方法把一个jQuery对象包含的若干DOM节点转化为其他对象：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var langs = $(&#x27;ul.lang li&#x27;); // 拿到JavaScript, Python, Swift, Scheme和Haskell</span><br><span class="line">var arr = langs.map(function () &#123;</span><br><span class="line">    return this.innerHTML;</span><br><span class="line">&#125;).get(); // 用get()拿到包含string的Array：[&#x27;JavaScript&#x27;, &#x27;Python&#x27;, &#x27;Swift&#x27;, &#x27;Scheme&#x27;, &#x27;Haskell&#x27;]</span><br></pre></td></tr></table></figure>

<p>此外，一个jQuery对象如果包含了不止一个DOM节点，<code>first()</code>、<code>last()</code>和<code>slice()</code>方法可以返回一个新的<code>jQuery</code>对象，把不需要的DOM节点去掉：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var langs = $(&#x27;ul.lang li&#x27;); // 拿到JavaScript, Python, Swift, Scheme和Haskell</span><br><span class="line">var js = langs.first(); // JavaScript，相当于$(&#x27;ul.lang li:first-child&#x27;)</span><br><span class="line">var haskell = langs.last(); // Haskell, 相当于$(&#x27;ul.lang li:last-child&#x27;)</span><br><span class="line">var sub = langs.slice(2, 4); // Swift, Scheme, 参数和数组的slice()方法一致</span><br></pre></td></tr></table></figure>


<h3 id="操作DOM"><a href="#操作DOM" class="headerlink" title="操作DOM"></a>操作DOM</h3><p>有的浏览器只有innerHTML，有的浏览器支持innerText，有了jQuery对象，不需要考虑浏览器差异了，全部统一操作！</p>
<p>jQuery对象的<code>text()</code>和<code>html()</code>方法分别获取节点的文本和原始HTML文本；，传入参数就变成设置文本或者设置HTML内容。<br>一个jQuery对象可以包含0个或任意个DOM对象，它的方法实际上会作用在对应的每个DOM节点上。<br>所以jQuery对象的另一个好处是我们可以执行一个操作，作用在对应的一组DOM节点上。即使选择器没有返回任何DOM节点，调用jQuery对象的方法仍然不会报错。这意味着jQuery帮你免去了许多if语句。</p>
<p>修改CSS</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- HTML结构 --&gt;</span><br><span class="line">&lt;ul id=&quot;test-css&quot;&gt;</span><br><span class="line">    &lt;li class=&quot;lang dy&quot;&gt;&lt;span&gt;JavaScript&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;lang&quot;&gt;&lt;span&gt;Java&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;lang dy&quot;&gt;&lt;span&gt;Python&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;lang&quot;&gt;&lt;span&gt;Swift&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;lang dy&quot;&gt;&lt;span&gt;Scheme&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>
<p>jQuery对象的css(‘name’, ‘value’)方法使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;#test-css li.dy&gt;span&#x27;).css(&#x27;background-color&#x27;, &#x27;#ffd351&#x27;).css(&#x27;color&#x27;, &#x27;red&#x27;);</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>，jQuery对象的所有方法都返回一个jQuery对象（可能是新的也可能是自身），这样我们可以进行链式调用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**var div = $(&#x27;#test-div&#x27;);</span><br><span class="line">div.css(&#x27;color&#x27;); // &#x27;#000033&#x27;, 获取CSS属性</span><br><span class="line">div.css(&#x27;color&#x27;, &#x27;#336699&#x27;); // 设置CSS属性</span><br><span class="line">div.css(&#x27;color&#x27;, &#x27;&#x27;); // 清除CSS属性</span><br></pre></td></tr></table></figure>
<p>为了和JavaScript保持一致，CSS属性可以用<code>&#39;background-color&#39;</code>和<code>&#39;backgroundColor&#39;</code>两种格式。<br><code>css()</code>方法将作用于DOM节点的<code>style</code>属性，具有最高优先级。如果要修改<code>class</code>属性，可以用jQuery提供的下列方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var div = $(&#x27;#test-div&#x27;);</span><br><span class="line">div.hasClass(&#x27;highlight&#x27;); // false， class是否包含highlight</span><br><span class="line">div.addClass(&#x27;highlight&#x27;); // 添加highlight这个class</span><br><span class="line">div.removeClass(&#x27;highlight&#x27;); // 删除highlight这个class</span><br></pre></td></tr></table></figure>

<h4 id="显示和隐藏DOM"><a href="#显示和隐藏DOM" class="headerlink" title="显示和隐藏DOM"></a>显示和隐藏DOM</h4><p>要隐藏一个DOM，我们可以设置<code>CSS</code>的<code>display</code>属性为<code>none</code>，利用<code>css()</code>方法就可以实现。不过，要显示这个DOM就需要恢复原有的<code>display</code>属性，这就得先记下来原有的<code>display</code>属性到底是<code>block</code>还是<code>inline</code>还是别的值。</p>
<p>考虑到显示和隐藏DOM元素使用非常普遍，jQuery直接提供<code>show()</code>和<code>hide()</code>方法，我们不用关心它是如何修改<code>display</code>属性的，总之它能正常工作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = $(&#x27;a[target=_blank]&#x27;);</span><br><span class="line">a.hide(); // 隐藏</span><br><span class="line">a.show(); // 显示</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>，隐藏DOM节点并未改变DOM树的结构，它只影响DOM节点的显示。这和删除DOM节点是不同的。</p>
<h4 id="获取DOM信息"><a href="#获取DOM信息" class="headerlink" title="获取DOM信息"></a>获取DOM信息</h4><p>利用jQuery对象的若干方法，我们直接可以获取DOM的高宽等信息，而无需针对不同浏览器编写特定代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 浏览器可视窗口大小:</span><br><span class="line">$(window).width(); // 800</span><br><span class="line">$(window).height(); // 600</span><br><span class="line"></span><br><span class="line">// HTML文档大小:</span><br><span class="line">$(document).width(); // 800</span><br><span class="line">$(document).height(); // 3500</span><br><span class="line"></span><br><span class="line">// 某个div的大小:</span><br><span class="line">var div = $(&#x27;#test-div&#x27;);</span><br><span class="line">div.width(); // 600</span><br><span class="line">div.height(); // 300</span><br><span class="line">div.width(400); // 设置CSS属性 width: 400px，是否生效要看CSS是否有效</span><br><span class="line">div.height(&#x27;200px&#x27;); // 设置CSS属性 height: 200px，是否生效要看CSS是否有效</span><br></pre></td></tr></table></figure>

<p><code>attr()</code>和<code>removeAttr()</code>方法用于操作DOM节点的属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// &lt;div id=&quot;test-div&quot; name=&quot;Test&quot; start=&quot;1&quot;&gt;...&lt;/div&gt;</span><br><span class="line">var div = $(&#x27;#test-div&#x27;);</span><br><span class="line">div.attr(&#x27;data&#x27;); // undefined, 属性不存在</span><br><span class="line">div.attr(&#x27;name&#x27;); // &#x27;Test&#x27;</span><br><span class="line">div.attr(&#x27;name&#x27;, &#x27;Hello&#x27;); // div的name属性变为&#x27;Hello&#x27;</span><br><span class="line">div.removeAttr(&#x27;name&#x27;); // 删除name属性</span><br><span class="line">div.attr(&#x27;name&#x27;); // undefined</span><br></pre></td></tr></table></figure>

<p><code>prop()</code>方法和<code>attr()</code>类似，但是HTML5规定有一种属性在DOM节点中可以没有值，只有出现与不出现两种，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input id=&quot;test-radio&quot; type=&quot;radio&quot; name=&quot;test&quot; checked value=&quot;1&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>等价于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input id=&quot;test-radio&quot; type=&quot;radio&quot; name=&quot;test&quot; checked=&quot;checked&quot; value=&quot;1&quot;&gt;</span><br></pre></td></tr></table></figure>
<p><code>attr()</code>和<code>prop()</code>对于属性<code>checked</code>处理有所不同：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var radio = $(&#x27;#test-radio&#x27;);</span><br><span class="line">radio.attr(&#x27;checked&#x27;); // &#x27;checked&#x27;,但prop(&#x27;checked&#x27;)和is(&#x27;:checked&#x27;)是false;返回&#x27;undefined&#x27;时，prop(&#x27;checked&#x27;)和is(&#x27;:checked&#x27;)也可能是true</span><br><span class="line">radio.prop(&#x27;checked&#x27;); // true</span><br></pre></td></tr></table></figure>
<p>prop()<code>返回值更合理一些。不过，用</code>is()&#96;方法判断更好：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var radio = $(&#x27;#test-radio&#x27;);</span><br><span class="line">radio.is(&#x27;:checked&#x27;); // true</span><br></pre></td></tr></table></figure>
<p>类似的属性还有<code>selected</code>，处理时最好用<code>is(&#39;:selected&#39;)</code><br>获取<code>checked</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;#id&quot;).is(&quot;:checked&quot;)</span><br><span class="line">$(&quot;#id&quot;).prop(&quot;checked&quot;)</span><br><span class="line">$(&quot;#id&quot;).get(0).checked)</span><br><span class="line">document.getElementById(&quot;#id&quot;).checked</span><br></pre></td></tr></table></figure>
<p>设置<code>checked</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;#id&quot;).prop(&quot;checked&quot;,true)</span><br><span class="line">$(&quot;#id&quot;).get(0).checked = true</span><br><span class="line">document.getElementById(&quot;#id&quot;).checked = true</span><br></pre></td></tr></table></figure>

<h4 id="操作表单"><a href="#操作表单" class="headerlink" title="操作表单"></a>操作表单</h4><p>对于表单元素，jQuery对象统一提供<code>val()</code>方法获取和设置对应的<code>value</code>属性</p>
<h3 id="修改DOM结构"><a href="#修改DOM结构" class="headerlink" title="修改DOM结构"></a>修改DOM结构</h3><h4 id="添加DOM"><a href="#添加DOM" class="headerlink" title="添加DOM"></a>添加DOM</h4><p>要添加新的DOM节点，除了通过jQuery的<code>html()</code>这种暴力方法外，还可以用<code>append()</code>方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;test-div&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&lt;span&gt;JavaScript&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;span&gt;Python&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;span&gt;Swift&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>使用方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var ul = $(&#x27;#test-div&gt;ul&#x27;);</span><br><span class="line">ul.append(&#x27;&lt;li&gt;&lt;span&gt;Haskell&lt;/span&gt;&lt;/li&gt;&#x27;); //传入HTML片段</span><br><span class="line"></span><br><span class="line">// 创建DOM对象:</span><br><span class="line">var ps = document.createElement(&#x27;li&#x27;);</span><br><span class="line">ps.innerHTML = &#x27;&lt;span&gt;Pascal&lt;/span&gt;&#x27;;</span><br><span class="line">// 添加DOM对象:</span><br><span class="line">ul.append(ps);</span><br><span class="line"></span><br><span class="line">// 添加jQuery对象:</span><br><span class="line">ul.append($(&#x27;#scheme&#x27;));</span><br><span class="line"></span><br><span class="line">// 添加函数对象:</span><br><span class="line">ul.append(function (index, html) &#123;</span><br><span class="line">    return &#x27;&lt;li&gt;&lt;span&gt;Language - &#x27; + index + &#x27;&lt;/span&gt;&lt;/li&gt;&#x27;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>传入函数时，要求返回一个字符串、DOM对象或者jQuery对象。因为jQuery的<code>append()</code>可能作用于一组DOM节点，只有传入函数才能针对每个DOM生成不同的子节点。<br><code>append()</code>把DOM添加到最后，<code>prepend()</code>则把DOM添加到最前。</p>
<p>另外<strong>注意</strong>，如果要添加的DOM节点已经存在于HTML文档中，它会首先从文档移除，然后再添加，也就是说，用<code>append()</code>，你可以移动一个DOM节点。也要防止错误覆盖</p>
<p>如果要把新节点插入到指定位置，例如，JavaScript和Python之间，那么，可以先定位到JavaScript，然后用<code>after()</code>方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var js = $(&#x27;#test-div&gt;ul&gt;li:first-child&#x27;);</span><br><span class="line">js.after(&#x27;&lt;li&gt;&lt;span&gt;Lua&lt;/span&gt;&lt;/li&gt;&#x27;);</span><br></pre></td></tr></table></figure>
<p>也就是说，同级节点可以用<code>after()</code>或者<code>before()</code>方法。</p>
<h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var li = $(&#x27;#test-div&gt;ul&gt;li&#x27;);</span><br><span class="line">li.remove(); // 所有&lt;li&gt;全被删除</span><br></pre></td></tr></table></figure>
<h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>因为JavaScript在浏览器中以单线程模式运行，页面加载后，一旦页面上所有的JavaScript代码被执行完后，就只能依赖触发事件来执行JavaScript代码。</p>
<p>浏览器在接收到用户的鼠标或键盘输入后，会自动在对应的DOM节点上触发相应的事件。如果该节点已经绑定了对应的JavaScript处理函数，该函数就会自动调用。</p>
<p>由于不同的浏览器绑定事件的代码都不太一样，所以用jQuery来写代码，就屏蔽了不同浏览器的差异，我们总是编写相同的代码。</p>
<p>举个例子，假设要在用户点击了超链接时弹出提示框，我们用jQuery这样绑定一个click事件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* HTML:</span><br><span class="line"> *</span><br><span class="line"> * &lt;a id=&quot;test-link&quot; href=&quot;#0&quot;&gt;点我试试&lt;/a&gt;</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">// 获取超链接的jQuery对象:</span><br><span class="line">var a = $(&#x27;#test-link&#x27;);</span><br><span class="line">a.on(&#x27;click&#x27;, function () &#123;</span><br><span class="line">    alert(&#x27;Hello!&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>on方法用来绑定一个事件，我们需要传入事件名称和对应的处理函数。</p>
<p>另一种更简化的写法是直接调用click()方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a.click(function () &#123;</span><br><span class="line">    alert(&#x27;Hello!&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>两者完全等价。我们通常用后面的写法。<br>jQuery能够绑定的事件主要包括：</p>
<ol>
<li>鼠标事件</li>
</ol>
<ul>
<li>click: 鼠标单击时触发；</li>
<li>dblclick：鼠标双击时触发；</li>
<li>mouseenter：鼠标进入时触发；</li>
<li>mouseleave：鼠标移出时触发；</li>
<li>mousemove：鼠标在DOM内部移动时触发；</li>
<li>hover：鼠标进入和退出时触发两个函数，相当于mouseenter加上mouseleave。</li>
</ul>
<ol start="2">
<li>键盘事件<br>键盘事件仅作用在当前焦点的DOM上，通常是<code>&lt;input&gt;</code>和<code>&lt;textarea&gt;</code>。</li>
</ol>
<ul>
<li>keydown：键盘按下时触发；</li>
<li>keyup：键盘松开时触发；</li>
<li>keypress：按一次键后触发。</li>
</ul>
<ol start="3">
<li>其他事件</li>
</ol>
<ul>
<li>focus：当DOM获得焦点时触发；</li>
<li>blur：当DOM失去焦点时触发；</li>
<li>change：当<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>或<code>&lt;textarea&gt;</code>的内容改变时触发；</li>
<li>submit：当<code>&lt;form&gt;</code>提交时触发；</li>
<li>ready：当页面被载入并且DOM树完成初始化后触发。</li>
</ul>
<p>其中，<code>ready</code>仅作用于<code>document</code>对象。由于<code>ready</code>事件在<code>DOM</code>完成初始化后触发，且只触发一次，所以非常适合用来写其他的<em>初始化代码</em>。</p>
<p>假设我们想给一个<code>&lt;form&gt;</code>表单绑定<code>submit</code>事件，下面的代码没有预期的效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 代码有误:</span><br><span class="line">        $(&#x27;#testForm&#x27;).on(&#x27;submit&#x27;, function () &#123;</span><br><span class="line">            alert(&#x27;submit!&#x27;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form id=&quot;testForm&quot;&gt;</span><br><span class="line">        ...</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>因为JavaScript在此执行的时候，<code>&lt;form&gt;</code>尚未载入浏览器，所以<code>$(&#39;#testForm)</code>返回<code>[]</code>，并没有绑定事件到任何DOM上。</p>
<p>所以我们自己的初始化代码必须放到<code>document</code>对象的<code>ready</code>事件中，保证DOM已完成初始化：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(document).on(&#x27;ready&#x27;, function () &#123;</span><br><span class="line">            $(&#x27;#testForm).on(&#x27;submit&#x27;, function () &#123;</span><br><span class="line">                alert(&#x27;submit!&#x27;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form id=&quot;testForm&quot;&gt;</span><br><span class="line">        ...</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p>这样写就没有问题了。因为相关代码会在DOM树初始化后再执行。【任然无响应？？】<br>由于ready事件使用非常普遍，所以可以这样简化【正常】：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(document).ready(function () &#123;</span><br><span class="line">    // on(&#x27;submit&#x27;, function)也可以简化:</span><br><span class="line">    $(&#x27;#testForm).submit(function () &#123;</span><br><span class="line">        alert(&#x27;submit!&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>甚至还可以再简化为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(function () &#123;</span><br><span class="line">    // init...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面的这种写法最为常见。如果你遇到<code>$(function () &#123;...&#125;)</code>的形式，牢记这是<code>document</code>对象的<code>ready</code>事件处理函数。<br>完全可以反复绑定事件处理函数，它们会依次执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(function () &#123;</span><br><span class="line">    console.log(&#x27;init A...&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">$(function () &#123;</span><br><span class="line">    console.log(&#x27;init B...&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">$(function () &#123;</span><br><span class="line">    console.log(&#x27;init C...&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="事件参数"><a href="#事件参数" class="headerlink" title="事件参数"></a><strong>事件参数</strong></h4><p>有些事件，如<code>mousemove</code>和<code>keypress</code>，我们需要获取鼠标位置和按键的值，否则监听这些事件就没什么意义了。所有事件都会传入<code>Event</code>对象作为参数，可以从<code>Event</code>对象上获取到更多的信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(function () &#123;</span><br><span class="line">    $(&#x27;#testMouseMoveDiv&#x27;).mousemove(function (e) &#123;</span><br><span class="line">        $(&#x27;#testMouseMoveSpan&#x27;).text(&#x27;pageX = &#x27; + e.pageX + &#x27;, pageY = &#x27; + e.pageY);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h4 id="取消绑定"><a href="#取消绑定" class="headerlink" title="取消绑定"></a>取消绑定</h4><p>一个已被绑定的事件可以解除绑定，通过<code>off(&#39;click&#39;, function)</code>实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function hello() &#123;</span><br><span class="line">    alert(&#x27;hello!&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.click(hello); // 绑定事件</span><br><span class="line"></span><br><span class="line">// 10秒钟后解除绑定:</span><br><span class="line">setTimeout(function () &#123;</span><br><span class="line">    a.off(&#x27;click&#x27;, hello);</span><br><span class="line">&#125;, 10000);</span><br></pre></td></tr></table></figure>

<p>需要特别注意的是，下面这种写法是无效的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 绑定事件:</span><br><span class="line">a.click(function () &#123;</span><br><span class="line">    alert(&#x27;hello!&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 解除绑定:</span><br><span class="line">a.off(&#x27;click&#x27;, function () &#123;</span><br><span class="line">    alert(&#x27;hello!&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这是因为两个匿名函数虽然长得一模一样，但是它们是两个不同的函数对象，<code>off(&#39;click&#39;, function () &#123;...&#125;)</code>无法移除已绑定的第一个匿名函数。</p>
<p>为了实现移除效果，可以使用<code>off(&#39;click&#39;)</code>一次性移除已绑定的<code>click</code>事件的所有处理函数。</p>
<p>同理，无参数调用<code>off()</code>一次性移除已绑定的所有类型的事件处理函数。</p>
<h4 id="事件触发条件"><a href="#事件触发条件" class="headerlink" title="事件触发条件"></a>事件触发条件</h4><p>一个需要注意的问题是，事件的触发总是由用户操作引发的。例如，我们监控文本框的内容改动：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var input = $(&#x27;#test-input&#x27;);</span><br><span class="line">input.change(function () &#123;</span><br><span class="line">    console.log(&#x27;changed...&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>当用户在文本框中输入时，就会触发<code>change</code>事件。但是，如果用JavaScript代码去改动文本框的值，将不会触发<code>change</code>事件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var input = $(&#x27;#test-input&#x27;);</span><br><span class="line">input.val(&#x27;change it!&#x27;); // 无法触发change事件</span><br></pre></td></tr></table></figure>

<p>有些时候，我们希望用代码触发change事件，可以直接调用无参数的change()方法来触发该事件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var input = $(&#x27;#test-input&#x27;);</span><br><span class="line">input.val(&#x27;change it!&#x27;);</span><br><span class="line">input.change(); // 触发change事件</span><br></pre></td></tr></table></figure>
<p><code>input.change()</code>相当于<code>input.trigger(&#39;change&#39;)</code>，它是<code>trigger()</code>方法的简写。</p>
<p>为什么我们希望手动触发一个事件呢？如果不这么做，很多时候，我们就得写两份一模一样的代码。</p>
<h3 id="浏览器安全限制"><a href="#浏览器安全限制" class="headerlink" title="浏览器安全限制"></a>浏览器安全限制</h3><p>在浏览器中，有些JavaScript代码只有在用户触发下才能执行，例如，<code>window.open()</code>函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 无法弹出新窗口，将被浏览器屏蔽:</span><br><span class="line">$(function () &#123;</span><br><span class="line">    window.open(&#x27;/&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这些“敏感代码”只能由用户操作来触发：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var button1 = $(&#x27;#testPopupButton1&#x27;);</span><br><span class="line">var button2 = $(&#x27;#testPopupButton2&#x27;);</span><br><span class="line"></span><br><span class="line">function popupTestWindow() &#123;</span><br><span class="line">    window.open(&#x27;/&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">button1.click(function () &#123;</span><br><span class="line">    popupTestWindow();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">button2.click(function () &#123;</span><br><span class="line">    // 不立刻执行popupTestWindow()，3秒后执行:</span><br><span class="line">    setTimeout(popupTestWindow, 3000);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>当用户点击<code>button1</code>时，<code>click</code>事件被触发，由于<code>popupTestWindow()</code>在<code>click</code>事件处理函数内执行，这是浏览器允许的，而<code>button2</code>的<code>click</code>事件并未立刻执行<code>popupTestWindow()</code>，延迟执行的<code>popupTestWindow()</code>将被浏览器拦截。</p>
<h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><p>show &#x2F; hide<br>直接以无参数形式调用show()和hide()，会显示和隐藏DOM元素。但是，只要传递一个时间参数进去，就变成了动画：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var div = $(&#x27;#test-show-hide&#x27;);</span><br><span class="line">div.hide(3000); // 在3秒钟内逐渐消失</span><br></pre></td></tr></table></figure>
<p>时间以毫秒为单位，但也可以是’slow’，’fast’这些字符串,toggle()方法则根据当前状态决定是show()还是hide()。<br>show()和hide()是从左上角逐渐展开或收缩的，而slideUp()和slideDown()则是在垂直方向逐渐展开或收缩的。<br>fadeIn()和fadeOut()的动画效果是淡入淡出，也就是通过不断设置DOM元素的opacity属性来实现，而fadeToggle()则根据元素是否可见来决定下一步动作：</p>
<h4 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h4><p>如果上述动画效果还不能满足你的要求，那就祭出最后大招：animate()，它可以实现任意动画效果，我们需要传入的参数就是DOM元素最终的CSS状态和时间，jQuery在时间段内不断调整CSS直到达到我们设定的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var div = $(&#x27;#test-animate&#x27;);</span><br><span class="line">div.animate(&#123;</span><br><span class="line">    opacity: 0.25,</span><br><span class="line">    width: &#x27;256px&#x27;,</span><br><span class="line">    height: &#x27;256px&#x27;</span><br><span class="line">&#125;, 3000); // 在3秒钟内CSS过渡到设定值</span><br></pre></td></tr></table></figure>
<p>animate()还可以再传入一个函数，当动画结束时，该函数将被调用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var div = $(&#x27;#test-animate&#x27;);</span><br><span class="line">div.animate(&#123;</span><br><span class="line">    opacity: 0.25,</span><br><span class="line">    width: &#x27;256px&#x27;,</span><br><span class="line">    height: &#x27;256px&#x27;</span><br><span class="line">&#125;, 3000, function () &#123;</span><br><span class="line">    console.log(&#x27;动画已结束&#x27;);</span><br><span class="line">    // 恢复至初始状态:</span><br><span class="line">    $(this).css(&#x27;opacity&#x27;, &#x27;1.0&#x27;).css(&#x27;width&#x27;, &#x27;128px&#x27;).css(&#x27;height&#x27;, &#x27;128px&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="串行动画"><a href="#串行动画" class="headerlink" title="串行动画"></a>串行动画</h4><p>jQuery的动画效果还可以串行执行，通过delay()方法还可以实现暂停，这样，我们可以实现更复杂的动画效果，而代码却相当简单：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var div = $(&#x27;#test-animates&#x27;);</span><br><span class="line">// 动画效果：slideDown - 暂停 - 放大 - 暂停 - 缩小</span><br><span class="line">div.slideDown(2000)</span><br><span class="line">   .delay(1000)</span><br><span class="line">   .animate(&#123;</span><br><span class="line">       width: &#x27;256px&#x27;,</span><br><span class="line">       height: &#x27;256px&#x27;</span><br><span class="line">   &#125;, 2000)</span><br><span class="line">   .delay(1000)</span><br><span class="line">   .animate(&#123;</span><br><span class="line">       width: &#x27;128px&#x27;,</span><br><span class="line">       height: &#x27;128px&#x27;</span><br><span class="line">   &#125;, 2000);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="为什么有的动画没有效果"><a href="#为什么有的动画没有效果" class="headerlink" title="为什么有的动画没有效果"></a>为什么有的动画没有效果</h4><p>你可能会遇到，有的动画如slideUp()根本没有效果。这是因为jQuery动画的原理是逐渐改变CSS的值，如height从100px逐渐变为0。但是很多不是block性质的DOM元素，对它们设置height根本就不起作用，所以动画也就没有效果。</p>
<p>此外，jQuery也没有实现对background-color的动画效果，用animate()设置background-color也没有效果。这种情况下可以使用CSS3的transition实现动画效果。</p>
<h4 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h4><p>jQuery在全局对象<code>jQuery</code>（也就是<code>$</code>）绑定了<code>ajax()</code>函数，可以处理<code>AJAX</code>请求。<code>ajax(url, settings)</code>函数需要接收一个<code>URL</code>和一个可选的<code>settings</code>对象，常用的选项如下：</p>
<ul>
<li>async：是否异步执行AJAX请求，默认为true，千万不要指定为false；</li>
<li>method：发送的Method，缺省为’GET’，可指定为’POST’、’PUT’等；</li>
<li>contentType：发送POST请求的格式，默认值为<code>&#39;application/x-www-form-urlencoded; charset=UTF-8&#39;</code>，也可以指定为<code>text/plain</code>、<code>application/json</code>；</li>
<li>data：发送的数据，可以是字符串、数组或object。如果是<code>GET</code>请求，<code>data</code>将被转换成<code>query</code>附加到<code>URL</code>上，如果是<code>POST</code>请求，根据<code>contentType</code>把<code>data</code>序列化成合适的格式；</li>
<li>headers：发送的额外的HTTP头，必须是一个object；</li>
<li>dataType：接收的数据格式，可以指定为<code>&#39;html&#39;</code>、<code>&#39;xml&#39;</code>、<code>&#39;json&#39;</code>、<code>&#39;text&#39;</code>等，缺省情况下根据响应的<code>Content-Type</code>猜测。</li>
</ul>
<p>下面的例子发送一个GET请求，并返回一个JSON格式的数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var jqxhr = $.ajax(&#x27;/api/categories&#x27;, &#123;</span><br><span class="line">    dataType: &#x27;json&#x27;</span><br><span class="line">&#125;);</span><br><span class="line">// 请求已经发送了</span><br></pre></td></tr></table></figure>

<p>jQuery的jqXHR对象类似一个Promise对象，我们可以用链式写法来处理各种回调：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var jqxhr = $.ajax(&#x27;/api/categories&#x27;, &#123;</span><br><span class="line">    dataType: &#x27;json&#x27;</span><br><span class="line">&#125;).done(function (data) &#123;</span><br><span class="line">    ajaxLog(&#x27;成功, 收到的数据: &#x27; + JSON.stringify(data));</span><br><span class="line">&#125;).fail(function (xhr, status) &#123;</span><br><span class="line">    ajaxLog(&#x27;失败: &#x27; + xhr.status + &#x27;, 原因: &#x27; + status);</span><br><span class="line">&#125;).always(function () &#123;</span><br><span class="line">    ajaxLog(&#x27;请求完成: 无论成功或失败都会调用&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>get</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var jqxhr = $.get(&#x27;/path/to/resource&#x27;, &#123;</span><br><span class="line">    name: &#x27;Bob Lee&#x27;,</span><br><span class="line">    check: 1</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>第二个参数如果是object，jQuery自动把它变成query string然后加到URL后面，实际的URL是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/path/to/resource?name=Bob%20Lee&amp;check=1</span><br></pre></td></tr></table></figure>

<p>post<br>传入的第二个参数默认被序列化为<code>application/x-www-form-urlencoded</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var jqxhr = $.post(&#x27;/path/to/resource&#x27;, &#123;</span><br><span class="line">    name: &#x27;Bob Lee&#x27;,</span><br><span class="line">    check: 1</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>实际构造的数据<code>name=Bob%20Lee&amp;check=1</code>作为POST的<code>body</code>被发送<br>getJSON</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var jqxhr = $.getJSON(&#x27;/path/to/resource&#x27;, &#123;</span><br><span class="line">    name: &#x27;Bob Lee&#x27;,</span><br><span class="line">    check: 1</span><br><span class="line">&#125;).done(function (data) &#123;</span><br><span class="line">    // data已经被解析为JSON对象了</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="安全限制"><a href="#安全限制" class="headerlink" title="安全限制"></a>安全限制</h4><p>jQuery的AJAX完全封装的是JavaScript的AJAX操作，所以它的安全限制和前面讲的用JavaScript写AJAX完全一样。<br>如果需要使用JSONP，可以在<code>ajax()</code>中设置<code>jsonp: &#39;callback&#39;</code>，让jQuery实现JSONP跨域加载数据。</p>
<h4 id="编写jQuery插件"><a href="#编写jQuery插件" class="headerlink" title="编写jQuery插件"></a>编写jQuery插件</h4><p>给jQuery对象绑定一个新方法是通过扩展<code>$.fn</code>对象实现的。让我们来编写第一个扩展——<code>highlight1()</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$.fn.highlight1 = function () &#123;</span><br><span class="line">    // this已绑定为当前jQuery对象:</span><br><span class="line">    this.css(&#x27;backgroundColor&#x27;, &#x27;#fffceb&#x27;).css(&#x27;color&#x27;, &#x27;#d85030&#x27;);</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意到函数内部的<code>this</code>在调用时被绑定为jQuery对象，所以函数内部代码可以正常调用所有jQuery对象的方法。</p>
<p>为什么最后要<code>return this;</code>？因为jQuery对象支持链式操作，我们自己写的扩展方法也要能继续链式下去</p>
<p>带参数的扩张</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$.fn.highlight2 = function (options) &#123;</span><br><span class="line">    // 要考虑到各种情况:</span><br><span class="line">    // options为undefined</span><br><span class="line">    // options只有部分key</span><br><span class="line">    var bgcolor = options &amp;&amp; options.backgroundColor || &#x27;#fffceb&#x27;;</span><br><span class="line">    var color = options &amp;&amp; options.color || &#x27;#d85030&#x27;;</span><br><span class="line">    this.css(&#x27;backgroundColor&#x27;, bgcolor).css(&#x27;color&#x27;, color);</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于默认值的处理，我们用了一个简单的<code>&amp;&amp;</code>和<code>||</code>短路操作符，总能得到一个有效的值。<br>另一种方法是使用jQuery提供的辅助方法<code>$.extend(target, obj1, obj2, ...)</code>，它把多个<code>object</code>对象的属性合并到第一个<code>target</code>对象中，遇到同名属性，总是使用靠后的对象的值，也就是越往后优先级越高：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 把默认值和用户传入的options合并到对象&#123;&#125;中并返回:</span><br><span class="line">var opts = $.extend(&#123;&#125;, &#123;</span><br><span class="line">    backgroundColor: &#x27;#00a8e6&#x27;,</span><br><span class="line">    color: &#x27;#ffffff&#x27;</span><br><span class="line">&#125;, options);</span><br></pre></td></tr></table></figure>
<p>我们设定的默认值应该能允许用户修改,放全局变量肯定不合适，最佳地点是<code>$.fn.highlight2</code>这个函数对象本身</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$.fn.highlight = function (options) &#123;</span><br><span class="line">    // 合并默认值和用户设定值:</span><br><span class="line">    var opts = $.extend(&#123;&#125;, $.fn.highlight.defaults, options);</span><br><span class="line">    this.css(&#x27;backgroundColor&#x27;, opts.backgroundColor).css(&#x27;color&#x27;, opts.color);</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 设定默认值:</span><br><span class="line">$.fn.highlight.defaults = &#123;</span><br><span class="line">    color: &#x27;#d85030&#x27;,</span><br><span class="line">    backgroundColor: &#x27;#fff8de&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用户使用时，只需一次性设定默认值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$.fn.highlight.defaults.color = &#x27;#fff&#x27;;</span><br><span class="line">$.fn.highlight.defaults.backgroundColor = &#x27;#000&#x27;;</span><br></pre></td></tr></table></figure>

<p>编写一个jQuery插件的原则：</p>
<ol>
<li>给<code>$.fn</code>绑定函数，实现插件的代码逻辑；</li>
<li>插件函数最后要<code>return this;</code>以支持链式调用；</li>
<li>插件函数要有默认值，绑定在<code>$.fn.&lt;pluginName&gt;.defaults</code>上；</li>
<li>用户在调用时可传入设定值以便覆盖默认值。</li>
</ol>
<h4 id="针对特定元素的扩展"><a href="#针对特定元素的扩展" class="headerlink" title="针对特定元素的扩展"></a>针对特定元素的扩展</h4><p>jQuery对象的有些方法只能作用在特定DOM元素上，比如<code>submit()</code>方法只能针对<code>form</code>。</p>
<p>给所有指向外链的超链接加上跳转提示:<br>调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;#main a&#x27;).external();</span><br></pre></td></tr></table></figure>
<p>扩展方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$.fn.external = function () &#123;</span><br><span class="line">    // return返回的each()返回结果，支持链式调用:</span><br><span class="line">    return this.filter(&#x27;a&#x27;).each(function () &#123;</span><br><span class="line">        // 注意: each()内部的回调函数的this绑定为DOM本身!</span><br><span class="line">        var a = $(this);</span><br><span class="line">        var url = a.attr(&#x27;href&#x27;);</span><br><span class="line">        if (url &amp;&amp; (url.indexOf(&#x27;http://&#x27;)===0 || url.indexOf(&#x27;https://&#x27;)===0)) &#123;</span><br><span class="line">            a.attr(&#x27;href&#x27;, &#x27;#0&#x27;)</span><br><span class="line">             .removeAttr(&#x27;target&#x27;)</span><br><span class="line">             .append(&#x27; &lt;i class=&quot;uk-icon-external-link&quot;&gt;&lt;/i&gt;&#x27;)</span><br><span class="line">             .click(function () &#123;</span><br><span class="line">                if(confirm(&#x27;你确定要前往&#x27; + url + &#x27;？&#x27;)) &#123;</span><br><span class="line">                    window.open(url);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript之四面向对象编程</title>
    <url>/2024/07/31/JavaScript%E4%B9%8B%E5%9B%9B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<br />
  
<h2 id="说明，该学习内容来自廖雪峰老师—-JavaScript教程，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录"><a href="#说明，该学习内容来自廖雪峰老师—-JavaScript教程，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录" class="headerlink" title="说明，该学习内容来自廖雪峰老师—-JavaScript教程，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录!"></a>说明，该学习内容来自<a href="https://www.liaoxuefeng.com/wiki/1022910821149312">廖雪峰老师—-JavaScript教程</a>，欢迎访问原创者网站，本处仅仅作为防止自己遗忘的记录!</h2><br />
<br />
<br />
  
<ol>
<li><p>标准对象<br>在JavaScript的世界里，一切都是对象。<br>用<code>typeof</code>操作符获取对象的类型，它总是返回一个字符串<br>特别注意<code>null</code>的类型是<code>object</code>，<code>Array</code>的类型也是<code>object</code>，如果我们用<code>typeof</code>将无法区分出<code>null</code>、<code>Array</code>和通常意义上的<code>object</code>——<code>&#123;&#125;</code>。</p>
</li>
<li><p>包装对象<br>在JavaScript中，也区分标准类型和它的包装类型。包装对象用<code>new</code>创建，即类型<code>object</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var n = new Number(123); // 123,生成了新的包装类型</span><br><span class="line">var b = new Boolean(true); // true,生成了新的包装类型</span><br><span class="line">var s = new String(&#x27;str&#x27;); // &#x27;str&#x27;,生成了新的包装类型</span><br></pre></td></tr></table></figure>
<p>所以闲的蛋疼也不要使用包装对象！尤其是针对<code>string</code>类型！！！<br>如果我们在使用<code>Number</code>、<code>Boolean</code>和<code>String</code>时，没有写<code>new</code>，此时，<code>Number()</code>、<code>Boolean</code>和<code>String()</code>被当做普通函数，把任何类型的数据转换为<code>number</code>、<code>boolean</code>和<code>string</code>类型（注意不是其包装类型）</p>
</li>
</ol>
<p>总结一下，有这么几条规则需要遵守：</p>
<ul>
<li>不要使用<code>new Number()</code>、<code>new Boolean()</code>、<code>new String()</code>创建包装对象；</li>
<li>用<code>parseInt()</code>或<code>parseFloat()</code>来转换任意类型到<code>number</code>；</li>
<li>用<code>String()</code>来转换任意类型到<code>string</code>，或者直接调用某个对象的<code>toString()</code>方法；</li>
<li>通常不必把任意类型转换为<code>boolean</code>再判断，因为可以直接写<code>if (myVar) &#123;...&#125;</code>；</li>
<li><code>typeof</code>操作符可以判断出<code>number</code>、<code>boolean</code>、<code>string</code>、<code>function</code>和<code>undefined</code>；</li>
<li>判断<code>Array</code>要使用<code>Array.isArray(arr)</code>；</li>
<li>判断<code>null</code>请使用<code>myVar === null</code>；</li>
<li>判断某个全局变量是否存在用<code>typeof window.myVar === &#39;undefined&#39;</code>；</li>
<li>函数内部判断某个变量是否存在用<code>typeof myVar === &#39;undefined&#39;</code>。</li>
</ul>
<p>最后有细心的同学指出，任何对象都有<code>toString()</code>方法吗？<code>null</code>和<code>undefined</code>就没有！确实如此，这两个特殊值要除外，虽然<code>null</code>还伪装成了<code>object</code>类型。<br><code>number</code>对象调用<code>toString()</code>报<code>SyntaxError</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123.toString(); // SyntaxError</span><br></pre></td></tr></table></figure>
<p>遇到这种情况，要特殊处理一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123..toString(); // &#x27;123&#x27;, 注意是两个点！</span><br><span class="line">(123).toString(); // &#x27;123&#x27;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Date</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var d1 = new Date(2015, 5, 19, 20, 15, 30, 123);</span><br><span class="line">var d2 = Date.parse(&#x27;2015-06-24T19:49:22.875+08:00&#x27;);  // 1435146562875</span><br><span class="line">var d3 = new Date(d2); // Wed Jun 24 2015 19:49:22 GMT+0800 (CST)</span><br></pre></td></tr></table></figure>
<p>JavaScript的月份范围用整数表示是0~11，0表示一月，1表示二月……<br>Date对象表示的时间总是按浏览器所在时区显示的<br>时间戳是一个自增的整数，它表示从1970年1月1日零时整的GMT时区开始的那一刻，到现在的毫秒数。时间戳可以精确地表示一个时刻，并且与时区无关。</p>
<ol start="4">
<li>RegExp<br>单个字符</li>
</ol>
<ul>
<li><code>\d</code>可以匹配一个数字，</li>
<li><code>\w</code>可以匹配一个字母或数字,</li>
<li><code>.</code>可以匹配任意字符,</li>
<li><code>\s</code>可以匹配一个空格（也包括Tab等空白符）</li>
</ul>
<p>变长的字符</p>
<ul>
<li><code>*</code>表示任意个字符（包括0个），</li>
<li><code>+</code>表示至少一个字符，</li>
<li><code>?</code>表示0个或1个字符，</li>
<li><code>&#123;n&#125;</code>表示n个字符，</li>
<li><code>&#123;n,m&#125;</code>表示n-m个字符</li>
</ul>
<p>特殊字符，在正则表达式中，要用<code>&#39;\&#39;</code>转义</p>
<ul>
<li><code>&#39;-&#39;</code></li>
</ul>
<p>进阶  </p>
<ul>
<li><code>[]</code>表示范围</li>
<li><code>A|B</code>可以匹配A或B</li>
<li><code>^</code>表示行的开头</li>
<li><code>$</code>表示行的结束</li>
<li><code>()</code>表示的就是要提取的分组（Group）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//匹配&#x27;ABC-001&#x27;或者&#x27;ABC\-001&#x27;,re1=/ABC-001/也可以匹配这两项</span><br><span class="line">var re1 = /ABC\-001/;  //  &quot;/正则表达式/&quot;写出来</span><br><span class="line">var re2 = new RegExp(&#x27;ABC\\-001&#x27;);  // new RegExp(&#x27;正则表达式&#x27;)创建一个RegExp对象。</span><br><span class="line">re1 .test(&#x27;ABC-001&#x27;)    // true</span><br><span class="line">re1 .test(&#x27;ABC\-001&#x27;)  // true</span><br><span class="line">&#x27;a,b;; c  d&#x27;.split(/[\s\,\;]+/); // [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span><br><span class="line">var re = /^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$/;</span><br><span class="line">re.exec(&#x27;010-12345&#x27;); // [&#x27;010-12345&#x27;, &#x27;010&#x27;, &#x27;12345&#x27;]，也可以分组&#x27;010\-12345&#x27;</span><br><span class="line">re.exec(&#x27;010 12345&#x27;); // null</span><br></pre></td></tr></table></figure>

<p>贪婪匹配和非贪婪匹配</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var re = /^(\d+)(0*)$/;</span><br><span class="line">re.exec(&#x27;102300&#x27;); // [&#x27;102300&#x27;, &#x27;102300&#x27;, &#x27;&#x27;],贪婪匹配</span><br><span class="line">var re = /^(\d+?)(0*)$/;</span><br><span class="line">re.exec(&#x27;102300&#x27;); // [&#x27;102300&#x27;, &#x27;1023&#x27;, &#x27;00&#x27;]，加个?可以让\d+采用非贪婪匹配</span><br></pre></td></tr></table></figure>

<p>特殊标志</p>
<ul>
<li>g标志，表示全局匹配</li>
<li>i标志，表示忽略大小写，</li>
<li>m标志，表示执行多行匹配</li>
</ul>
<p>多次执行exec()方法来搜索一个匹配的字符串。每次运行exec()，正则表达式本身会更新lastIndex属性，表示上次匹配到的最后索引<br>使用<code>/^...$/</code>，那样只会最多匹配一次</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var r1 = /test/g;</span><br><span class="line">var r2 = new RegExp(&#x27;test&#x27;, &#x27;g&#x27;);</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>JSON<br>JSON是JavaScript Object Notation的缩写，它是一种数据交换格式。为道格拉斯·克罗克福特（Douglas Crockford）2002年发明。<br>字符集必须是<code>UTF-8</code>，JSON的字符串也规定必须用双引号<code>&quot;&quot;</code>，<code>Object</code>的键也必须用双引号<code>&quot;&quot;</code>。</li>
</ol>
<p>数据类型：</p>
<ul>
<li><code>number</code>：和JavaScript的<code>number</code>完全一致；</li>
<li><code>boolean</code>：就是JavaScript的<code>true</code>或<code>false</code>；</li>
<li><code>string</code>：就是JavaScript的<code>string</code>；</li>
<li><code>null</code>：就是JavaScript的<code>null</code>；</li>
<li><code>array</code>：就是JavaScript的Array表示方式——<code>[]</code>；</li>
<li><code>object</code>：就是JavaScript的<code>&#123; ... &#125;</code>表示方式。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(JSON.stringify(xiaoming));</span><br><span class="line"></span><br><span class="line">// 第二个参数用于控制如何筛选对象的键值</span><br><span class="line">console.log(JSON.stringify(xiaoming, null, &#x27;  &#x27;));</span><br><span class="line">// 传入Array,输出指定的属性</span><br><span class="line">console.log(JSON.stringify(xiaoming, [&#x27;name&#x27;, &#x27;skills&#x27;], &#x27;  &#x27;));</span><br><span class="line">// 传入一个函数</span><br><span class="line">function convert(key, value) &#123;</span><br><span class="line">    if (typeof value === &#x27;string&#x27;) &#123;</span><br><span class="line">        return value.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">    return value;</span><br><span class="line">&#125;</span><br><span class="line">console.log(JSON.stringify(xiaoming, convert, &#x27;  &#x27;));</span><br></pre></td></tr></table></figure>

<p>自定义<code>toJSON()</code>方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var xiaoming = &#123;</span><br><span class="line">    name: &#x27;小明&#x27;,</span><br><span class="line">    age: 14,</span><br><span class="line">    gender: true,</span><br><span class="line">    height: 1.65,</span><br><span class="line">    grade: null,</span><br><span class="line">    &#x27;middle-school&#x27;: &#x27;\&quot;W3C\&quot; Middle School&#x27;,</span><br><span class="line">    skills: [&#x27;JavaScript&#x27;, &#x27;Java&#x27;, &#x27;Python&#x27;, &#x27;Lisp&#x27;],</span><br><span class="line">    toJSON: function () &#123;</span><br><span class="line">        return &#123; // 只输出name和age，并且改变了key：</span><br><span class="line">            &#x27;Name&#x27;: this.name,</span><br><span class="line">            &#x27;Age&#x27;: this.age</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(JSON.stringify(xiaoming)); // &#x27;&#123;&quot;Name&quot;:&quot;小明&quot;,&quot;Age&quot;:14&#125;&#x27;</span><br></pre></td></tr></table></figure>

<p>反序列化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JSON.parse(&#x27;&#123;&quot;name&quot;:&quot;小明&quot;,&quot;age&quot;:14&#125;&#x27;)</span><br><span class="line">JSON.parse(&#x27;true&#x27;); </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Java读取Properties</title>
    <url>/2024/07/31/Java%E8%AF%BB%E5%8F%96Properties/</url>
    <content><![CDATA[<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上次最后打开的文件:</span></span><br><span class="line"><span class="attr">last_open_file</span>=<span class="string">/data/hello.txt</span></span><br><span class="line"><span class="comment"># 自动保存文件的时间间隔:</span></span><br><span class="line"><span class="attr">auto_save_interval</span>=<span class="string">60</span></span><br></pre></td></tr></table></figure>

<p>方法一: 属性设置必须位于<code>src/main/resources/setting.properties</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;user.dir:   &quot;</span> + System.getProperty(<span class="string">&quot;user.dir&quot;</span>));</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> App.class.getResourceAsStream(<span class="string">&quot;/setting.properties&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;resourceAsStream path:  &quot;</span>+App.class.getResource(<span class="string">&quot;&quot;</span>).getPath());</span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        properties.load(resourceAsStream);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pathField</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;last_open_file&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">intervalField</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;auto_save_interval&quot;</span>, <span class="string">&quot;120&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;pathField: &quot;</span> + pathField + <span class="string">&quot;,  intervalField: &quot;</span> + intervalField);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法二：此时<code>setting.properties</code>需要放在项目根目录，与<code>src</code>目录同级别</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;setting.properties&quot;</span>;</span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath));</span><br><span class="line">        <span class="type">String</span> <span class="variable">pathField</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;last_open_file&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">intervalField</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;auto_save_interval&quot;</span>, <span class="string">&quot;120&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;pathField: &quot;</span> + pathField + <span class="string">&quot;, intervalField: &quot;</span> + intervalField);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux删除个别外的所有文件</title>
    <url>/2024/07/31/Linux%E5%88%A0%E9%99%A4%E4%B8%AA%E5%88%AB%E5%A4%96%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>删除当前目录下，除“Logs”外的 所有文件和文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -maxdepth 1 -not -name &#x27;Logs&#x27; -delete</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm !(important.txt)</span><br><span class="line">rm !(*.txt)</span><br><span class="line">rm !(h*)</span><br><span class="line">rm [0-9]*</span><br><span class="line">rm !([0-9]*)</span><br><span class="line">rm [a-c]*</span><br><span class="line">rm -f $(find . -maxdepth 1 -type f -name &quot;*&quot; ! -name &quot;important.txt&quot;)</span><br><span class="line">rm -rf $(find . -name &quot;*&quot; ! -name &quot;important.txt&quot;)</span><br><span class="line">find . -maxdepth 1 -type f ! -name &quot;important.txt&quot; -exec rm &#123;&#125; \;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux批量终止进程</title>
    <url>/2024/07/31/Linux%E6%89%B9%E9%87%8F%E7%BB%88%E6%AD%A2%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> $(ps aux|grep <span class="string">&#x27;[d]otnet Eson.MMS.API.dll&#x27;</span> |awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">ps -aux|grep java|grep -v grep | awk <span class="string">&#x27;&#123; print $2&#125;&#x27;</span> |xargs -t <span class="built_in">kill</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux监控文件超量错误</title>
    <url>/2024/07/31/Linux%E7%9B%91%E6%8E%A7%E6%96%87%E4%BB%B6%E8%B6%85%E9%87%8F%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>临时</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> fs.inotify.max_user_watches=524288</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> fs.inotify.max_user_watches=524288 | <span class="built_in">sudo</span> <span class="built_in">tee</span> -a /etc/sysctl.conf &amp;&amp; <span class="built_in">sudo</span> sysctl -p</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MD5的C#实现</title>
    <url>/2024/07/31/MD5%E7%9A%84C-%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="一、16位实现方法"><a href="#一、16位实现方法" class="headerlink" title="一、16位实现方法"></a>一、16位实现方法</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 16位MD5加密</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strForEncrypt&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">EncryptTo16BitMD5</span>(<span class="params"><span class="built_in">string</span> strForEncrypt</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    MD5 md5 = <span class="keyword">new</span> MD5CryptoServiceProvider();</span><br><span class="line">    <span class="built_in">string</span> result = BitConverter.ToString(md5.ComputeHash(Encoding.Default.GetBytes(strForEncrypt)), <span class="number">4</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result.Replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二、32位实现方法"><a href="#二、32位实现方法" class="headerlink" title="二、32位实现方法"></a>二、32位实现方法</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 32位MD5加密</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strForEncrypt&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">EncryptTo32BitMD5</span>(<span class="params"><span class="built_in">string</span> strForEncrypt</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//注意和16位的区别？？？</span></span><br><span class="line">    MD5 md5 = MD5.Create();</span><br><span class="line">    <span class="built_in">byte</span>[] s = md5.ComputeHash(Encoding.UTF8.GetBytes(strForEncrypt));</span><br><span class="line"></span><br><span class="line">    StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; s.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        result.Append(s[i].ToString(<span class="string">&quot;X3&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result.ToString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven使用</title>
    <url>/2024/07/30/Maven%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>原创者<a href="https://www.jianshu.com/p/b4ef9978d85d">Maven 入门指南</a><br>官方资料<a href="http://maven.apache.org/guides/getting-started/index.html#">Maven Getting Started Guide</a></p>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mvn <span class="literal">-B</span> <span class="string">&quot;archetype:generate&quot;</span> <span class="string">&quot;-DarchetypeGroupId=org.apache.maven.archetypes&quot;</span>  <span class="string">&quot;-DgroupId=com.mycompany.app&quot;</span>  <span class="string">&quot;-DartifactId=my-app&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> 参数要使用引号<code>&quot;&quot;</code>包起来。如下命令在Windows系统无法运行成功</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mvn <span class="literal">-B</span> archetype:generate  <span class="literal">-DarchetypeGroupId</span>=org.apache.maven.archetypes  <span class="literal">-DgroupId</span>=com.mycompany.app  <span class="literal">-DartifactId</span>=my<span class="literal">-app</span></span><br></pre></td></tr></table></figure>

<p>若停止在<code>Generating project in Batch mode</code>，是因为要使用<a href="https://repo.maven.apache.org/maven2/archetype-catalog.xml">archetype-catalog.xml</a>文件，可以先下载下来，放在<code>D:\PackagesRepository\Java\org\apache\maven\archetype\archetype-catalog\3.2.0\</code>目录下面，然后在执行命令的时候，添加参数<code>&quot;-DarchetypeCatalog=local&quot;</code>,以使用下载的本地<code>archetype-catalog.xml</code>文件。</p>
<h2 id="IntelliJ-IDEA中设置"><a href="#IntelliJ-IDEA中设置" class="headerlink" title="IntelliJ IDEA中设置"></a>IntelliJ IDEA中设置</h2><p>“Build,Execution,Deployment”—&gt;”Build Tools”—&gt;”Maven”—&gt;”Runner”—&gt;”Properties”添加属性</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">-DarchetypeCatalog</span>=internal</span><br></pre></td></tr></table></figure>

<h2 id="指定编码和JAVA版本"><a href="#指定编码和JAVA版本" class="headerlink" title="指定编码和JAVA版本"></a>指定编码和JAVA版本</h2><p>编辑<code>pom.xml</code>，指定编码和JAVA版本，否则，可能导致使用Windows系统的默认<code>GBK</code>编码和<code>不再支持源选项 5。请使用 6 或更高版本。不再支持目标选项 1.5。请使用 1.6 或更高版本。</code>错误。</p>
<p>JDK 8和之前的版本</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>JDK 9和之后的版本</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.release</span>&gt;</span>9<span class="tag">&lt;/<span class="name">maven.compiler.release</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>特别的针对Spring项目，添加如下属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>针对<code>maven-compiler-plugin</code> 组件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加如下代码以使jar包可以执行，否则会报错<code>jar中没有主清单属性</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--修改编译出来的jar包名，仅为&#123;artifactId&#125;.jar--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 此处为主入口,如有包名，需要填写完整路径--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>org.example.App<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>执行jar包的命令为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar xxx.jar</span><br></pre></td></tr></table></figure>

<h2 id="包冲突"><a href="#包冲突" class="headerlink" title="包冲突"></a>包冲突</h2><h3 id="如何产生？"><a href="#如何产生？" class="headerlink" title="如何产生？"></a>如何产生？</h3><p>例如：</p>
<blockquote>
<p>A-&gt;B-&gt;C-&gt;D1<br>E-&gt;F-&gt;D2</p>
</blockquote>
<p>假设D1,D2分别为 D 的不同版本。如果 <code>pom.xml</code> 文件中引入了 <code>A</code> 和 <code>E</code> 之后，按照 Maven 传递依赖原则，工程内需要引入的实际 Jar 包将会有：A B C D1 和 E F D2，因此 D1,D2 将会产生包冲突。</p>
<h3 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h3><p>Maven 解析 <code>pom.xml</code> 文件时，同一个 <code>jar</code> 包只会保留一个，这样有效的避免因引入两个 <code>jar</code> 包导致的工程运行不稳定性。</p>
<h4 id="Maven-默认处理策略"><a href="#Maven-默认处理策略" class="headerlink" title="Maven 默认处理策略"></a>Maven 默认处理策略</h4><ul>
<li><p>最短路径优先<br>Maven 面对 D1 和 D2 时，会默认选择最短路径的那个 jar 包，即 D2。E-&gt;F-&gt;D2 比 A-&gt;B-&gt;C-&gt;D1 路径短 1。</p>
</li>
<li><p>最先声明优先<br>如果路径一样的话，例如： A-&gt;B-&gt;C1, E-&gt;F-&gt;C2 ，两个依赖路径长度都是 2，那么就选择最先声明。</p>
</li>
<li><p>移除依赖<br>如果我们不想通过 A-&gt;B-&gt;-&gt;D1 引入 D1 的话，那么我们在声明引入 A 的时候将 D1 排除掉，这样也避免了包冲突。<br>例如：将 zookeeper 的 jline 依赖排除</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jline<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jline<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="检测工具"><a href="#检测工具" class="headerlink" title="检测工具"></a>检测工具</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mvn dependency:help</span><br><span class="line">mvn dependency:analyze</span><br><span class="line">mvn dependency:tree</span><br><span class="line">mvn dependency:tree <span class="literal">-Dverbose</span></span><br></pre></td></tr></table></figure>

<h2 id="依赖管理解决什么问题"><a href="#依赖管理解决什么问题" class="headerlink" title="依赖管理解决什么问题"></a>依赖管理解决什么问题</h2><p>当同一个工程内有多个模块时，并且要求多个模块使用某个 <code>jar</code> 包的相同版本，为了方便统一版本号，升级版本号，需要提取出一个父亲模块来管理子模块共同依赖的 <code>jar</code> 包版本。</p>
<p>例如：有两个模块 projectA, projectB，它们的依赖分别如下所示</p>
<p>projectA</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>group-a<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>artifact-a<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>group-c<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>excluded-artifact<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>group-d<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>artifact-a<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>projectB</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>group-b<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>artifact-b<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>war<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>group-d<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>artifact-a<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>projectA 和 projectB 共同依赖了 <code>group-d/artifact-a/1.0</code>，提取公共依赖，生成 <code>parent(group-c,artifact-a)</code>， parent 依赖如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>group-d<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>artifact-a<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>则 projectA 和 projectB 均不需要指定 <code>group-d/artifact-a</code> 的 <code>version</code> 信息，未来升级 <code>version</code> 信息时，只需要在 parent 内部指定。</p>
<p>projectA:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>group-a<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>artifact-a<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>group-c<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>excluded-artifact<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>group-c<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>artifact-a<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>projectB:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>group-c<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>artifact-b<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>war<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>group-c<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>artifact-a<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h2><p>如果不显示执行 <code>&lt;scope&gt;</code> 属性时，默认 <code>&lt;scope&gt;compile&lt;/scope&gt;</code>。</p>
<p><code>scope</code> 有如下属性：<code>compile</code>, <code>provided</code>, <code>runtime</code>, <code>test</code>, <code>system</code> 等。详细参考：<a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Scope">依赖范围</a></p>
<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol>
<li>项目中源代码使用的 <code>jar</code> 包一定在 <code>pom.xml</code> 中显示引用。</li>
<li>经常 <code>check</code> 一下包冲突，检查是否需要处理。</li>
<li>当使用多个模块时，parent 一定要使用包管理模块来规范 <code>Jar</code> 包版本，而不是包依赖模块直接引入依赖。 <code>dependencyManagement</code> vs <code>dependencies</code></li>
</ol>
<h2 id="打包插件"><a href="#打包插件" class="headerlink" title="打包插件"></a>打包插件</h2><table>
<thead>
<tr>
<th>插件</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>maven-jar-plugin</td>
<td>maven 默认打包插件，用来创建 project jar</td>
</tr>
<tr>
<td>maven-shade-plugin</td>
<td>用来打可执行包，executable(fat) jar</td>
</tr>
<tr>
<td>maven-assembly-plugin</td>
<td>支持定制化打包方式，例如 apache 项目的打包方式</td>
</tr>
</tbody></table>
<h3 id="maven-shade-plugin使用"><a href="#maven-shade-plugin使用" class="headerlink" title="maven-shade-plugin使用"></a>maven-shade-plugin使用</h3><h4 id="基本打包"><a href="#基本打包" class="headerlink" title="基本打包"></a>基本打包</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- put your configurations here --&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的设置将 goal shade:shade 绑定到 phase package 上。执行命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure>

<h4 id="将该工程依赖的部分-Jar-包-include-exclude-掉"><a href="#将该工程依赖的部分-Jar-包-include-exclude-掉" class="headerlink" title="将该工程依赖的部分 Jar 包 include&#x2F;exclude 掉"></a>将该工程依赖的部分 Jar 包 include&#x2F;exclude 掉</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- put your configurations here --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactSet</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>classworlds:classworlds<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>junit:junit<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>jmock:*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>*:xml-apis<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>org.apache.maven:lib:tests<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>log4j:log4j:jar:<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">artifactSet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="将依赖的某个-Jar-包内部的类或者资源-include-exclude-掉"><a href="#将依赖的某个-Jar-包内部的类或者资源-include-exclude-掉" class="headerlink" title="将依赖的某个 Jar 包内部的类或者资源 include/exclude 掉"></a>将依赖的某个 <code>Jar</code> 包内部的类或者资源 <code>include/exclude</code> 掉</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- put your configurations here --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifact</span>&gt;</span>junit:junit<span class="tag">&lt;/<span class="name">artifact</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">include</span>&gt;</span>junit/framework/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">include</span>&gt;</span>org/junit/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>org/junit/experimental/**<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>org/junit/runners/**<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifact</span>&gt;</span>*:*<span class="tag">&lt;/<span class="name">artifact</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.SF<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.DSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.RSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="maven-shade-plugin-自动将所有不使用的类全部排除掉，将-jar-最小化"><a href="#maven-shade-plugin-自动将所有不使用的类全部排除掉，将-jar-最小化" class="headerlink" title="maven-shade-plugin 自动将所有不使用的类全部排除掉，将 jar 最小化"></a>maven-shade-plugin 自动将所有不使用的类全部排除掉，将 <code>jar</code> 最小化</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- put your configurations here --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">minimizeJar</span>&gt;</span>true<span class="tag">&lt;/<span class="name">minimizeJar</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>默认会生成一个Jar包和一个以 <code>-shaded</code>为结尾的<code>uber-jar</code>包，可以通过配置来指定<code>jar</code>的后缀名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- put your configurations here --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shadedArtifactAttached</span>&gt;</span>true<span class="tag">&lt;/<span class="name">shadedArtifactAttached</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Any name that makes sense --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shadedClassifierName</span>&gt;</span>jackofall<span class="tag">&lt;/<span class="name">shadedClassifierName</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="通过设置-MainClass-创建一个可执行-Jar-包"><a href="#通过设置-MainClass-创建一个可执行-Jar-包" class="headerlink" title="通过设置 MainClass 创建一个可执行 Jar 包"></a>通过设置 MainClass 创建一个可执行 Jar 包</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- put your configurations here --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">transformer</span> <span class="attr">implementation</span>=<span class="string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>org.sonatype.haven.HavenCli<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Java 工程经常会遇到第三方 <code>Jar</code> 包冲突，使用 <code>maven shade plugin</code> 解决 <code>jar</code> 或类的多版本冲突。 <code>maven-shade-plugin</code> 在打包时，可以将项目中依赖的 <code>jar</code> 包中的一些类文件打包到项目构建生成的 <code>jar</code> 包中，在打包的时候把类重命名。下面的配置将 <code>org.codehaus.plexus.util</code> <code>jar</code>包重命名为 <code>org.shaded.plexus.util</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- put your configurations here --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relocations</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">relocation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>org.codehaus.plexus.util<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">shadedPattern</span>&gt;</span>org.shaded.plexus.util<span class="tag">&lt;/<span class="name">shadedPattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>org.codehaus.plexus.util.xml.Xpp3Dom<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>org.codehaus.plexus.util.xml.pull.*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">relocation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">relocations</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven打包可执行jar</title>
    <url>/2024/07/31/Maven%E6%89%93%E5%8C%85%E5%8F%AF%E6%89%A7%E8%A1%8Cjar/</url>
    <content><![CDATA[<p>默认 Maven 项目打包后无法使用<code>java -jar xxx.jar</code>运行，需要使用<code>maven-shade-plugin</code>插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--默认生成original和shade的jar包,使用此行，仅生成shade的jar包--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;pom.basedir&#125;/target/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">transformer</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">implementation</span>=<span class="string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>设置主类<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL之GroupBy</title>
    <url>/2024/07/31/MySQL%E4%B9%8BGroupBy/</url>
    <content><![CDATA[<p>SQL 标准中不允许 <code>SELECT</code> 列表，<code>HAVING</code> 条件语句，或 <code>ORDER BY</code> 语句中出现 <code>GROUP BY</code> 中未列表的可聚合列。而 MySQL 中有一个状态 <code>ONLY_FULL_GROUP_BY</code> 来标识是否遵从这一标准，默认为开启状态。</p>
<p>查看变更前的<code>sql_mode</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@sql_mode</span>;</span><br></pre></td></tr></table></figure>

<p>会话停用<code>ONLY_FULL_GROUP_BY</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> SESSION sql_mode<span class="operator">=</span>(<span class="keyword">SELECT</span> REPLACE(@<span class="variable">@sql_mode</span>,<span class="string">&#x27;ONLY_FULL_GROUP_BY,&#x27;</span>,<span class="string">&#x27;&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>全局配置，编辑<code>/etc/my.cnf</code>文件</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">sql_mode<span class="operator">=</span>STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis打印SQL日志</title>
    <url>/2024/07/31/MyBatis%E6%89%93%E5%8D%B0SQL%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<ol>
<li>编辑“mybatis.config.xml”或“mybatis-config.xml”，内容为</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD SQL Map Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>SpringBoot的“application.yaml”里增加配置</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL快速生成数据字典</title>
    <url>/2024/07/31/MySQL%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%AD%97%E5%85%B8/</url>
    <content><![CDATA[<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="comment">--     t.TABLE_SCHEMA AS 库名,</span></span><br><span class="line"><span class="comment">--     t.TABLE_NAME AS 表名,</span></span><br><span class="line">    t.COLUMN_NAME <span class="keyword">AS</span> <span class="string">&#x27;字段名&#x27;</span>,</span><br><span class="line">    t.COLUMN_TYPE <span class="keyword">AS</span> <span class="string">&#x27;数据类型&#x27;</span>,</span><br><span class="line">    <span class="keyword">CASE</span> t.COLUMN_KEY </span><br><span class="line">		<span class="keyword">WHEN</span> <span class="string">&#x27;PRI&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;是&#x27;</span></span><br><span class="line">        <span class="keyword">ELSE</span> <span class="string">&#x27;否&#x27;</span> <span class="keyword">END</span> <span class="keyword">AS</span> <span class="string">&#x27;是否主键&#x27;</span>,</span><br><span class="line">    <span class="keyword">CASE</span> IFNULL(t.COLUMN_DEFAULT,<span class="string">&#x27;Null&#x27;</span>) </span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;空字符串&#x27;</span> </span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">&#x27;Null&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;NULL&#x27;</span> </span><br><span class="line">        <span class="keyword">ELSE</span> t.COLUMN_DEFAULT <span class="keyword">END</span>  <span class="keyword">AS</span> <span class="string">&#x27;默认值&#x27;</span>,</span><br><span class="line">    <span class="keyword">CASE</span> t.IS_NULLABLE <span class="keyword">WHEN</span> <span class="string">&#x27;YES&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;是&#x27;</span> <span class="keyword">ELSE</span> <span class="string">&#x27;否&#x27;</span> <span class="keyword">END</span> <span class="keyword">AS</span> <span class="string">&#x27;是否允许为空&#x27;</span>,</span><br><span class="line">    t.COLUMN_COMMENT <span class="keyword">AS</span> <span class="string">&#x27;字段说明&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> information_schema.COLUMNS t </span><br><span class="line"><span class="keyword">WHERE</span> t.TABLE_SCHEMA<span class="operator">=</span><span class="string">&#x27;substation-platform&#x27;</span> <span class="keyword">AND</span> t.TABLE_NAME<span class="operator">=</span><span class="string">&#x27;biz_audio_device&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>SELECT后的几个属性库名、表名也可以灵活选择。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL找回root密码</title>
    <url>/2024/07/31/MySQL%E6%89%BE%E5%9B%9Eroot%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">service mysql-server stop</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysqld_safe --skip-grant-tables  &amp;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql -u root</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">use mysql;</span></span><br><span class="line">​mysql&gt; update user set authentication_string=password(&#x27;NEWPASSWORD&#x27;) where user=&#x27;root&#x27;; # 在MySQL 5.7中为&quot;authentication_string&quot;字段，没有Password字段</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified with mysql_native_password by <span class="string">&#x27;frank&#x27;</span>; <span class="comment"># mysql 8.0修改密码的方法</span></span></span><br><span class="line">​mysql&gt; flush privileges;</span><br><span class="line">​mysql&gt; quit</span><br></pre></td></tr></table></figure>

<h3 id="重置MySQL密码"><a href="#重置MySQL密码" class="headerlink" title="重置MySQL密码"></a>重置MySQL密码</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><ol>
<li><p>首先确认服务器出于安全的状态，也就是没有人能够任意地连接MySQL数据库。 因为在重新设置MySQL的root密码的期间，MySQL数据库完全出于没有密码保护的 状态下，其他的用户也可以任意地登录和修改MySQL的信息。可以采用将MySQL对外的端口封闭，并且停止Apache以及所有的用户进程的方法实现服务器的准安全状态。最安全的状态是到服务器的Console上面操作，并且拔掉网线。</p>
</li>
<li><p>修改MySQL的登录设置：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vi /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新启动mysqld</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/etc/init.d/mysqld restart  <span class="comment">#或service mysqld restart</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>登录并修改MySQL的root密码</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">USE mysql ;</span> </span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">UPDATE user SET Password = password ( <span class="string">&#x27;new-password&#x27;</span> ) WHERE User = <span class="string">&#x27;root&#x27;</span> ; <span class="comment"># 在MySQL 5.7中   为&quot;authentication_string&quot;字段，没有Password字段</span></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified with mysql_native_password by <span class="string">&#x27;frank&#x27;</span>; <span class="comment"># mysql 8.0修改密码的    方法</span></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">flush privileges ;</span> </span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">quit</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将MySQL的登录设置修改回来</p>
</li>
<li><p>重新启动mysqld</p>
</li>
<li><p>恢复服务器的正常工作状态，即将步骤一中的操作逆向操作。恢复服务器的工作状态。</p>
</li>
</ol>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><ol>
<li><p>KILL掉系统里的MySQL进程；</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">killall -TERM mysqld</span><br></pre></td></tr></table></figure>
</li>
<li><p>用以下命令启动MySQL，以不检查权限的方式启动；</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">safe_mysqld --skip-grant-tables &amp;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后用空密码方式使用root用户登录 MySQL；</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改root用户的密码；</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">update mysql.user <span class="built_in">set</span> password=PASSWORD(<span class="string">&#x27;新密码&#x27;</span>) <span class="built_in">where</span> User=<span class="string">&#x27;root&#x27;</span>;  <span class="comment"># 在MySQL 5.7中为    &quot;authentication_string&quot;字段，没有Password字段</span></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified with mysql_native_password by <span class="string">&#x27;frank&#x27;</span>; <span class="comment"># mysql 8.0修改密码的    方法</span></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">flush privileges;</span> </span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">quit</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重新启动MySQL，就可以使用新密码登录了</p>
</li>
</ol>
<h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>如果系统没有 safe_mysqld 程序(比如Ubuntu, apt-get安装的mysql) , 可使用此法</p>
<ol>
<li><p>停止mysqld；</p>
</li>
<li><p>用以下命令启动MySQL，以不检查权限的方式启动；</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqld --skip-grant-tables &amp;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后用空密码方式使用root用户登录 MySQL</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改root用户的密码</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">update mysql.user <span class="built_in">set</span> password=PASSWORD(<span class="string">&#x27;newpassword&#x27;</span>) <span class="built_in">where</span> User=<span class="string">&#x27;root&#x27;</span>;  <span class="comment"># 在MySQL 5.7中为   &quot;authentication_string&quot;字段，没有Password字段</span></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified with mysql_native_password by <span class="string">&#x27;frank&#x27;</span>; <span class="comment"># mysql 8.0修改密码的    方法</span></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">flush privileges;</span> </span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">quit</span> </span><br></pre></td></tr></table></figure>
</li>
<li><p>重新启动MySQL</p>
</li>
</ol>
<h3 id="情况四"><a href="#情况四" class="headerlink" title="情况四"></a>情况四</h3><p>在安装完mysql过程中没有创建用户名，然后无法登录的情况下，可以查看<code>/etc/mysql/debian.cnf</code>，用里面的 <code>username</code>和<code>password</code>登录<br>如果设置完<code>root</code>的密码还发生错误</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR 1698 (28000): Access denied for user &#x27;root&#x27;@&#x27;localhost&#x27;</span><br></pre></td></tr></table></figure>

<p>用上面的账户查看mysql的密码策略</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>,host,plugin,authentication_string <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> plugin<span class="operator">=</span><span class="string">&#x27;mysql_native_password&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span>; # 默认`auth_socket`,系统账户密码；修改为`mysql_native_password`,使用mysql自己的账户系统</span><br></pre></td></tr></table></figure>

<p>实际上，方法一、方法二、方法三原理相同</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL日志查询</title>
    <url>/2024/07/31/MySQL%E6%97%A5%E5%BF%97%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p>– 查看mysql 执行语句记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM mysql.general_log ORDER BY event_time desc LIMIT 20;</span><br><span class="line"></span><br><span class="line">SELECT *, CONVERT(argument USING utf8) FROM mysql.general_log where command_type = &#x27;Query&#x27; and user_host like &#x27;%[192.168.1.110]&#x27; ORDER BY event_time desc</span><br></pre></td></tr></table></figure>
<p>– 清空Mysql 执行语句记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TRUNCATE TABLE mysql.general_log;</span><br></pre></td></tr></table></figure>

<p>– 查看mysql 慢日志记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM mysql.slow_log;</span><br></pre></td></tr></table></figure>
<p>– 清空 MySql慢查询日志记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TRUNCATE TABLE mysql.slow_log;</span><br></pre></td></tr></table></figure>

<p>– 查看环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW variables LIKE &#x27;%genera%&#x27;；</span><br></pre></td></tr></table></figure>

<p>– 设置环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set GLOBAL general_log=1;</span><br></pre></td></tr></table></figure>

<p>– 查询是否锁表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW OPEN TABLES WHERE in_use&gt;0 ;</span><br><span class="line"></span><br><span class="line">SHOW OPEN TABLES </span><br></pre></td></tr></table></figure>

<p>– 查看当前数据库中执行的情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW PROCESSLIST;</span><br><span class="line"></span><br><span class="line">SELECT * FROM information_schema.`PROCESSLIST` WHERE info	is NOT  NULL and time&gt;100;</span><br></pre></td></tr></table></figure>
<p>– 打开日志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET GLOBAL general_log=1;</span><br></pre></td></tr></table></figure>

<p>– 设置日志存放在表里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET GLOBAL log_output=&#x27;TABLE&#x27;;</span><br></pre></td></tr></table></figure>
<p>– 设置日志存放在表里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET GLOBAL log_output=&#x27;FILE&#x27;;</span><br><span class="line"></span><br><span class="line">-- </span><br><span class="line">SHOW VARIABLES LIKE &#x27;%log_output%&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL时间全0错误</title>
    <url>/2024/07/31/MySQL%E6%97%B6%E9%97%B4%E5%85%A80%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@sql_mode</span>;</span><br><span class="line"><span class="comment">-- STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span></span><br><span class="line"><span class="comment">-- 去掉 &quot;NO_ZERO_IN_DATE&quot;和&quot;NO_ZERO_DATE&quot;</span></span><br><span class="line"><span class="keyword">set</span> @<span class="variable">@sql_mode</span> <span class="operator">=</span> <span class="string">&#x27;STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#x27;</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL构造连续日期</title>
    <url>/2024/07/31/MySQL%E6%9E%84%E9%80%A0%E8%BF%9E%E7%BB%AD%E6%97%A5%E6%9C%9F/</url>
    <content><![CDATA[<p>方式一：借助自带表<code>mysql.help_topic</code></p>
<p>mysql自带表<code>mysql.help_topic</code>的<code>help_topic_id</code>是一个从 0-657 的顺序id序列。一些连续性不长的操作可以借助该表。</p>
<p>获取自某天开始的前10天</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	DATE_FORMAT(DATE_ADD(<span class="string">&#x27;2022-07-15&#x27;</span>, <span class="type">INTERVAL</span> <span class="operator">-</span>t.help_topic_id <span class="keyword">DAY</span> ), <span class="string">&#x27;%Y-%m-%d&#x27;</span> ) <span class="keyword">AS</span> <span class="string">&#x27;date&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	mysql.help_topic t </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	t.help_topic_id <span class="operator">&lt;</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>数据表根据时间 年-月-日 格式分组统计行数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	DATE_FORMAT(<span class="type">date</span>, <span class="string">&#x27;%Y-%m-%d&#x27;</span>) <span class="keyword">AS</span> <span class="type">date</span>,</span><br><span class="line">	<span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">AS</span> <span class="string">&#x27;count&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	test</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">	DATE_FORMAT(<span class="type">date</span>, <span class="string">&#x27;%Y-%m-%d&#x27;</span> )</span><br></pre></td></tr></table></figure>

<p>聚合</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t1.date,IFNULL(t2.count,<span class="number">0</span>) <span class="keyword">AS</span> <span class="string">&#x27;count&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	DATE_FORMAT(DATE_ADD(<span class="string">&#x27;2019-08-20&#x27;</span>, <span class="type">INTERVAL</span> <span class="operator">-</span>t.help_topic_id <span class="keyword">DAY</span> ), <span class="string">&#x27;%Y-%m-%d&#x27;</span> ) <span class="keyword">AS</span> <span class="type">date</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	mysql.help_topic t </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	t.help_topic_id <span class="operator">&lt;</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">) t1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	DATE_FORMAT(<span class="type">date</span>, <span class="string">&#x27;%Y-%m-%d&#x27;</span>) <span class="keyword">AS</span> <span class="type">date</span>,</span><br><span class="line">	<span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">AS</span> <span class="string">&#x27;count&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	test</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">	DATE_FORMAT(<span class="type">date</span>, <span class="string">&#x27;%Y-%m-%d&#x27;</span> )</span><br><span class="line">) t2 <span class="keyword">ON</span> t1.date<span class="operator">=</span>t2.date</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> t1.date</span><br></pre></td></tr></table></figure>

<p>方式二: 构造一个足够大的id顺序序列的临时表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="variable">@xi</span>:<span class="operator">=</span><span class="variable">@xi</span><span class="operator">+</span><span class="number">1</span> <span class="keyword">as</span> xc </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">3</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">4</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">5</span>) xc1, </span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">3</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">4</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">5</span>) xc2,  </span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="variable">@xi</span>:<span class="operator">=</span><span class="number">0</span>) xc0</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ol>
<li><code>FROM</code>后边的 <code>(SELECT @xi:=0) xc0</code> 是定义<code>@xi</code>的初始值为<code>0</code>，当然也可根据需要定义为其他值。还可以通过<code>ORDER BY xc LIMIT 3,5</code>之类控制需要的序列。</li>
<li>两个<code>UNION</code>是为了计算具体多少个数据。上面的示例表示计算 5*5&#x3D;25个数据。</li>
</ol>
<p>计算上月及之前的24个月（共25个）的时间</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	DATE_FORMAT(DATE_SUB( NOW(), <span class="type">INTERVAL</span> xc <span class="keyword">MONTH</span> ), <span class="string">&#x27;%Y-%m&#x27;</span> ) <span class="keyword">AS</span> <span class="type">date</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	(</span><br><span class="line">	<span class="keyword">SELECT</span></span><br><span class="line">		<span class="variable">@xi</span> :<span class="operator">=</span> <span class="variable">@xi</span> <span class="operator">+</span> <span class="number">1</span> <span class="keyword">AS</span> xc </span><br><span class="line">	<span class="keyword">FROM</span></span><br><span class="line">		( <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">3</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">4</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">5</span> ) xc1,</span><br><span class="line">		( <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">3</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">4</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">5</span> ) xc2,</span><br><span class="line">		( <span class="keyword">SELECT</span> <span class="variable">@xi</span> :<span class="operator">=</span> <span class="number">0</span> ) xc0 </span><br><span class="line">	) xcxc</span><br></pre></td></tr></table></figure>

<p>使用<code>DATE_SUB</code>函数，切换<code>MONTH</code>为<code>DAY</code>或<code>WEEK</code>可计算对应的连续周期</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql字符串拆分实现split功能</title>
    <url>/2024/07/31/MySql%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%86%E5%88%86%E5%AE%9E%E7%8E%B0split%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="comment">-- 因为表连接，所以有几个逗号就会出现几行相同的行，只是help_topic_id不一样；</span></span><br><span class="line"><span class="comment">-- 当help_topic_id=0 时，获取第1个逗号左边的值；为1时获取第2个逗号与第1个逗号之间的值，为2时获取第3个逗号与第2个逗号之间的值，以此类推</span></span><br><span class="line">SUBSTRING_INDEX(SUBSTRING_INDEX(<span class="string">&#x27;7654,7698,7782,7788&#x27;</span>,<span class="string">&#x27;,&#x27;</span>,help_topic_id<span class="operator">+</span><span class="number">1</span>),<span class="string">&#x27;,&#x27;</span>,<span class="number">-1</span>) <span class="keyword">AS</span> num  </span><br><span class="line"><span class="keyword">FROM</span> mysql.help_topic </span><br><span class="line"><span class="comment">-- 判断有几个逗号，就生成几个相同的但help_topic_id的行</span></span><br><span class="line"><span class="keyword">WHERE</span> help_topic_id <span class="operator">&lt;</span> LENGTH(<span class="string">&#x27;7654,7698,7782,7788&#x27;</span>)<span class="operator">-</span>LENGTH(  REPLACE(<span class="string">&#x27;7654,7698,7782,7788&#x27;</span>,<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;&#x27;</span>)  )<span class="operator">+</span><span class="number">1</span> </span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/gered/p/10797012.html">mysql字符串拆分实现split功能</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js开发环境</title>
    <url>/2024/07/31/Node-js%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<ol>
<li><p>卸载所有Node.js安装,并删除路径<code>C:\Program Files (x86)\nodejs</code>和<code>C:\Program Files\nodejs</code></p>
</li>
<li><p>下载<a href="https://github.com/coreybutler/nvm-windows">nvm-noinstall</a></p>
</li>
<li><p>解压到希望安装的目录<code>D:\ProgramFiles\nvm-noinstall</code></p>
</li>
<li><p>设置环境变量<code>NVM_HOME</code>为<code>D:\ProgramFiles\nvm-noinstall</code>，<code>NVM_SYMLINK</code>为<code>D:\ProgramFiles\nvm-noinstall\Node.js</code>(Node.js应该是不存在的目录)</p>
</li>
<li><p>将环境变量<code>%NVM_HOME%</code>和<code>%NVM_SYMLINK%</code>加到<code>Path</code>中</p>
</li>
<li><p>添加配置文件<code>D:\ProgramFiles\nvm-noinstall\settings.txt</code></p>
 <figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">root: D:\ProgramFiles\nvm-noinstall</span><br><span class="line">path: D:\ProgramFiles\nvm-noinstall\Node.js</span><br><span class="line">arch: 64</span><br><span class="line">proxy: none</span><br><span class="line">node_mirror： https://mirrors.aliyun.com/nodejs-release/</span><br><span class="line">npm_mirror: http://registry.npmmirror.com</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>nvm</code>基本使用</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">nvm install lts</span><br><span class="line">nvm current</span><br><span class="line">nvm list</span><br><span class="line">nvm list available</span><br><span class="line">nvm install <span class="number">14</span> <span class="literal">--lts</span></span><br><span class="line">nvm use version   <span class="comment"># 需要管理员权限</span></span><br><span class="line">nvm uninstall</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换到具体<code>Node.js</code>版本后</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">node <span class="literal">--version</span></span><br><span class="line">npm <span class="literal">--version</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br><span class="line">npm install <span class="literal">-g</span> yarn yrm </span><br><span class="line">yrm add ali https://registry.npmmirror.com <span class="comment"># 使用阿里镜像,原来的taobao镜像</span></span><br><span class="line">yrm use ali</span><br></pre></td></tr></table></figure>
</li>
<li><p>Linux安装如下，使用基本同上</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br></pre></td></tr></table></figure>

<p> 或者</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br></pre></td></tr></table></figure>

<p> <a href="https://github.com/nvm-sh/nvm">Node Version Manager</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js编译无法使用vs2022</title>
    <url>/2024/07/31/Node-js%E7%BC%96%E8%AF%91%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8vs2022/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd &quot;C:\Program Files\nodejs&quot;</span><br><span class="line">cd node_modules\npm\node_modules\@npmcli\run-script</span><br><span class="line">npm install node-gyp@latest</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm cache clean --force</span><br><span class="line">rmrf.ps1 node_modules</span><br><span class="line">rmrf.ps1 package-lock.json yarn.lock</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>参考</p>
<ol>
<li><a href="https://github.com/nodejs/node-gyp/blob/master/docs/Updating-npm-bundled-node-gyp.md">Updating the npm-bundled version of node-gyp</a></li>
<li><a href="https://stackoverflow.com/questions/54532854/error-c-program-files-x86-microsoft-visual-studio-2017-buildtools-msbuild-1">Error: <code>C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\MSBuild\15.0\Bin\MSBuild.exe</code> failed with exit code: 1</a></li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>NuGet相关</title>
    <url>/2024/07/31/NuGet%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h2 id="一、-NuGet常规设置"><a href="#一、-NuGet常规设置" class="headerlink" title="一、 NuGet常规设置"></a>一、 NuGet常规设置</h2><table>
<thead>
<tr>
<th>Scope</th>
<th>NuGet.Config file location</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>Solution</td>
<td>Current folder (aka Solution folder) or any folder up to the drive root.</td>
<td>In a solution folder, settings apply to all projects in subfolders. Note that if a config file is placed in a project folder, it has no effect on that project.</td>
</tr>
<tr>
<td>User</td>
<td>Windows:<br> <code>%appdata%\NuGet\NuGet.Config</code><br> Mac&#x2F;Linux:<br> <code>~/.config/NuGet/NuGet.Config</code> or<br> <code>~/.nuget/NuGet/NuGet.Config</code> (varies by OS distribution)</td>
<td>Settings apply to all operations, but are overridden by any project-level settings.</td>
</tr>
<tr>
<td>Computer</td>
<td>Windows: <code>%ProgramFiles(x86)%\NuGet\Config</code><br>Mac&#x2F;Linux: <code>$XDG_DATA_HOME</code>.<br> If <code>$XDG_DATA_HOME</code> is <code>null</code> or <code>empty</code>, <code>~/.local/share</code> or <code>/usr/local/share</code> will be used (varies by OS distribution)</td>
<td>Settings apply to all operations on the computer, but are overridden by any user- or project-level settings.</td>
</tr>
</tbody></table>
<br>

<blockquote>
<p>Notes for earlier versions of NuGet:</p>
<ul>
<li>NuGet 3.3 and earlier used a <code>.nuget</code> folder for solution-wide settings. This folder is not used in NuGet 3.4+.</li>
<li>For NuGet 2.6 to 3.x, the computer-level config file on Windows was located in <code>%ProgramData%\NuGet\Config[\&#123;IDE&#125;[\&#123;Version&#125;[\&#123;SKU&#125;]]]\NuGet.Config</code>, where <code>&#123;IDE&#125;</code> can be VisualStudio, <code>&#123;Version&#125;</code> was the Visual Studio version such as 14.0, and <code>&#123;SKU&#125;</code> is either Community, Pro, or Enterprise. To migrate settings to NuGet 4.0+, simply copy the config file to <code>%ProgramFiles(x86)%\NuGet\Config</code>. On Linux, this previous location was <code>/etc/opt</code>, and on Mac, <code>/Library/Application Support</code>.</li>
</ul>
</blockquote>
<br>

<h3 id="Changing-config-settings"><a href="#Changing-config-settings" class="headerlink" title="Changing config settings"></a>Changing config settings</h3><p>A NuGet.Config file is a simple XML text file containing key&#x2F;value pairs as described in the <a href="https://docs.microsoft.com/en-us/nuget/reference/nuget-config-file">NuGet Configuration Settings</a> topic.</p>
<p>Settings are managed using the NuGet CLI config command:</p>
<ul>
<li>By default, changes are made to the user-level config file.</li>
<li>To change settings in a different file, use the -configFile switch. In this case files can use any filename.</li>
<li><em>Keys are always case sensitive</em>.</li>
<li>Elevation is required to change settings in the computer-level settings file.</li>
</ul>
<h2 id="二、-NuGet保存位置设置"><a href="#二、-NuGet保存位置设置" class="headerlink" title="二、 NuGet保存位置设置"></a>二、 NuGet保存位置设置</h2><h3 id="1-设定global‑packages"><a href="#1-设定global‑packages" class="headerlink" title="1. 设定global‑packages"></a>1. 设定<code>global‑packages</code></h3><p>环境变量<code>NUGET_PACKAGES</code>设为<code>D:\PackagesRepository\CSharp\NuGet</code></p>
<p>默认情况下：</p>
<ul>
<li>Windows: <code>%userprofile%\.nuget\packages</code></li>
<li>Mac&#x2F;Linux: <code>~/.nuget/packages</code></li>
</ul>
<h3 id="2-设定http‑cache"><a href="#2-设定http‑cache" class="headerlink" title="2. 设定http‑cache"></a>2. 设定<code>http‑cache</code></h3><p>环境变量<code>NUGET_HTTP_CACHE_PATH </code>设为<code>D:\PackagesRepository\CSharp\NuGetHttpCache</code></p>
<p>默认情况下:</p>
<ul>
<li>Windows: <code>%localappdata%\NuGet\v3-cache</code></li>
<li>Mac&#x2F;Linux: <code>~/.local/share/NuGet/v3-cache</code></li>
</ul>
<h3 id="3-设定temp-NuGet操作临时文件夹"><a href="#3-设定temp-NuGet操作临时文件夹" class="headerlink" title="3. 设定temp,NuGet操作临时文件夹"></a>3. 设定<code>temp</code>,NuGet操作临时文件夹</h3><ul>
<li>Windows: <code>%temp%\NuGetScratch</code></li>
<li>Mac&#x2F;Linux: <code>/tmp/NuGetScratch</code></li>
</ul>
<h3 id="4-设定plugins-cache-4-8-NuGet操作结果缓存"><a href="#4-设定plugins-cache-4-8-NuGet操作结果缓存" class="headerlink" title="4. 设定plugins-cache(4.8+),NuGet操作结果缓存"></a>4. 设定<code>plugins-cache</code>(4.8+),NuGet操作结果缓存</h3><p><code>NUGET_PLUGINS_CACHE_PATH</code>设定为<code>D:\PackagesRepository\CSharp\NuGetPluginsCache</code></p>
<p>默认情况下:</p>
<ul>
<li>Windows: <code>%localappdata%\NuGet\plugins-cache</code></li>
<li>Mac&#x2F;Linux: <code>~/.local/share/NuGet/plugins-cache</code></li>
</ul>
<blockquote>
<p>Note<br>NuGet 3.5 and earlier uses <code>packages-cache</code> instead of the <code>http-cache</code>, which is located in <code>%localappdata%\NuGet\Cache</code>.</p>
</blockquote>
<p>By using the cache and global-packages folders, NuGet generally avoids downloading packages that already exist on the computer, improving the performance of install, update, and restore operations. When using PackageReference, the global-packages folder also avoids keeping downloaded packages inside project folders, where they might be inadvertently added to source control, and reduces NuGet’s overall impact on computer storage.</p>
<p>When asked to retrieve a package, NuGet first looks in the global-packages folder. If the exact version of package is not there, then NuGet checks all non-HTTP package sources. If the package is still not found, NuGet looks for the package in the http-cache unless you specify –no-cache with dotnet.exe commands or -NoCache with nuget.exe commands. If the package is not in the cache, or the cache isn’t used, NuGet then retrieves the package over HTTP .</p>
<p>For more information, see <a href="https://docs.microsoft.com/en-us/nuget/concepts/package-installation-process">What happens when a package is installed?</a>.</p>
<h3 id="5-命令"><a href="#5-命令" class="headerlink" title="5. 命令"></a>5. 命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nuget locals all -list</span><br><span class="line">dotnet nuget locals all --list</span><br><span class="line">nuget local -h</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>Python之json序列化</title>
    <url>/2024/07/31/Python%E4%B9%8Bjson%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<p>一般Python元素,</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">json.dumps(l)</span><br></pre></td></tr></table></figure>

<p>一般<code>class</code>对象,利用对象的<code>__dict__</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,score</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name=name</span><br><span class="line">        <span class="variable language_">self</span>.score=score</span><br><span class="line"></span><br><span class="line">a=Animal(<span class="string">&#x27;cat&#x27;</span>,<span class="number">80</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;animal&#x27;</span>,json.dumps(a.__dict__))</span><br></pre></td></tr></table></figure>

<p>SQLALchemy表映射对象，需要添加自己的方法<code>to_json</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__=<span class="string">&#x27;sys_user&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">id</span> = Column(String,primary_key=<span class="literal">True</span>)</span><br><span class="line">    username= Column(String)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_json</span>(<span class="params">self</span>):</span><br><span class="line">       <span class="keyword">return</span> &#123;c.name: <span class="built_in">getattr</span>(<span class="variable language_">self</span>, c.name) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="variable language_">self</span>.__table__.columns&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;user&#x27;</span>,user.to_json())</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLProfiler工具简介</title>
    <url>/2024/07/31/SQLProfiler%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>转自<a href="https://www.cnblogs.com/kissdodog/p/3398523.html">SQL Server Profiler工具</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>SQL Server</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLServer WMI错误</title>
    <url>/2024/07/31/SQLServer-WMI%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>以管理员身份在CMD中运行以下命令即可。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mofcomp <span class="string">&quot;sqlmgmprovider.mof&quot;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://support.microsoft.com/zh-cn/help/956013/error-message-when-you-open-sql-server-configuration-manager-in-sql-se">在 SQL Server 中打开 SQL Server 配置管理器时出现错误消息:”无法连接到 WMI 提供程序。您没有权限或该服务器不可用”</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>SQL Server</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLServer数据类型映射</title>
    <url>/2024/07/31/SQLServer%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%98%A0%E5%B0%84/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th></th>
<th>SQL Server 类型</th>
<th>.NET 类型</th>
<th>C# Primitive</th>
</tr>
</thead>
<tbody><tr>
<td>准确数字类型</td>
<td>bit</td>
<td>System.Boolean</td>
<td>bool</td>
</tr>
<tr>
<td></td>
<td>tinyint</td>
<td>System.Byte</td>
<td>byte</td>
</tr>
<tr>
<td></td>
<td>smallint</td>
<td>System.Int16</td>
<td>short</td>
</tr>
<tr>
<td></td>
<td>int</td>
<td>System.Int32</td>
<td>int</td>
</tr>
<tr>
<td></td>
<td>bigint</td>
<td>System.Int64</td>
<td>long</td>
</tr>
<tr>
<td></td>
<td>smallmoney、money、decimal、numeric</td>
<td>System.Decimal</td>
<td>decimal</td>
</tr>
<tr>
<td>近似数字类型</td>
<td>real</td>
<td>System.Single</td>
<td>float</td>
</tr>
<tr>
<td></td>
<td>float</td>
<td>System.Double</td>
<td>double</td>
</tr>
<tr>
<td>字符串类型</td>
<td>char、varchar、text</td>
<td>System.String</td>
<td>string</td>
</tr>
<tr>
<td></td>
<td>nchar、nvarhcar、ntext</td>
<td>System.String</td>
<td>string</td>
</tr>
<tr>
<td>二进制字符串类型</td>
<td>binary、varbinary</td>
<td>System.Byte[]</td>
<td>byte[]</td>
</tr>
<tr>
<td></td>
<td>image</td>
<td>System.Byte[]</td>
<td>byte[]</td>
</tr>
<tr>
<td></td>
<td>rowversion(timestamp)</td>
<td>System.Byte[]</td>
<td>byte[]</td>
</tr>
<tr>
<td>日期类型</td>
<td>date</td>
<td>System.DateTime</td>
<td></td>
</tr>
<tr>
<td></td>
<td>time</td>
<td>Ststem.TimeSpan</td>
<td></td>
</tr>
<tr>
<td></td>
<td>smalldatetime、datetime、datetime2</td>
<td>System.DateTime</td>
<td></td>
</tr>
<tr>
<td></td>
<td>datetimeoffset</td>
<td>System.DateTimeOffset</td>
<td></td>
</tr>
<tr>
<td>其他类型</td>
<td>hierarchyid</td>
<td>No built-in mapping or support</td>
<td></td>
</tr>
<tr>
<td></td>
<td>xml</td>
<td>System.String</td>
<td>string</td>
</tr>
<tr>
<td></td>
<td>uniqueidtentifier</td>
<td>System.Guid</td>
<td></td>
</tr>
<tr>
<td></td>
<td>sql_variant</td>
<td>No built-in mappting or support</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLServer的CommandText的最大长度</title>
    <url>/2024/07/31/SQLServer%E7%9A%84CommandText%E7%9A%84%E6%9C%80%E5%A4%A7%E9%95%BF%E5%BA%A6/</url>
    <content><![CDATA[<p>SQLCommand的CommandText的最大长度,取决于SQL Server版本</p>
<p>SQL Server 2012、2016、2017的默认最大值为65,536*网络数据包大小，而网络数据包大小默认是4K，可由“网络数据包大小”配置选项控制</p>
<p>参考:<br><a href="https://stackoverflow.com/questions/21390537/sqlcommand-executenonquery-maximum-commandtext-length">SQLCommand ExecuteNonQuery Maximum CommandText Length?</a><br><a href="https://docs.microsoft.com/zh-cn/sql/sql-server/maximum-capacity-specifications-for-sql-server?view=sql-server-2017">SQL Server 的最大容量规范</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>SQL Server</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBootTest激活配置设置</title>
    <url>/2024/07/31/SpringBootTest%E6%BF%80%E6%B4%BB%E9%85%8D%E7%BD%AE%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>一般使用如下方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ActiveProfiles(&quot;dev&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnitTest</span>&#123;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但这个方法无法读取”spring.profiles.active”的值<br>可通过如下方法设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(properties = &quot;spring.profiles.active:dev-txs&quot;, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnitTest</span>&#123;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring项目Redis乱码</title>
    <url>/2024/07/31/Spring%E9%A1%B9%E7%9B%AERedis%E4%B9%B1%E7%A0%81/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span>&#123;</span><br><span class="line"></span><br><span class="line">        RedisTemplate&lt;String,Object&gt; redisTemplate=<span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">        redisTemplate.setKeySerializer(RedisSerializer.string());</span><br><span class="line">        redisTemplate.setValueSerializer(jacksonSerializer());</span><br><span class="line"></span><br><span class="line">        redisTemplate.setHashKeySerializer(RedisSerializer.string());</span><br><span class="line">        redisTemplate.setHashValueSerializer(jacksonSerializer());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisSerializer <span class="title function_">jacksonSerializer</span><span class="params">()</span>&#123;</span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        <span class="comment">//设置类名的存储方式</span></span><br><span class="line">        <span class="comment">// objectMapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.WRAPPER_ARRAY);</span></span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line">        <span class="keyword">return</span> jackson2JsonRedisSerializer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>默认</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 `redis-cli` 终端中</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; scan 0</span><br><span class="line">1) <span class="string">&quot;0&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;\xac\xed\x00\x05t\x00\x05yunai&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; get <span class="string">&quot;\xac\xed\x00\x05t\x00\x05yunai&quot;</span></span><br><span class="line"><span class="string">&quot;\xac\xed\x00\x05t\x00\x05shuai&quot;</span></span><br></pre></td></tr></table></figure>

<p>通过 Redis SCAN 命令，我们扫描出了一个奇怪的 “yunai” KEY ，前面带着奇怪的 16 进制字符。而后，我们使用这个奇怪的 KEY 去获取对应的 VALUE ，结果前面也是一串奇怪的 16 进制字符。</p>
<p>具体为什么是这样一串奇怪的 16 进制，胖友可以看看 ObjectOutputStream#writeString(String str, boolean unshared) 的代码，实际就是标志位 + 字符串长度 + 字符串内容。</p>
<p>参考</p>
<ol>
<li><a href="https://my.oschina.net/u/4394698/blog/4339964">Spring Boot 结合 Redis 序列化配置的一些问题</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/92492295">芋道 Spring Boot Redis 入门（上）</a></li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SqlServer删除重复记录</title>
    <url>/2024/07/31/SqlServer%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="有两个意义上的重复记录"><a href="#有两个意义上的重复记录" class="headerlink" title="有两个意义上的重复记录:"></a>有两个意义上的重复记录:</h3><ul>
<li>完全重复的记录，也即所有字段均重复的记录；</li>
<li>部分关键字段重复的记录，比如Name字段重复，而其他字段不一定重复或都重复可以忽略。</li>
</ul>
<h4 id="1、对于第一种重复，比较容易解决，使用"><a href="#1、对于第一种重复，比较容易解决，使用" class="headerlink" title="1、对于第一种重复，比较容易解决，使用"></a>1、对于第一种重复，比较容易解决，使用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT * INTO #TMP FROM TableName</span><br></pre></td></tr></table></figure>
<p>就可以得到无重复记录的结果集。<br>如果该表需要删除重复的记录（重复记录保留1条），可以按以下方法删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT * INTO #TMP FROM TableName </span><br><span class="line">DROP TABLE TableName</span><br><span class="line">SELECT * INTO TableName FROM #TMP</span><br><span class="line">DROP TABLE #TMP</span><br></pre></td></tr></table></figure>
<p>发生这种重复的原因是表设计不周产生的，增加唯一索引列即可解决。</p>
<h4 id="2、这类重复问题通常要求保留重复记录中的第一条记录，操作方法如下"><a href="#2、这类重复问题通常要求保留重复记录中的第一条记录，操作方法如下" class="headerlink" title="2、这类重复问题通常要求保留重复记录中的第一条记录，操作方法如下"></a>2、这类重复问题通常要求保留重复记录中的第一条记录，操作方法如下</h4><p>假设有重复的字段为Name,Address，要求得到这两个字段唯一的结果集，<br>则先利用<code>IDENTITY</code>增加能标识出唯一行的<code>AutoId</code>字段，再利用<code>GROUP BY</code>过滤重复及<code>MIN</code>函数选出最小的<code>AutoID</code>值（相同值即去除了，得到了唯一性），最后利用这个<code>AutoId</code>重建TableName，即可去重</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT IDENTITY(int,1,1) AS AutoId,* INTO #Tmp FROM TableName</span><br><span class="line">SELECT MIN(AutoId) as AutoId INTO #Tmp2 FROM #Tmp GROUP BY Name,Address</span><br><span class="line">DROP TABLE TableName</span><br><span class="line">SELECT [原TableName表所有列名] INTO TableName  FROM #Tmp WHERE autoID IN (SELECT autoID FROM #Tmp2)</span><br><span class="line">DROP TABLE #Tmp,#Tmp2</span><br></pre></td></tr></table></figure>
<p>注意:倒数第二行的SQL语句，若<code>SELECT</code>后面跟<code>*</code>则会在原TabeName表多出<code>AutoId</code>字段</p>
<h4 id="3、部分关键字段重复，且记录中有ID"><a href="#3、部分关键字段重复，且记录中有ID" class="headerlink" title="3、部分关键字段重复，且记录中有ID"></a>3、部分关键字段重复，且记录中有ID</h4><p>A、第一种方法可一次删除所有重复的..(只保留重复中ID最小的记录)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM TableName WHERE Id NOT IN (SELECT MIN(ID) FROM TableName GROUP BY Name)</span><br></pre></td></tr></table></figure>
<p>B、每次只删除重复中ID最大的一条记录(如果含有关键字段的行大于一行，则删除删除一行;相反，如果含有关键字段的行没有大于一行，则不进行删除操作)。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM TableName WHERE Id IN (SELECT MAX(ID) FROM TableName GROUP BY Name HAVING COUNT(*)&gt;1)</span><br></pre></td></tr></table></figure>

<h4 id="4、其他方法"><a href="#4、其他方法" class="headerlink" title="4、其他方法"></a>4、其他方法</h4><p>参见<a href="http://www.cnblogs.com/luohoufu/archive/2008/06/05/1214286.html">Sql server 删除重复记录的SQL语句</a>，感谢博主的分享！</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>SQL Server</tag>
      </tags>
  </entry>
  <entry>
    <title>Swagger显示默认值</title>
    <url>/2024/07/31/Swagger%E6%98%BE%E7%A4%BA%E9%BB%98%E8%AE%A4%E5%80%BC/</url>
    <content><![CDATA[<ol>
<li>增加<code>SchemaFilter.cs</code></li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SchemaFilter</span> : <span class="title">ISchemaFilter</span></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Apply</span>(<span class="params">Schema schema, SchemaFilterContext context</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span> (schema.Properties == <span class="literal">null</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">foreach</span> (PropertyInfo propertyInfo <span class="keyword">in</span> context.SystemType.GetProperties())</span><br><span class="line">          &#123;</span><br><span class="line"></span><br><span class="line">              <span class="comment">// Look for class attributes that have been decorated with &quot;[DefaultAttribute(...)]&quot;.</span></span><br><span class="line">              DefaultValueAttribute defaultAttribute = propertyInfo.GetCustomAttribute&lt;DefaultValueAttribute&gt;();</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (defaultAttribute != <span class="literal">null</span>)</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="keyword">foreach</span> (KeyValuePair&lt;<span class="built_in">string</span>, Schema&gt; property <span class="keyword">in</span> schema.Properties)</span><br><span class="line">                  &#123;</span><br><span class="line"></span><br><span class="line">                      <span class="comment">// Only assign default value to the proper element.</span></span><br><span class="line">                      <span class="keyword">if</span> (propertyInfo.Name.ToLower() == property.Key.Replace(<span class="string">&quot;_&quot;</span>, <span class="string">&quot;&quot;</span>).ToLower())</span><br><span class="line">                      &#123;</span><br><span class="line">                          property.Value.Example = defaultAttribute.Value;</span><br><span class="line">                          <span class="keyword">break</span>;</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在Startup.cs里注入</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddSwaggerGen(c =&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    c.SchemaFilter&lt;SchemaFilter&gt;();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>参考<a href="https://github.com/domaindrivendev/Swashbuckle.AspNetCore/issues/575">[Feature] DefaultValue for operation parameters defined by class</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>TDD之程序员练功房</title>
    <url>/2024/07/31/TDD%E4%B9%8B%E7%A8%8B%E5%BA%8F%E5%91%98%E7%BB%83%E5%8A%9F%E6%88%BF/</url>
    <content><![CDATA[<h3 id="第一天：练功前的热身"><a href="#第一天：练功前的热身" class="headerlink" title="第一天：练功前的热身"></a>第一天：练功前的热身</h3><p>第一天的任务很简单：做一遍<a href="http://codingdojo.org/kata/FizzBuzz/">FizzBuzz</a>这道题。</p>
<p>做题要求：</p>
<ol>
<li>看懂题目，开始编码之前先花十分钟拆解任务，把任务清单写下来。</li>
<li>计时，开始编码。</li>
<li>要求用TDD的方式实现：先写测试，后写代码</li>
<li>注意这个题目有两个阶段需求。第一阶段和第二阶段完成时，分别看一下时间。</li>
</ol>
<p>这道题，行业里平均水平的程序员大概1-2小时完成。一些水平较高的程序员能在15分钟内完成。</p>
<p>练功房的学员，很多人能在5分钟内完成。目前的最快速度是1分10秒</p>
<p>跟着我们把这14天练下去，你也能做到。</p>
<p>打卡内容（可选，非必须）</p>
<ul>
<li>做完整道题用了多少时间？</li>
<li>代码质量怎么样？</li>
<li>TDD的方式顺畅吗？</li>
<li>实际做的步骤，和一开始拆分的任务是否相同？</li>
</ul>
<h3 id="第二天：整理工作环境"><a href="#第二天：整理工作环境" class="headerlink" title="第二天：整理工作环境"></a>第二天：整理工作环境</h3><p>第1天的任务完成得怎么样？实现一遍FizzBuzz用了你多长时间？</p>
<p>如果没能在15分钟内完成的话，不好意思，不合格的程序员说的就是你了……</p>
<p>很有可能你的工作环境就没有进入最佳状态，拖慢了你编程的速度。</p>
<p>今天的任务是，整理一下你的工作环境。</p>
<p>做题的要求：</p>
<ol>
<li>打开IntelliJ IDEA（如果没有的话，现在去装一个，社区版是免费的）</li>
<li>把IDEA的快捷键提示表打印出来（我放在附件里了）</li>
<li>再做一遍FizzBuzz，不一定要做完，实现第一部分的功能即可</li>
<li>但是！注意！这次做FizzBuzz的时候不准动鼠标</li>
</ol>
<p>打卡内容（可选，非必须）：</p>
<ul>
<li><p>今天学到了什么新的快捷键操作？</p>
</li>
<li><p>不准动鼠标的规定在什么时候感到最难遵守？</p>
</li>
<li><p>第二遍做这道题目，是否还有卡壳的情况？为什么？</p>
<p><a href="https://files-cdn.cnblogs.com/files/frankbsd/IntelliJIDEA_ReferenceCard.7z">IntelliJIDEA_ReferenceCard</a></p>
</li>
</ul>
<h3 id="第3天-FizzBuzz再撸一遍"><a href="#第3天-FizzBuzz再撸一遍" class="headerlink" title="第3天:FizzBuzz再撸一遍"></a>第3天:FizzBuzz再撸一遍</h3><p>FizzBuzz再撸一遍<del>（如果还到不了15分钟以内，那就再来一遍</del>）</p>
<p>做题要求：</p>
<ol>
<li>重新做任务拆解，把任务清单写下来</li>
<li>计时，开始编码</li>
<li>严格按照TDD的步骤：先写测试，再写实现，测试通过时重构</li>
<li>随时留意自己在什么时候卡壳、不流畅</li>
<li>（如果你愿意的话）再次调整任务清单，再来一遍~</li>
</ol>
<p>打卡内容（可选，非必须）：</p>
<ul>
<li>做完整道题用多长时间？</li>
<li>速度提高的原因是什么？</li>
<li>代码质量如何？</li>
<li>今天有什么收获？</li>
</ul>
<h3 id="第4天-终于开始正式的Kata练习，兴不兴奋？"><a href="#第4天-终于开始正式的Kata练习，兴不兴奋？" class="headerlink" title="第4天:终于开始正式的Kata练习，兴不兴奋？"></a>第4天:终于开始正式的Kata练习，兴不兴奋？</h3><p>今天练<a href="http://codingdojo.org/kata/Args/">Args</a>这道题：<a href="http://codingdojo.org/kata/Args/">http://codingdojo.org/kata/Args/</a></p>
<p>Uncle Bob在《Clean Code》第14章专门讨论了这道题。据说很多大公司在提倡学《Clean Code》，书里的题目还不练起来？</p>
<p>做题的要求：</p>
<ol>
<li>看懂题目，开始编码之前先花10分钟拆解任务，把任务清单写下来</li>
<li>计时，开始编码</li>
<li>要求用TDD的方式实现：先写测试，后写代码</li>
</ol>
<p>打卡内容（可选，非必须）：</p>
<ul>
<li>做完整道题用了多长时间？</li>
<li>代码质量怎么样？</li>
<li>TDD的方式顺畅吗？</li>
<li>实际做的步骤，和一开始拆分的任务是否相同？</li>
</ul>
<h3 id="第五天：别着急，慢慢来"><a href="#第五天：别着急，慢慢来" class="headerlink" title="第五天：别着急，慢慢来"></a>第五天：别着急，慢慢来</h3><p>怎么样，昨天做<a href="http://codingdojo.org/kata/Args/">Args</a>这道题，很受挫吧？</p>
<p>如果你是刚开始练TDD，很可能昨天你花了两三个小时，还没把这道题做出来吧。</p>
<p>没关系，大家都有这么一个艰难的过程。</p>
<p>今天继续练这道题。</p>
<p>给你一个小建议：这道题目里，解析字符串的部分相当复杂而且麻烦。可以考虑降低一点练习的难度，假设字符串已经初步解析好了。</p>
<p>也就是说，你起始的输入不一定是这样：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-l</span> <span class="literal">-p</span> <span class="number">8080</span> <span class="literal">-d</span> /usr/log</span><br></pre></td></tr></table></figure>

<p>也可以是这样：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[[<span class="string">&quot;l&quot;</span>, <span class="string">&quot;&quot;</span>], [<span class="string">&quot;p&quot;</span>, <span class="string">&quot;8080&quot;</span>], [<span class="string">&quot;d&quot;</span>, <span class="string">&quot;/usr/log&quot;</span>]]</span><br></pre></td></tr></table></figure>

<p>好了，提示就到这儿，继续练吧。</p>
<p>做题的要求：</p>
<ol>
<li>看懂题目，开始编码之前先花10分钟拆解任务，把任务清单写下来</li>
<li>计时，开始编码</li>
<li>要求用TDD的方式实现：先写测试，后写代码</li>
</ol>
<p>打卡内容（可选，非必须）：</p>
<ul>
<li>做完整道题用了多长时间？</li>
<li>代码质量怎么样？</li>
<li>TDD的方式顺畅吗？</li>
<li>实际做的步骤，和一开始拆分的任务是否相同？</li>
</ul>
<h3 id="第六天：反思任务划分"><a href="#第六天：反思任务划分" class="headerlink" title="第六天：反思任务划分"></a>第六天：反思任务划分</h3><p>如果你按照前几天的任务一步步做，现在应该做完了一遍<a href="http://codingdojo.org/kata/Args/">Args</a>。</p>
<p>现在回头看看，实际做的步骤，和一开始拆分的任务是否相同？</p>
<p>拆分任务，是编程效率的关键环节。任务拆得不合理、任务的验收条件不清晰，都会严重拖慢编程速度。</p>
<p>如果你发现自己拆分的任务不能很流畅地转化成代码实现，这儿有一篇特别好的文章，应该好好学习：<a href="http://insights.thoughtworkers.org/think-as-a-machine/">《像机器一样思考》</a></p>
<p><a href="http://insights.thoughtworkers.org/think-as-a-machine/">http://insights.thoughtworkers.org/think-as-a-machine/</a></p>
<p>今天先看完这篇文章，再练一遍Args吧。</p>
<p>做题的要求：</p>
<ol>
<li>看懂题目，开始编码之前先花10分钟拆解任务，把任务清单写下来</li>
<li>计时，开始编码</li>
<li>要求用TDD的方式实现：先写测试，后写代码</li>
</ol>
<p>打卡内容（可选，非必须）：</p>
<ul>
<li>做完整道题用了多长时间？</li>
<li>代码质量怎么样？</li>
<li>TDD的方式顺畅吗？</li>
<li>实际做的步骤，和一开始拆分的任务是否相同？</li>
</ul>
<h3 id="第七天：看看闲书"><a href="#第七天：看看闲书" class="headerlink" title="第七天：看看闲书"></a>第七天：看看闲书</h3><p>上帝创世，干了六天还得歇一天呢。</p>
<p>996也还得休息个星期天呢。</p>
<p>所以今天就休息吧~</p>
<p>如果实在闲不住，这儿有本闲书可以看看。</p>
<p>我的<a href="https://gitbook.cn/gitchat/column/5c1a1c431e59245d4d2aede1">《敏捷中国史》</a></p>
<p>打卡内容（可选，非必须）：</p>
<ul>
<li>今天休息得怎么样？</li>
<li>《敏捷中国史》里讲中国软件业需要哪四种基本能力？</li>
</ul>
<h3 id="第八天：熟能生巧"><a href="#第八天：熟能生巧" class="headerlink" title="第八天：熟能生巧"></a>第八天：熟能生巧</h3><p>还是<a href="http://codingdojo.org/kata/Args/">Args</a>这道题，我们继续练。</p>
<p>《哪儿来的天才》这本书里说，一切的能力，都来自刻意练习。</p>
<p>光是“知道”这事儿怎么做，是不够的。</p>
<p>非得反复练习、反复观察自己练习中的问题，才会有提高，才会积累真正的能力。</p>
<p>练到什么程度呢？Args这道题，练功房里的同学已经有练到27分钟完成了。而且是包含了字符串解析的部分。</p>
<p>所以……继续加油吧。</p>
<p>今天练习的时候，重点观察一件事：</p>
<p>你的每行代码，都是由测试驱动出来的吗？</p>
<p>做题的要求：</p>
<ol>
<li>看懂题目，开始编码之前先花10分钟拆解任务，把任务清单写下来</li>
<li>计时，开始编码</li>
<li>要求用TDD的方式实现：先写测试，后写代码</li>
</ol>
<p>打卡内容（可选，非必须）：</p>
<ul>
<li>做完整道题用了多长时间？</li>
<li>代码质量怎么样？</li>
<li>TDD的方式顺畅吗？每行代码都是由测试驱动出来的吗？</li>
<li>实际做的步骤，和一开始拆分的任务是否相同？</li>
</ul>
<h3 id="第九天：重温TDD基础"><a href="#第九天：重温TDD基础" class="headerlink" title="第九天：重温TDD基础"></a>第九天：重温TDD基础</h3><p>在练习TDD的过程中，有没有感觉到不太流畅？是否会觉得，有些代码其实不是被测试驱动出来的，反而像是先想好了代码怎么写，写完再补测试？</p>
<p>TDD的基本功，如果还不太熟的话，是需要温故而知新的。</p>
<p>建议花一点时间，把Kent Beck的《测试驱动开发》翻出来，看第一部分“货币实例”，照着书里的步子，一步步做一遍。</p>
<p>然后回头再想想Args这道题，你写测试的方式，是否需要调整？</p>
<p>要不，照着Beck大师的做法，再撸一遍？</p>
<p>做题的要求：</p>
<ol>
<li>看懂题目，开始编码之前先花10分钟拆解任务，把任务清单写下来</li>
<li>计时，开始编码</li>
<li>要求用TDD的方式实现：先写测试，后写代码</li>
</ol>
<p>打卡内容（可选，非必须）：</p>
<ul>
<li>做完整道题用了多长时间？</li>
<li>代码质量怎么样？</li>
<li>TDD的方式顺畅吗？每行代码都是由测试驱动出来的吗？</li>
<li>实际做的步骤，和一开始拆分的任务是否相同？</li>
</ul>
<h3 id="第十天：代码臭不臭？"><a href="#第十天：代码臭不臭？" class="headerlink" title="第十天：代码臭不臭？"></a>第十天：代码臭不臭？</h3><p>做<a href="http://codingdojo.org/kata/Args/">Args</a>也做了好几遍了，现在应该做得很熟了吧？</p>
<p>今天我们着重看代码质量。</p>
<p>代码质量不是主观的审美判断。它是有相当客观的判断依据的。这个判断依据就是Martin Fowler在《重构》里说的“坏味道”（bad smell）。</p>
<p>今天我们翻开《重构》（第二版），翻到第三章“代码的坏味道”。这里面列举了24种坏味道，可以快速看一遍，看看你的代码里是否出现了这些坏味道。</p>
<p>如果发现了坏味道，书里已经给你指出了对应的重构手法，试着照书里写的重构手法，重构一下看看吧。</p>
<p>练习的要求：</p>
<ol>
<li>从昨天的最后一版代码开始，查看有没有坏味道</li>
<li>如果发现了坏味道，看看对应的重构手法是什么</li>
<li>重构，直到坏味道消失</li>
</ol>
<p>打卡内容（可选，非必须）：</p>
<ul>
<li>重构的感觉怎么样？是否有信心？</li>
<li>重构之后的代码质量怎么样？</li>
</ul>
<h3 id="第十一天：速度速度"><a href="#第十一天：速度速度" class="headerlink" title="第十一天：速度速度"></a>第十一天：速度速度</h3><p>我们接着练<a href="http://codingdojo.org/kata/Args/">Args</a>这道题。</p>
<p>在前面几天，妨碍你提高编程速度的几个拦路虎应该都解决了。</p>
<p>你准备好了工作环境，熟悉了IntelliJ的快捷键。</p>
<p>你重新审视了任务拆解的方式。</p>
<p>你重温了TDD的步骤。</p>
<p>你从代码中寻找并消除了坏味道。</p>
<p>现在，再来练一遍，看看你的速度有多大提升。</p>
<p>（练功房里的小伙伴们到这个时候大多能进到1小时以内了。）</p>
<p>做题的要求：</p>
<ol>
<li>开始编码之前先花10分钟拆解任务，把任务清单写下来</li>
<li>计时，开始编码</li>
<li>要求用TDD的方式实现：先写测试，后写代码</li>
</ol>
<p>打卡内容（可选，非必须）：</p>
<ul>
<li>做完整道题用了多长时间？</li>
<li>代码质量怎么样？</li>
<li>TDD的感觉怎么样？</li>
</ul>
<h3 id="第十二天：开一道新题"><a href="#第十二天：开一道新题" class="headerlink" title="第十二天：开一道新题"></a>第十二天：开一道新题</h3><p>今天终于可以和<a href="http://codingdojo.org/kata/Args/">Args</a>道别了~</p>
<p>我们开始一道新的题目：<a href="http://codekata.com/kata/kata06-anagrams/">Anagrams</a></p>
<p>这道题不简单，因为一旦你在一个很大的数据集上运行测试，很可能会慢得难以忍受。</p>
<p>所以先给你一个提示：或许可以考虑先做一个比较小的数据集，在这上面把逻辑写对，然后再去大数据集上运行。</p>
<p>做题的要求：</p>
<ol>
<li>看懂题目，开始编码之前先花10分钟拆解任务，把任务清单写下来</li>
<li>计时，开始编码</li>
<li>要求用TDD的方式实现：先写测试，后写代码</li>
</ol>
<p>打卡内容（可选，非必须）：</p>
<ul>
<li>做完整道题用了多长时间？</li>
<li>代码质量怎么样？</li>
<li>TDD的方式顺畅吗？每行代码都是由测试驱动出来的吗？</li>
<li>实际做的步骤，和一开始拆分的任务是否相同？</li>
</ul>
<h3 id="第十三天：再来一遍"><a href="#第十三天：再来一遍" class="headerlink" title="第十三天：再来一遍"></a>第十三天：再来一遍</h3><p>估计你昨天做<a href="http://codekata.com/kata/kata06-anagrams/">Anagrams</a>做得不够爽吧？</p>
<p>我也不用多废话了，你应该知道要看哪些方面。</p>
<p>动手，练吧。</p>
<p>做题的要求：</p>
<ol>
<li>看懂题目，开始编码之前先花10分钟拆解任务，把任务清单写下来</li>
<li>计时，开始编码</li>
<li>要求用TDD的方式实现：先写测试，后写代码</li>
</ol>
<p>打卡内容（可选，非必须）：</p>
<ul>
<li>做完整道题用了多长时间？什么地方浪费了时间？</li>
<li>代码质量怎么样？</li>
<li>TDD的方式顺畅吗？每行代码都是由测试驱动出来的吗？</li>
<li>实际做的步骤，和一开始拆分的任务是否相同？</li>
</ul>
<h3 id="第十四天：总结"><a href="#第十四天：总结" class="headerlink" title="第十四天：总结"></a>第十四天：总结</h3><p>恭喜你，你完成了第一个编程训练营。</p>
<p>感觉怎么样？</p>
<p>有没有找到TDD的节奏？</p>
<p>有没有找到重构的感觉？</p>
<p>编程的速度有没有提高？</p>
<p>我建议你可以写一篇博客，总结一下这两周的收获。</p>
<p>博客的链接就打卡发给我吧。</p>
<p>最后的最后，记得关注我们的微信公众号：程序员练功房。</p>
]]></content>
      <categories>
        <category>编程思想</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>TDD及单元测试</title>
    <url>/2024/07/31/TDD%E5%8F%8A%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>单元测试遵循了叫做“<code>准备/动作/断言(A/A/A)</code>”的模式。</p>
<ul>
<li>准备（Arrange）：建立测试环境</li>
<li>动作（Act）：执行测试</li>
<li>断言（Assert）：判断能否得到所需要的某个结果</li>
</ul>
<p>让单元测试有一致的结构，会使它们易于阅读。当项目含有数百个单元测试时，更会体会到这么做的好处！</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">TestClass</span>]</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AdminControllerTests</span> &#123;</span><br><span class="line"></span><br><span class="line">      [<span class="meta">TestMethod</span>]</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CanChangeLoginName</span>()</span> &#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Arrange (set up a scenario) </span></span><br><span class="line">          User user = <span class="keyword">new</span> User() &#123; LoginName = <span class="string">&quot;Bob&quot;</span> &#125;;</span><br><span class="line">          FakeRepository repositoryParam = <span class="keyword">new</span> FakeRepository();</span><br><span class="line">          repositoryParam.Add(user);</span><br><span class="line">          AdminController target = <span class="keyword">new</span> AdminController(repositoryParam);</span><br><span class="line">          <span class="built_in">string</span> oldLoginParam = user.LoginName;</span><br><span class="line">          <span class="built_in">string</span> newLoginParam = <span class="string">&quot;Joe&quot;</span>;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Act (attempt the operation) </span></span><br><span class="line">          target.ChangeLoginName(oldLoginParam, newLoginParam);</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Assert (verify the result) </span></span><br><span class="line">          Assert.AreEqual(newLoginParam, user.LoginName);</span><br><span class="line">          Assert.IsTrue(repositoryParam.DidSubmitChanges);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>TDD</code>及“<code>红-绿-重构</code>”工作流程</p>
<p>它是这样工作的：</p>
<ul>
<li>确定需要给应用程序添加的一个新特性或方法</li>
<li>编写测试，将用以检验新特性的行为（先测试）</li>
<li>运行该测试，并得到一个红色信号</li>
<li>编写实现新特性的代码（后编码）</li>
<li>再次运行测试，并修正其代码，直至得到一个绿色信号</li>
<li>必要时重构改代码。例如：重组语句、重命名变量等（重构）</li>
<li>运行该测试，以确认修改不会改变这个新增特效或方法的行为<br>然后，对添加的每个特性或方法重复这个工作流程。</li>
</ul>
<p><code>TDD</code>颠倒了传统的开发流程：首先为一个新特性的完美实现编写一些测试，尽管知道这些测试肯定会失败。然后实现该特性，这包括创建该特性行为的各个方面，并让它们通过一个或多个测试。</p>
<p>这种<strong>循环</strong>是<code>TDD</code>的精髓。</p>
<ul>
<li>使我们在开始编码之前，就思考应该如何进行修改和增强；</li>
<li>使我们事先就有计划好的、明确的最终目标，并且有一种检查是否达到这个目标的方法；</li>
<li>如果有了涉及应用程序其余部分的单元测试，就可以确信我们的扩充不会更改其他地方的行为；</li>
<li>能够让我们事先考虑什么才是完美的实现，不至于因编码技术而有所偏见。</li>
</ul>
<p>缺点是需要训练。随着交付期的临近，总是有人想放弃<code>TDD</code>，而直接编写代码，或者放弃有问题的测试，使得代码看起来比实际更好。<br>基于这些原因：</p>
<ul>
<li>TDD只能在有基础且成熟的开发团队中使用，这种团队一般具有较高的技术水平和纪律约束</li>
<li>一些特殊团队，这些团队的领导能够在即使面临时间限制的情况下也能强制执行<code>TDD</code></li>
</ul>
]]></content>
      <categories>
        <category>编程思想</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPadNEO14合盖后风扇仍然高速转动</title>
    <url>/2024/07/31/ThinkPadNEO14%E5%90%88%E7%9B%96%E5%90%8E%E9%A3%8E%E6%89%87%E4%BB%8D%E7%84%B6%E9%AB%98%E9%80%9F%E8%BD%AC%E5%8A%A8/</url>
    <content><![CDATA[<p><code>控制面板</code>——》<code>系统和安全</code>——》<code>电源选项</code>——》<code>选择电源按钮的功能</code>——》<code>更改当前不可用的设置</code>——》取消勾选<code>启用快速启动（推荐）</code>——》<code>保存修改</code></p>
]]></content>
      <categories>
        <category>硬件</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu使用</title>
    <url>/2024/07/31/Ubuntu%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="解决“A-start-job-is-running-for-Wait-for-Network-to-be-Configured”"><a href="#解决“A-start-job-is-running-for-Wait-for-Network-to-be-Configured”" class="headerlink" title="解决“A start job is running for Wait for Network to be Configured”"></a>解决“A start job is running for Wait for Network to be Configured”</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl show -p WantedBy network-online.target</span><br><span class="line">sudo apt purge cloud-config</span><br><span class="line">sudo systemctl disable iscsid.service</span><br><span class="line">sudo systemctl disable open-iscsi.service</span><br></pre></td></tr></table></figure>

<p>编辑<code>/etc/netplan/xx-installer-config.yaml</code>文件，每一个网卡都添加<code>optional: true</code>，</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This is the network config written by &#x27;subiquity&#x27;</span></span><br><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">eth0:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">optional:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">eth1:</span></span><br><span class="line">      <span class="attr">addresses:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.18</span><span class="number">.3</span><span class="string">/24</span></span><br><span class="line">      <span class="attr">gateway4:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span></span><br><span class="line">      <span class="attr">nameservers:</span></span><br><span class="line">        <span class="attr">addresses:</span> []</span><br><span class="line">        <span class="attr">search:</span> []</span><br><span class="line">      <span class="attr">optional:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>并运行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure>

<h3 id="sudo取消密码输入"><a href="#sudo取消密码输入" class="headerlink" title="sudo取消密码输入"></a>sudo取消密码输入</h3><p>编辑<code>/etc/sudoers</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">%</span><span class="language-bash">admin ALL=(ALL) ALL</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash"><span class="built_in">sudo</span> ALL=(ALL:ALL) ALL</span></span><br></pre></td></tr></table></figure>

<p>变更为:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">%</span><span class="language-bash">admin ALL=(ALL) NOPASSWD: ALL</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash"><span class="built_in">sudo</span> ALL=(ALL:ALL) NOPASSWD: ALL</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="编辑-etc-pam-d-common-password设置密码相关"><a href="#编辑-etc-pam-d-common-password设置密码相关" class="headerlink" title="编辑/etc/pam.d/common-password设置密码相关"></a>编辑<code>/etc/pam.d/common-password</code>设置密码相关</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password    [success=1 default=ignore]    pam_unix.so obscure sha512</span><br></pre></td></tr></table></figure>
<p>设置密码允许的最小长度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password    [success=1 default=ignore]    pam_unix.so obscure sha512 minlen=0</span><br></pre></td></tr></table></figure>
<p>取消密码复杂度限制，删除<code>obscure</code>如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password    [success=1 default=ignore]    pam_unix.so sha512 minlen=0</span><br></pre></td></tr></table></figure>

<h3 id="添加国内源"><a href="#添加国内源" class="headerlink" title="添加国内源"></a>添加国内源</h3><ul>
<li>备份<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure></li>
<li>在<code>/etc/apt/sources.list</code>文件前面添加如下条目 （注意:”focal”是版本代号，需要更换成对应的版本代号）</li>
</ul>
<ol>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">清华</a><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="终端使用中文"><a href="#终端使用中文" class="headerlink" title="终端使用中文"></a>终端使用中文</h3><p>安装中文包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install language-pack-zh-hans</span><br></pre></td></tr></table></figure>

<p>编辑 <code>/etc/environment</code>，增加:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LANG=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LANGUAGE=&quot;zh_CN:zh:en_US:en&quot;</span><br></pre></td></tr></table></figure>

<p>编辑 <code>/var/lib/locales/supported.d/local</code>,增加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">en_US.UTF-8 UTF-8</span><br><span class="line">zh_CN.UTF-8 UTF-8</span><br><span class="line">zh_CN.GBK GBK</span><br><span class="line">zh_CN GB2312</span><br></pre></td></tr></table></figure>

<p>执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo locale-gen</span><br></pre></td></tr></table></figure>

<p>安装中文字体，解决中文乱码是空格</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install fonts-droid-fallback ttf-wqy-zenhei ttf-wqy-microhei fonts-arphic-ukai fonts-arphic-uming</span><br></pre></td></tr></table></figure>

<p>时间显示仍然为英文,编辑 <code>/etc/default/locale</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LANG=zh_CN.UTF-8</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">timedatectl  # 显示时区信息</span><br><span class="line">ls -l /etc/localtime  # 链接文件/etc/localtime配置系统时区</span><br><span class="line">cat /etc/timezone  # /etc/timezone文件也写入了系统的时区</span><br><span class="line">timedatectl list-timezones #列出所有可用的时区</span><br><span class="line">sudo timedatectl set-timezone your_time_zone # 设置系统时区</span><br><span class="line">timedatectl  # 验证</span><br><span class="line"></span><br><span class="line">sudo date -s MM/DD/YY # 修改日期</span><br><span class="line">sudo date -s hh:mm:ss # 修改时间</span><br></pre></td></tr></table></figure>

<p>编辑<code>/etc/default/locale</code>设置 <code>date</code> 显示时间为24小时方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LC_TIME=en_DK.UTF-8</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Unicode中文转换为汉字</title>
    <url>/2024/07/31/Unicode%E4%B8%AD%E6%96%87%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%B1%89%E5%AD%97/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Unicode转 汉字字符串</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str \u6728</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#x27;木&#x27; 26408</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">convertUnicodeToZhString</span><span class="params">(String str)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(\\\\u(\\p&#123;XDigit&#125;&#123;4&#125;))&quot;</span>);</span><br><span class="line">    <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(str);</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">        <span class="comment">//group 6728</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">group</span> <span class="operator">=</span> matcher.group(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//ch:&#x27;木&#x27; 26408</span></span><br><span class="line">        ch = (<span class="type">char</span>) Integer.parseInt(group, <span class="number">16</span>);</span><br><span class="line">        <span class="comment">//group1 \u6728</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">group1</span> <span class="operator">=</span> matcher.group(<span class="number">1</span>);</span><br><span class="line">        str = str.replace(group1, ch + <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode设置</title>
    <url>/2024/07/31/VSCode%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="关联配置文件夹"><a href="#关联配置文件夹" class="headerlink" title="关联配置文件夹"></a>关联配置文件夹</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># VSCode</span></span><br><span class="line">mklink /D <span class="string">&quot;%USERPROFILE%\.vscode\&quot;</span> <span class="string">&quot;D:\ProgramFiles\VSCodeConfig&quot;</span></span><br></pre></td></tr></table></figure>

<p>目的是关联扩展 <code>extensions</code> 目录<br>在快捷方式指定参数 <code>--extensions-dir [path]</code> 的方式有一些问题</p>
<ul>
<li>使用右键 &#x3D;&gt; 通过code打开(也就是跳过快捷方式), 插件就不能用了</li>
</ul>
<p>所以用Windows链接来解决<br>管理员权限打开<code>cmd</code>，利用<code>mklink</code>来创建目录符号链接。<br>把<code>%USERPROFILE%\.vscode\</code>(默认插件位置)的<code>extensions</code>文件夹整个剪切到你想换的位置<br>在<code>cmd</code>中输入<code>mklink /D &quot;%USERPROFILE%\.vscode\extensions&quot; &quot;剪切后的路径&quot;</code></p>
<h3 id="注册右键打开"><a href="#注册右键打开" class="headerlink" title="注册右键打开"></a>注册右键打开</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\VSCode]</span><br><span class="line">@=&quot;Open With VSCode&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;D:\\ProgramFiles\\VSCode\\Code.exe&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\VSCode\command]</span><br><span class="line">@=&quot;\&quot;D:\\ProgramFiles\\VSCode\\Code.exe\&quot; \&quot;%1\&quot;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>参考</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;Windows Registry Editor Version 5.00  </span><br><span class="line"></span><br><span class="line">;[HKEY_CLASSES_ROOT\*\shell\VSCode]  </span><br><span class="line">;@=&quot;Open With Code&quot;  </span><br><span class="line">;&quot;Icon&quot;=&quot;D:\\ProgramFiles\\VSCode\\Code.exe,0&quot;  </span><br><span class="line"></span><br><span class="line">;[HKEY_CLASSES_ROOT\*\shell\VSCode\command]  </span><br><span class="line">;@=&quot;\&quot;D:\\ProgramFiles\\VSCode\\Code.exe&quot; \&quot;%1\&quot;&quot;  </span><br><span class="line"></span><br><span class="line">Windows Registry Editor Version 5.00  </span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\VSCode]  </span><br><span class="line">@=&quot;Open With Code&quot;  </span><br><span class="line">&quot;Icon&quot;=&quot;D:\\ProgramFiles\\VSCode\\Code.exe,0&quot;  </span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\VSCode\command]  </span><br><span class="line">@=&quot;\&quot;D:\\ProgramFiles\\VSCode\\Code.exe\&quot; \&quot;%1\&quot;&quot;  </span><br><span class="line"></span><br><span class="line">Windows Registry Editor Version 5.00  </span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\VSCode]  </span><br><span class="line">@=&quot;Open With Code&quot;  </span><br><span class="line">&quot;Icon&quot;=&quot;D:\ProgramFiles\VSCode\Code.exe,0&quot;  </span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\VSCode\command]  </span><br><span class="line">@=&quot;\&quot;D:\ProgramFiles\VSCode\Code.exe\&quot; \&quot;%V\&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="禁用单击预览"><a href="#禁用单击预览" class="headerlink" title="禁用单击预览"></a>禁用单击预览</h3><p><code>Ctrl + Shift + P</code> –&gt; <code>首选项:打开工作区设置(JSON)</code></p>
<p>然后添加</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;workbench.editor.enablePreview&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="设置开发环境"><a href="#设置开发环境" class="headerlink" title="设置开发环境"></a>设置开发环境</h3><ol>
<li><p>前端插件</p>
<ul>
<li>vscode-icons —— 文件图标</li>
<li>Live Server  —— 打开浏览器</li>
</ul>
</li>
<li><p>Vue开发安装插件</p>
<ul>
<li>Vetur —— 语法高亮、智能感知、Emmet等</li>
<li>EsLint —— 语法纠错</li>
<li>Prettier - Code formatter</li>
<li>Debugger for Chrome —— 映射vscode上的断点到chrome上，方便调试</li>
<li>Debugger for Firefox</li>
<li>Auto Close Tag —— 自动闭合HTML&#x2F;XML标签</li>
<li>Auto Rename Tag —— 自动完成另一侧标签的同步修改</li>
<li>JavaScript(ES6) code snippets —— ES6语法智能提示以及快速输入，除js外还支持.ts，.jsx，.tsx，.html，.vue，省去了配置其支持各种包含js代码文件的时间</li>
<li>Path Intellisense —— 自动路径补全</li>
<li>HTML CSS Support —— 让 html 标签上写class 智能提示当前项目所支持的样式</li>
<li>Rainbow Brackets——给括号加上不同的颜色，便于区分不同的区块，使用者可以定义不同括号类型和不同颜色</li>
<li>Code Spell Checker</li>
<li>Ant Design Vue helper</li>
</ul>
</li>
<li><p>Java开发插件</p>
<ul>
<li>Extension Pack for Java</li>
<li>Spring Boot Extension Pack</li>
<li>Tomcat for Java</li>
<li>Jetty for Java</li>
</ul>
</li>
<li><p>设置VS Code(<code>settings.json</code>)</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 保存时自动格式化代码</span></span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// eslint配置项，保存时自动修复错误</span></span><br><span class="line">    <span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;source.fixAll&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 让vetur使用vs自带的js格式化工具，以便在函数前面加个空格</span></span><br><span class="line">    <span class="attr">&quot;vetur.format.defaultFormatter.js&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vscode-typescript&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除js语句的分号</span></span><br><span class="line">    <span class="attr">&quot;javascript.format.semicolons&quot;</span><span class="punctuation">:</span> <span class="string">&quot;remove&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在函数名后面加上括号，类似这种形式 foo () &#123;&#125;</span></span><br><span class="line">    <span class="attr">&quot;javascript.format.insertSpaceBeforeFunctionParenthesis&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定 *.vue 文件的格式化工具为vetur</span></span><br><span class="line">    <span class="attr">&quot;[vue]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;octref.vetur&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定 *.js 文件的格式化工具为vscode自带</span></span><br><span class="line">    <span class="attr">&quot;[javascript]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vscode.typescript-language-features&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认使用prettier格式化支持的文件</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p> 参考 <a href="https://blog.zuiyu1818.cn/posts/VScode_Vue.html">前端 | VS Code配置Vue开发环境-Vetur+ESLint+Prettier</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>VisualStudio常用快捷键</title>
    <url>/2024/07/31/VisualStudio%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h3 id="项目相关的快捷键"><a href="#项目相关的快捷键" class="headerlink" title="项目相关的快捷键"></a>项目相关的快捷键</h3><p><code>Ctrl + Shift + B</code> &#x3D;  生成项目(可能与Sougou拼音冲突)</p>
<p><code>Ctrl + Shift + N</code> &#x3D; 新建解决方案&#x2F;项目</p>
<p><code>Ctrl + Shift + O</code> &#x3D; 打开解决方案&#x2F;项目</p>
<p><code>Ctrl + Shift + A</code> &#x2F; <code>Shift + Alt+ C</code> &#x3D; 添加新项</p>
<p><code>Ctrl + N</code> &#x3D; 新建文件（如xml、txt、位图等）</p>
<p><code>Ctrl + Alt + L</code> &#x3D; 显示<code>Solution Explorer</code> 可能与<code>TIM</code>快捷键冲突</p>
<p><code>Shift + Alt + A</code> &#x3D; 添加现有项</p>
<h3 id="编辑相关的键盘快捷键"><a href="#编辑相关的键盘快捷键" class="headerlink" title="编辑相关的键盘快捷键"></a>编辑相关的键盘快捷键</h3><p><code>Ctrl + Enter</code> &#x3D; 在当前行插入空行</p>
<p><code>Ctrl + Shift + Enter</code> &#x3D; 在当前行下方插入空行</p>
<p><code>Ctrl + Delete</code> &#x3D; 删除至词尾</p>
<p><code>Ctrl + Backspace</code> &#x3D; 删除至词头</p>
<p><code>Shift + Delete</code> &#x2F; <code>Ctrl + L</code> &#x3D; 删除当前行</p>
<p><code>Ctrl + X</code> &#x3D; 剪切当前行</p>
<p><code>Ctrl + C, Ctrl + V</code> &#x3D; 在当前行的下一行复制当前行内容（不用选中当前行），即复制当前行并粘贴到下一行，在两行内容差不多时很有用，可以先复制再改</p>
<p><code>Ctrl + U</code> &#x3D; 转小写</p>
<p><code>CTRL + SHIFT + U</code> &#x3D; 转大写</p>
<p><code>Ctrl + Z</code> &#x3D; 撤销操作</p>
<p><code>Ctrl + Y</code> &#x3D; 反撤销操作</p>
<p><code>Tab + Tab</code> &#x3D; 自动补全</p>
<p><code>Ctrl + K + S</code> &#x3D; 插入外侧代码</p>
<p><code>Ctrl + K + X</code> &#x3D; 插入代码段</p>
<p><code>Ctrl + Space</code> &#x2F; <code>Ctrl + J</code> &#x2F; <code>Alt + →</code> &#x3D; 使用<code>IntelliSense</code>自动完成</p>
<p><code>Ctrl + K，Ctrl + C</code> &#x3D; 注释选定行 记忆方法：Ctrl + C &#x3D; Comment selected text</p>
<p><code>Ctrl + K，Ctrl + U</code> &#x3D; 取消选定行的注释 记忆方法：Ctrl + U &#x3D; Uncomment selected text</p>
<p><code>Ctrl + K，Ctrl + D</code> &#x3D; 格式化全部文档</p>
<p><code>Ctrl + K，Ctrl + F</code> &#x3D; 只格式化你选中的部分</p>
<p><code>Ctrl + Shift + S</code> &#x3D; 保存所有文件和项目</p>
<p><code>Ctrl + .[dot]</code> &#x2F; <code>Ctrl + Shift + F10</code> &#x3D; 自动添加Using命名空间(实际<code>Shift + F10</code>可调出右键属性)</p>
<p><code>Shift + End</code> &#x3D; 选中从光标起到行尾间的代码</p>
<p><code>Shift + Home</code> &#x3D; 选中从光标起到行首间的代码</p>
<p><code>Shift + Alt + 方向键(或鼠标)</code> &#x2F; <code>Alt + 鼠标</code> &#x3D; 框式选择 批量删除某些代码很方便</p>
<p><code>Ctrl + Shift + &#125;</code> &#x3D; 选择在匹配的大括号、括号内文本</p>
<p><code>Shift + Alt + Enter</code> &#x3D; 全屏显示&#x2F;退出全屏显示</p>
<h3 id="导航相关的键盘快捷键"><a href="#导航相关的键盘快捷键" class="headerlink" title="导航相关的键盘快捷键"></a>导航相关的键盘快捷键</h3><p><code>Ctrl + Up/Down</code> &#x3D; 滚动窗口但不移动光标</p>
<p><code>Ctrl + -</code> &#x3D; 让光标移动到它先前的位置</p>
<p><code>Ctrl + +</code> &#x3D; 让光标移动到下一个位置</p>
<p><code>Ctrl + G</code> &#x2F; <code>双击状态栏中的行号/列/字符</code> &#x3D; 跳转到指定的某一行</p>
<p><code>Home</code> &#x3D; 定位到当前行的行首</p>
<p><code>End</code> &#x3D; 定位到当前行的行尾</p>
<p><code>Ctrl + Home</code> &#x3D; 文档首</p>
<p><code>Ctrl + End</code> &#x3D; 文档尾</p>
<p><code>Ctrl + Tab</code> &#x3D; 快速切换窗口</p>
<p><code>Ctrl + ]</code> &#x3D; 匹配大括号、括号</p>
<p><code>Ctrl + M, Ctrl + O</code> &#x3D; 折叠所有方法</p>
<p><code>Ctro + M, Ctrl + L</code> &#x3D; 展开所有方法</p>
<p><code>Ctro + M, Ctrl + L</code> &#x3D; 折叠或者展开当前文件</p>
<p><code>Ctrl + M, M</code> &#x3D; 快速隐藏或显示当前代码段</p>
<p><code>Ctrl + M, L</code> &#x3D; 快速隐藏或显示全部代码段</p>
<p><code>CTRL + F4</code> &#x3D; 关闭当前文档窗口</p>
<h3 id="调试相关的键盘快捷键"><a href="#调试相关的键盘快捷键" class="headerlink" title="调试相关的键盘快捷键"></a>调试相关的键盘快捷键</h3><p><code>F5</code> &#x3D; 开始调试</p>
<p><code>Shift + F5</code> &#x3D; 停止调试</p>
<p><code>Ctrl + F5</code> &#x3D; 调试(开始执行不调试)</p>
<p><code>Ctrl + Shift + F5</code>  &#x3D;调试(重新启动)</p>
<p><code>F9</code> &#x3D; 设置或删除断点</p>
<p><code>Ctrl + Shift + F9</code>  &#x3D; 取消所有断点</p>
<p><code>F10</code> &#x3D; 调试(逐过程)</p>
<p><code>F11</code> &#x3D; 调试(逐语句)</p>
<p><code>F12</code> &#x3D; 转到定义</p>
<p><code>Shift + F12</code> &#x3D; 查找所有引用</p>
<p><code>Ctrl+K, Ctrl+P</code> &#x3D; 查看函数参数  记忆方法：  Ctrl+P   &#x3D;  Parameter</p>
<p><code>Ctrl + Alt + P</code> &#x3D; 附加到进程</p>
<p><code>Ctrl + Alt + Q</code> &#x3D; 添加快捷匹配</p>
<h3 id="搜索相关的键盘快捷键"><a href="#搜索相关的键盘快捷键" class="headerlink" title="搜索相关的键盘快捷键"></a>搜索相关的键盘快捷键</h3><p><code>F3</code> &#x3D; 查找下一个</p>
<p><code>Shift+F3</code> &#x3D; 查找上一个</p>
<p><code>Ctrl + F3</code> &#x3D; 为当前选中的部分进行搜索（不需要再输入要搜索的内容）</p>
<p><code>Ctrl + Shift + F</code> &#x3D; 查找所选条目在整个解决方案中的引用</p>
<p><code>Ctrl + F</code> &#x3D; 显示查找对话框</p>
<p><code>Ctrl + H</code> &#x3D; 显示替换对话框</p>
<p><code>Ctrl + I</code> &#x3D; 递增搜索，与 <code>Ctrl + F</code> 不同的是搜索期间不显示搜索对话框，且 <code>Ctrl + F</code> 搜索下一个直接按 <code>Enter</code> 即可，而 <code>Ctrl + I</code> 搜索下一个按 <code>Ctrl + I</code> 或 <code>F3</code> ，<code>Escape</code> 退出，连续按两次 <code>Ctrl  + I</code> 重复上次搜索</p>
<p><code>Ctrl + K, Ctrl + K</code> &#x3D; 将当前行添加书签</p>
<p><code>Ctrl + K, Ctrl + N</code> &#x3D; 导航至下一个书签</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>VisualStudio</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL使用</title>
    <url>/2024/07/31/WSL%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>开机启动</p>
<p>WSL2中创建执行脚本<code>sudo vim /etc/init.wsl</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#! /bin/sh</span><br><span class="line">/etc/init.d/ssh start</span><br></pre></td></tr></table></figure>
<p>给予脚本执行权限 <code>sudo chmod +x /etc/init.wsl</code></p>
<p>在Windows中创建脚本 <code>linux-start.vbs</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set ws = WScript.CreateObject(&quot;WScript.Shell&quot;)</span><br><span class="line">ws.run &quot;wsl -d ubuntu -u root /etc/init.wsl&quot;</span><br></pre></td></tr></table></figure>

<p>移动到Windows开机启动项<br><code>Win+R</code>—&gt;<code>shell:startup</code></p>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>WSL</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Socket错误</title>
    <url>/2024/07/31/Windows-Socket%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p><a href="http://help.socketlabs.com/docs/how-to-fix-error-only-one-usage-of-each-socket-address-protocolnetwork-addressport-is-normally-permitted">How To Fix Error “Only one usage of each socket address (protocol&#x2F;network address&#x2F;port) is normally permitted”</a></p>
<p>错误信息</p>
<blockquote>
<p>Only one usage of each socket address (protocol&#x2F;network address&#x2F;port) is normally permitted</p>
</blockquote>
<p>此错误意味着机器上所有可用的端口都已耗尽。 </p>
<p>默认情况下，操作系统只有大约 4000 个未被系统保留的可用端口。当任何网络连接关闭时，它会进入 TIME_WAIT 状态 240 秒，并且在此等待状态结束之前无法重新使用。</p>
<p>例如，如果 4 分钟内每秒有 16 个连接（16<em>4</em>60&#x3D;3840），那么不久之后所有端口就会耗尽。如果 HAS 和 MTA 位于同一台机器上，则耗尽端口会更快发生。这是因为除了它们相互通信并占用两个端口之外，MTA 还使用大量端口来发送邮件。 </p>
<p>该如何解决这个错误？<br>您可以通过修改以下值来解决此问题。</p>
<p>增加动态端口范围。默认情况下最大值为 5000。您可以将其设置为 65534。HKLMSystemCurrentControlSetServicesTcpipParametersMaxUserPort 是<br>使用的关键。</p>
<p>减少 TIME_WAIT 状态。默认设置为 4 分钟，但您可以将其设置为 30 秒。HKLMSystemCurrentControlSetServicesTcpipParametersTCPTimedWaitDelay 是使用的关键。</p>
<p>完成这些更改后，必须重新启动系统。</p>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows删不掉的文件处理</title>
    <url>/2024/07/31/Windows%E5%88%A0%E4%B8%8D%E6%8E%89%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> D:\ProgramFiles\UltraEdit.<span class="number">26.0</span>.<span class="number">0.72</span>.x32&gt; tasklist /m ue64ctmn.dll</span><br><span class="line"><span class="built_in">PS</span> D:\ProgramFiles\UltraEdit.<span class="number">26.0</span>.<span class="number">0.72</span>.x32&gt; taskkill /f  /pid <span class="number">6664</span></span><br><span class="line"><span class="built_in">PS</span> D:\ProgramFiles\UltraEdit.<span class="number">26.0</span>.<span class="number">0.72</span>.x32&gt; <span class="built_in">del</span> .\ue64ctmn.dll</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/31/Windows%E5%88%A0%E4%B8%8D%E6%8E%89%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/1.png" alt="1"></p>
<p>这只是简单的处理方法，如果<code>ue64ctmn.dll</code>插入到多个进程中，就要一个一个地结束这些进程。还有，如果病毒程序随时监控各个进程，一旦发现某个进程被结束就立刻再次启动该进程或被插入的是系统必需进程，无法被结束，这怎么办呢？</p>
<p>别担心，我们继续请出Windows自带的助手，就是利用NTFS分区格式的文件限制功能，可以设置某个文件是否可以被程序调用、访问。通过这个功能，我们一样可以阻止病毒DLL文件被调用，从而彻底地清除顽固的DLL文件。使用文件限制功能的必要条件是必须禁用简单文件共享。</p>
<p>双击打开【我的电脑】，点击菜单命令【查看】→【选项】→【查看】，在高级设置的选项卡下去掉【简单文件共享】的选择。</p>
<p>然后找到无法删除的DLL文件，右击它，在弹出的菜单中选择【属性】→【安全】，再单击【高级】按钮，在弹出的窗口中去掉【从父项继承那些可以应用的到子对象的权限项目，包括那些在此明确定义的项目】前面的钩。再在弹出的窗口中单击【删除】。最后单击【确定】。</p>
<p>这样就没有任何用户和文件可以访问和调用这个DLL文件了。重新启动系统就可以删除该DLL文件了。</p>
<p>该方法虽好但也有个条件，就是顽固DLL文件所在的磁盘分区必须是NTFS格式的。</p>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows删除右键</title>
    <url>/2024/07/31/Windows%E5%88%A0%E9%99%A4%E5%8F%B3%E9%94%AE/</url>
    <content><![CDATA[<p>保存为del_yun_shell.bat</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">reg delete HKEY_CLASSES_ROOT\Directory\shellex\ContextMenuHandlers\YunShellExt /f</span><br><span class="line">reg delete HKEY_CLASSES_ROOT\*\shellex\ContextMenuHandlers\YunShellExt /f</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>注册表</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows文件名区分大小写</title>
    <url>/2024/07/31/Windows%E6%96%87%E4%BB%B6%E5%90%8D%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99/</url>
    <content><![CDATA[<p>转自<a href="https://www.howtogeek.com/354220/how-to-enable-case-sensitive-folders-on-windows-10/">How to Enable Case Sensitive File and Folder Names on Windows 10</a></p>
<p>Windows 10 现在提供可选的区分大小写的文件系统，就像 Linux 和其他类 UNIX 操作系统一样。如果启用此功能，所有 Windows 进程都将正确处理区分大小写的文件和文件夹。换句话说，他们会将“file”和“File”视为两个单独的文件。</p>
<p>工作原理<br>这是NTFS文件系统功能，您可以针对每个目录启用此功能。此功能不适用于您的整个文件系统，因此您只需针对用于开发目的的特定文件夹启用区分大小写即可。</p>
<p>区分大小写功能是在Windows 10 的 2018 年 4 月更新中添加的。在此之前，可以在Windows 上的 Bash 环境（也称为适用于 Linux 的 Windows 子系统）中将 Windows 文件夹挂载为区分大小写。这在 Linux 环境中运行良好，但它会使普通的 Windows 应用程序感到困惑。这现在是一项文件系统级功能，这意味着所有 Windows 应用程序也将在该文件夹中看到区分大小写的文件系统。</p>
<p>此功能可通过</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">fsutil.exe</span><br></pre></td></tr></table></figure>

<p>命令，您必须从命令行运行该命令。您可以从命令提示符或 PowerShell 窗口执行此操作。使用默认设置，您在 Linux 环境中创建的文件夹也会自动配置为区分大小写。</p>
<p>如何将目录设置为区分大小写<br>首先，右键单击“开始”按钮，然后选择“PowerShell（管理员）”命令。如果您更喜欢使用命令提示符，则可以在“开始”菜单中搜索“命令提示符”，右键单击它，然后选择“以管理员身份运行”命令。无论您选择哪种命令行环境，该命令的工作原理都相同。</p>
<p>您可能实际上不需要管理员权限来运行此命令，这取决于您的权限。从技术上讲，您需要对要修改的目录具有“写入属性”权限。在大多数情况下，这意味着如果您想编辑用户文件夹之外的某个文件夹（例如 c:\project），则需要管理员权限，而如果您想修改用户文件夹内的某个文件夹（例如 c:\users\NAME\project），则不需要管理员权限。</p>
<p>在继续之前，请确保当前没有正在运行的 Linux 软件引用您要修改的目录。当 Linux 软件正在访问文件夹时，您不应更改文件夹上的区分大小写标志。如果任何正在运行的 Linux 进程当前打开了该目录或目录中的任何内容，即使将其作为当前工作目录，Linux 应用程序也不会识别该更改，并且可能会出现问题。</p>
<p>要使文件夹区分大小写，请键入以下命令，将“C:\folder”替换为文件夹的路径：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">fsutil.exe file setCaseSensitiveInfo C:\folder enable</span><br></pre></td></tr></table></figure>

<p>如果文件夹路径中有空格，请将整个路径括在引号中，如下所示：</p>
<p>fsutil.exe file setCaseSensitiveInfo “C:\my folder” enable</p>
<p>这不会影响子文件夹<br>区分大小写标志仅影响您应用它的特定文件夹。它不会被该文件夹的子文件夹自动继承。</p>
<p>换句话说，如果您有一个名为 C:\folder 的文件夹，并且其中包含 C:\folder\test 和 C:\folder\stuff 子文件夹，那么仅将 C:\folder 文件夹设置为区分大小写并不能同时使其中的“test”和“stuff”子文件夹区分大小写。您需要fsutil单独运行相应的命令才能使所有三个文件夹都区分大小写。</p>
<p>Linux 工具默认创建区分大小写的文件夹<br>您在 Windows Subsystem for Linux (Bash shell) 中运行的 Linux 工具现在可以创建设置了区分大小写的标志的文件夹。因此，无论您是使用命令mkdir在 Bash shell 中创建目录还是使用开发工具为您创建目录，创建的目录都会自动设置为区分大小写 - 即使您在已安装的 Windows 文件系统上创建它也是如此。</p>
<p>从技术上讲，发生这种情况是因为 Linux 环境的 DrvFs 文件系统默认case&#x3D;dir使用该标志。该选项将 Linux 环境设置为尊重每个目录的 NTFS 标志，并在从 Linux 环境内创建的目录上自动设置区分大小写的标志。如果愿意，您可以在wsl.conf 文件中更改此选项。case&#x3D;dir</p>
<p>只要您在 Linux 环境中创建文件夹，它们就会使用正确的区分大小写设置创建，并且您无需触碰 fsutil.exe 命令。</p>
<p>如何检查目录是否区分大小写<br>要检查目录当前是否区分大小写，请运行以下命令，将“C:\folder”替换为文件夹的路径。</p>
<p>fsutil.exe file queryCaseSensitiveInfo C:\folder</p>
<p>如果目录启用了区分大小写，您将看到“目录 [路径] 上的区分大小写属性已启用。”如果目录使用标准 Windows 不区分大小写，您将看到“目录 [路径] 上的区分大小写属性已禁用。”</p>
<p>如何使目录不区分大小写<br>要撤消更改并再次使目录不区分大小写（正如比尔盖茨所希望的那样），请运行以下命令，将“C:\folder”替换为文件夹的路径。</p>
<p>fsutil.exe file setCaseSensitiveInfo C:\folder disable</p>
<p>如果您尝试对包含名称冲突的文件的文件夹禁用区分大小写，您将看到“错误：目录不为空”消息。您需要先删除或重命名冲突的文件，然后才能继续。</p>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows注册表参数含义</title>
    <url>/2024/07/31/Windows%E6%B3%A8%E5%86%8C%E8%A1%A8%E5%8F%82%E6%95%B0%E5%90%AB%E4%B9%89/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>%1</td>
<td>文件路径</td>
</tr>
<tr>
<td>%2</td>
<td>系统默认的打印机</td>
</tr>
<tr>
<td>%3</td>
<td>文件扇区</td>
</tr>
<tr>
<td>%4</td>
<td>端口</td>
</tr>
<tr>
<td>%D</td>
<td>文件路径</td>
</tr>
<tr>
<td>%L</td>
<td>文件长路径</td>
</tr>
<tr>
<td>%V</td>
<td>文件路径</td>
</tr>
<tr>
<td>%W</td>
<td>当前文件的父目录的路径</td>
</tr>
</tbody></table>
<p>Windows注册表是不区分大小写</p>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows调整系统MTU值</title>
    <url>/2024/07/31/Windows%E8%B0%83%E6%95%B4%E7%B3%BB%E7%BB%9FMTU%E5%80%BC/</url>
    <content><![CDATA[<p>首先需要以【管理员】模式运行<code>cmd.exe</code>或<code>PowerShell</code></p>
<p>以如下命令查看目前网卡MTU设置</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">netsh interface ipv4 show interfaces</span><br></pre></td></tr></table></figure>

<p>以如下命令确认最佳MTU的数据包大小</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ping <span class="literal">-l</span> <span class="number">1464</span> <span class="operator">-f</span> www.microsoft.com</span><br></pre></td></tr></table></figure>

<p>在测试成功的数据包值上加上用于数据包包头28字节，即1464+28&#x3D;1492，这就是最佳MTU值<br>然后，以如下命令进行设置</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">netsh interface ipv4 <span class="built_in">set</span> subinterface <span class="string">&quot;以太网&quot;</span> mtu=<span class="number">1492</span> store=persistent</span><br></pre></td></tr></table></figure>

<p>Wifi6 无线局域网传输速度受限解除</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">netsh int tcp <span class="built_in">set</span> global autotuninglevel=restricted</span><br><span class="line">netsh interface tcp <span class="built_in">set</span> heuristics disabled</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows重装系统后</title>
    <url>/2024/07/31/Windows%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E/</url>
    <content><![CDATA[<h2 id="权限处理"><a href="#权限处理" class="headerlink" title="权限处理"></a>权限处理</h2><ol>
<li><a href="https://jingyan.baidu.com/article/19020a0a67964c529d2842b8.html">Win10无法枚举容器中的对象 访问被拒绝</a></li>
<li><a href="https://www.zhihu.com/question/31001796">无法枚举容器内对象 访问被拒绝？</a></li>
</ol>
<h2 id="命令行设置代理"><a href="#命令行设置代理" class="headerlink" title="命令行设置代理"></a>命令行设置代理</h2><ol>
<li><p>PowerShell</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">env</span>:HTTP_PROXY=<span class="string">&quot;socks5://127.0.0.1:10808&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">env</span>:HTTPS_PROXY=<span class="string">&quot;socks5://127.0.0.1:10808&quot;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>CMD</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set http_proxy=socks5://127.0.0.1:10808</span><br><span class="line">set https_proxy=socks5://127.0.0.1:10808</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Windows-Defender配置"><a href="#Windows-Defender配置" class="headerlink" title="Windows Defender配置"></a>Windows Defender配置</h2><p>配置修正选项<br>你可以利用此部分中所述的组策略设置配置修正的工作方式。</p>
<p>若要配置这些设置：</p>
<ol>
<li>组策略管理计算机上，打开组策略管理控制台，右键单击你想要配置并单击编辑的组策略对象。</li>
<li>在组策略管理编辑器转到计算机配置，然后单击管理模板。</li>
<li>将树展开到 Windows 组件 &gt; Windows Defender 防病毒，然后到下表指定的位置。</li>
<li>双击下表指定的策略设置，并将该选项设为所需配置。 单击确定，然后对任何其他设置重复此操作。</li>
</ol>
<table>
<thead>
<tr>
<th>位置</th>
<th>设置</th>
<th>描述</th>
<th>默认设置（如果未配置）</th>
</tr>
</thead>
<tbody><tr>
<td>扫描</td>
<td>创建系统还原点</td>
<td>每天尝试清理或扫描之前将创建一个系统还原点</td>
<td>已禁用</td>
</tr>
<tr>
<td>扫描</td>
<td>开启从扫描历史记录文件夹中删除项目</td>
<td>指定项目应在扫描历史记录中保留的天数</td>
<td>30 天</td>
</tr>
<tr>
<td>根</td>
<td>关闭例行修正</td>
<td>你可以指定 Windows Defender 防病毒自动修正威胁，还是它应该询问终结点用户要执行的操作。</td>
<td>已禁用（自动修正威胁）</td>
</tr>
<tr>
<td>隔离</td>
<td>配置从隔离文件夹中删除项目</td>
<td>指定项目在删除之前应在隔离文件夹中保留的天数</td>
<td>永远不会删除</td>
</tr>
<tr>
<td>威胁</td>
<td>指定检测到威胁时不应执行默认操作的威胁警报级别</td>
<td>每个威胁检测到的 Windows Defender 防病毒被分配一个威胁级别 （低、 中、 高或严重）。 你可以利用此设置来定义应如何修正每个威胁级别的所有威胁（隔离、删除或忽略）</td>
<td>不适用</td>
</tr>
<tr>
<td>威胁</td>
<td>指定检测到时不应对其执行默认操作的威胁</td>
<td>指定应如何修正具体威胁（使用其威胁 ID）。 你可以指定是否应隔离、删除或忽略此特定威胁</td>
<td>不适用</td>
</tr>
</tbody></table>
<p><a href="https://docs.microsoft.com/zh-cn/windows/security/threat-protection/windows-defender-antivirus/configure-remediation-windows-defender-antivirus">Windows Defender</a></p>
<h2 id="组策略配置"><a href="#组策略配置" class="headerlink" title="组策略配置"></a>组策略配置</h2><h3 id="禁用驱动更新"><a href="#禁用驱动更新" class="headerlink" title="禁用驱动更新"></a>禁用驱动更新</h3><ol>
<li>运行<code>gpedit.msc</code></li>
<li><code>计算机配置</code>——》<code>管理模板</code>——》<code>Windows组件</code>——》<code>Windows更新</code>——》<code>管理从Windows 更新提供的更新</code>——》<code>Windows更新不包括驱动程序</code>——》<code>已启用</code></li>
</ol>
<h3 id="支持长文件名"><a href="#支持长文件名" class="headerlink" title="支持长文件名"></a>支持长文件名</h3><p><code>gpedit.msc</code> –&gt; <code>本地计算机策略</code> –&gt; <code>计算机配置</code> –&gt; <code>管理模板</code> –&gt; <code>系统</code> –&gt; <code>文件系统</code> –&gt; <code>启用 Win32 长路径</code></p>
<h2 id="Windows-11展开右键菜单"><a href="#Windows-11展开右键菜单" class="headerlink" title="Windows 11展开右键菜单"></a>Windows 11展开右键菜单</h2><p>以管理员在<code>CMD</code>中执行下面的语句，然后<strong>重启电脑</strong></p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">reg add HKCU\Software\Classes\CLSID\&#123;<span class="number">86</span>ca1aa0-<span class="number">34</span>aa-<span class="number">4</span>e8b-a509-<span class="number">50</span>c905bae2a2&#125;\InprocServer32 /ve /d &quot;&quot; /f</span><br></pre></td></tr></table></figure>

<h2 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h2><p><a href=""></a></p>
<a href="/2024/07/31/VSCode%E8%AE%BE%E7%BD%AE/" title="VSCode设置">VSCode设置</a>

<h2 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h2><h3 id="本地PS可执行"><a href="#本地PS可执行" class="headerlink" title="本地PS可执行"></a>本地PS可执行</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> RemoteSigned</span><br></pre></td></tr></table></figure>

<p>如果从其他电脑或网络上下载的脚步，默认无法执行，需要在文件右键<code>属性</code>–&gt;<code>取消阻止</code><br><a href="https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_signing?view=powershell-7.4">关于签名</a><br><a href="https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.utility/unblock-file?view=powershell-7.4">unblock-file</a></p>
<h3 id="Powershell设置环境变量"><a href="#Powershell设置环境变量" class="headerlink" title="Powershell设置环境变量"></a>Powershell设置环境变量</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看所有环境变量  </span></span><br><span class="line"><span class="built_in">ls</span> env:</span><br><span class="line"></span><br><span class="line"><span class="comment">#搜索环境变量   </span></span><br><span class="line"><span class="built_in">ls</span> env:NODE*</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看单个环境变量 </span></span><br><span class="line"><span class="variable">$env:NODE_ENV</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加/更新环境变量 </span></span><br><span class="line"><span class="variable">$env:NODE_ENV</span>=development</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除环境变量        </span></span><br><span class="line"><span class="built_in">del</span> evn:NODE_ENV</span><br></pre></td></tr></table></figure>

<h3 id="链接设置"><a href="#链接设置" class="headerlink" title="链接设置"></a>链接设置</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Java 相关</span></span><br><span class="line"><span class="comment"># Maven 设置</span></span><br><span class="line">mklink /D <span class="string">&quot;%USERPROFILE%\.m2&quot;</span> <span class="string">&quot;D:\Repository\Maven&quot;</span></span><br><span class="line"><span class="comment">## Gradle设置</span></span><br><span class="line">mklink /D <span class="string">&quot;%USERPROFILE%\.gradle&quot;</span> <span class="string">&quot;D:\Repository\Gradle&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># IDEA</span></span><br><span class="line"><span class="comment"># &gt;Windows:</span></span><br><span class="line"><span class="comment"># &gt;</span></span><br><span class="line"><span class="comment"># &gt;Configuration (idea.config.path): %APPDATA%\JetBrains\IntelliJIdea2022.2</span></span><br><span class="line"><span class="comment"># &gt;Plugins (idea.plugins.path): %APPDATA%\JetBrains\IntelliJIdea2022.2\plugins</span></span><br><span class="line"><span class="comment"># &gt;System (idea.system.path): %LOCALAPPDATA%\JetBrains\IntelliJIdea2022.2</span></span><br><span class="line"><span class="comment"># &gt;Logs (idea.log.path): %LOCALAPPDATA%\JetBrains\IntelliJIdea2022.2\log</span></span><br><span class="line">mklink /D <span class="string">&quot;%APPDATA%\JetBrains\&quot;</span> <span class="string">&quot;D:\Java\IdeaIUConfig\AppData\&quot;</span></span><br><span class="line">mklink /D  <span class="string">&quot;%LOCALAPPDATA%\JetBrains\&quot;</span>  <span class="string">&quot;D:\Java\IdeaIUConfig\LocalAppData\&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># C# Nuget 设置</span></span><br><span class="line">mklink /D <span class="string">&quot;%USERPROFILE%\.nuget&quot;</span> <span class="string">&quot;D:\Repository\Nuget&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># pip</span></span><br><span class="line">mklink /D %USERPROFILE%\pip\ D:\SystemConfig\pip</span><br><span class="line"><span class="comment"># ssh</span></span><br><span class="line">mklink /D %USERPROFILE%\.ssh\ D:\SystemConfig\ssh</span><br></pre></td></tr></table></figure>

<h2 id="Windows-11-24H2版本后共享设置"><a href="#Windows-11-24H2版本后共享设置" class="headerlink" title="Windows 11 24H2版本后共享设置"></a>Windows 11 24H2版本后共享设置</h2><p>Windows 11 24H2版本更改了 SMB 共享默认设置。求强制开启 SMB 签名（以提高安全性）</p>
<h3 id="专业版"><a href="#专业版" class="headerlink" title="专业版"></a>专业版</h3><h4 id="访问其他电脑的共享"><a href="#访问其他电脑的共享" class="headerlink" title="访问其他电脑的共享"></a>访问其他电脑的共享</h4><p><code>Win + R</code> –&gt; <code>gpedit.msc</code> –&gt; <code>计算机配置</code> –&gt; <code>Windows设置</code> –&gt; <code>安全设置</code> –&gt; <code>本地策略</code> –&gt; <code>安全选项</code> –&gt; <code>禁用“Microsoft网络客户端：对通讯进行数字签名（始终）”</code></p>
<h4 id="共享文件给其他电脑"><a href="#共享文件给其他电脑" class="headerlink" title="共享文件给其他电脑"></a>共享文件给其他电脑</h4><p>如果本机还要作为共享服务的服务器，比如要将文件夹共享给区域网内的其他设备使用，那么还需要将 <code>Microsoft网络服务器：对通讯进行数字签名(始终)</code>设置为禁用</p>
<p><code>Win + R</code> –&gt; <code>gpedit.msc</code> –&gt; <code>计算机配置</code> –&gt; <code>Windows设置</code> –&gt; <code>安全设置</code> –&gt; <code>本地策略</code> –&gt; <code>安全选项</code> –&gt; <code>禁用“Microsoft网络服务器：对通讯进行数字签名(始终)”</code></p>
<p>开启匿名登录,否则匿名登录不可用，即使服务器允许也不可用</p>
<p><code>Win + R</code> –&gt; <code>gpedit.msc</code> –&gt; <code>计算机配置</code> –&gt; <code>管理模板</code> –&gt; <code>网络</code> –&gt; <code>Lanman工作站</code> –&gt; <code>启用&quot;启用不安全的来宾用户&quot;</code></p>
<p>重启电脑，并重设文件夹共享(不重设就一直报错)</p>
<h3 id="家庭版"><a href="#家庭版" class="headerlink" title="家庭版"></a>家庭版</h3><p>运行下面的脚本，修改注册表</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">pushd &quot;%~dp0&quot;</span><br><span class="line"></span><br><span class="line">dir /b C:\Windows\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientExtensions-Package~3*.mum &gt;List.txt</span><br><span class="line"></span><br><span class="line">dir /b C:\Windows\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientTools-Package~3*.mum &gt;&gt;List.txt</span><br><span class="line"></span><br><span class="line">for /f %%i in (&#x27;findstr /i . List.txt 2^&gt;nul&#x27;) do dism /online /norestart /add-package:&quot;C:\Windows\servicing\Packages\%%i&quot;</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>grep使用</title>
    <url>/2024/07/30/grep%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">满足任意条件（word1、word2和word3之一）将匹配。</span></span><br><span class="line">cat info.log|grep -E &quot;word1|word2|word3&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">必须同时满足三个条件（word1、word2和word3）才匹配。</span></span><br><span class="line">cat info.log |grep word1 |grep word2|grep word3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">排除关键字</span></span><br><span class="line">ifconfig |grep inet |grep -v inet6</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">排除多个关键字</span></span><br><span class="line">ifconfig |grep inet |grep -v &#x27;inet6\|127.0.0.1&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-a 将二进制当做文本处理,防止有时候编码乱码或者其他</span></span><br><span class="line">cat info.log|grep -a &quot;text&quot;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>rm参数列表过长</title>
    <url>/2024/07/31/rm%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8%E8%BF%87%E9%95%BF/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">frank@1_60:# <span class="built_in">rm</span>  -rf *</span><br><span class="line">-bash: /bin/rm: 参数列表过长</span><br><span class="line">frank@1_60:# find . -name <span class="string">&quot;*&quot;</span>  |xargs <span class="built_in">rm</span>  -rf  <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>保持fork之后的项目和上游同步</title>
    <url>/2024/07/31/%E4%BF%9D%E6%8C%81fork%E4%B9%8B%E5%90%8E%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%92%8C%E4%B8%8A%E6%B8%B8%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<ol>
<li><p>在github上fork原项目</p>
</li>
<li><p>从自己仓库clone到本地</p>
</li>
<li><p>查看当前仓库远程地址</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\FRANK\Desktop\Alipay.AopSdk.Core&gt; git remote <span class="literal">-v</span></span><br><span class="line">origin  https://github.com/frankbsd/Alipay.AopSdk.Core.git (fetch)</span><br><span class="line">origin  https://github.com/frankbsd/Alipay.AopSdk.Core.git (push)</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加别名<code>upstream</code>的上游地址，指向之前fork的原仓库地址</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\FRANK\Desktop\Alipay.AopSdk.Core&gt; git remote add upstream https://github.com/dotnetcore/    Alipay.AopSdk.Core.git</span><br><span class="line"><span class="built_in">PS</span> C:\Users\FRANK\Desktop\Alipay.AopSdk.Core&gt; git remote <span class="literal">-v</span></span><br><span class="line">origin  https://github.com/frankbsd/Alipay.AopSdk.Core.git (fetch)</span><br><span class="line">origin  https://github.com/frankbsd/Alipay.AopSdk.Core.git (push)</span><br><span class="line">upstream        https://github.com/dotnetcore/Alipay.AopSdk.Core.git (fetch)</span><br><span class="line">upstream        https://github.com/dotnetcore/Alipay.AopSdk.Core.git (push)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使自己远程仓库与原仓库保持同步</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\FRANK\Desktop\Alipay.AopSdk.Core&gt; git fetch upstream</span><br><span class="line">From https://github.com/dotnetcore/Alipay.AopSdk.Core</span><br><span class="line"> * [<span class="type">new</span> <span class="type">branch</span>]      dev        -&gt; upstream/dev</span><br><span class="line"> * [<span class="type">new</span> <span class="type">branch</span>]      master     -&gt; upstream/master</span><br><span class="line"><span class="built_in">PS</span> C:\Users\FRANK\Desktop\Alipay.AopSdk.Core&gt; git checkout master</span><br><span class="line">Already on <span class="string">&#x27;master&#x27;</span></span><br><span class="line">Your branch is up to date with <span class="string">&#x27;origin/master&#x27;</span>.</span><br><span class="line"><span class="built_in">PS</span> C:\Users\FRANK\Desktop\Alipay.AopSdk.Core&gt; git merge upstream/master</span><br><span class="line">Already up to date.</span><br><span class="line"><span class="built_in">PS</span> C:\Users\FRANK\Desktop\Alipay.AopSdk.Core&gt; git push origin master</span><br><span class="line">fatal: NotSupportedException encountered.</span><br><span class="line">   ServicePointManager 不支持具有 socks5 方案的代理。</span><br><span class="line">fatal: NotSupportedException encountered.</span><br><span class="line">   ServicePointManager 不支持具有 socks5 方案的代理。</span><br><span class="line">Username <span class="keyword">for</span> <span class="string">&#x27;https://github.com&#x27;</span>: frankbsd</span><br><span class="line">Password <span class="keyword">for</span> <span class="string">&#x27;https://frankbsd@github.com&#x27;</span>:</span><br><span class="line">Everything up<span class="literal">-to-date</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>return语句不影响using释放对象</title>
    <url>/2024/07/31/return%E8%AF%AD%E5%8F%A5%E4%B8%8D%E5%BD%B1%E5%93%8Dusing%E9%87%8A%E6%94%BE%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (A a = <span class="keyword">new</span> A())</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;主程序开始执行。&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">//VS提示&quot;检测到无法访问的代码&quot;</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;using内&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//VS提示&quot;检测到无法访问的代码&quot;,以下语句都不会执行 ???</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;using外&quot;</span>);</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">A</span> : <span class="title">IDisposable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;执行了Dispose方法。&quot;</span>);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<blockquote>
<p>主程序开始执行。<br>执行了Dispose方法。</p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>关于UEFI启动项的一般处理</title>
    <url>/2024/07/31/%E5%85%B3%E4%BA%8EUEFI%E5%90%AF%E5%8A%A8%E9%A1%B9%E7%9A%84%E4%B8%80%E8%88%AC%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h2 id="删除多余启动菜单"><a href="#删除多余启动菜单" class="headerlink" title="删除多余启动菜单"></a>删除多余启动菜单</h2><p>以管理员运行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> D:\Temp\Java&gt; bcdedit.exe /<span class="class"><span class="keyword">enum</span> <span class="title">firmware</span></span></span><br><span class="line"><span class="class"><span class="title">Firmware</span> <span class="title">Boot</span> <span class="title">Manager</span></span></span><br><span class="line"><span class="class">---------------------</span></span><br><span class="line"><span class="class"><span class="title">identifier</span></span>              &#123;fwbootmgr&#125;</span><br><span class="line">displayorder            &#123;bootmgr&#125;</span><br><span class="line">                        &#123;<span class="number">93</span>cee840<span class="literal">-f524-11db-af62-aa767141e6b3</span>&#125;</span><br><span class="line">                        &#123;<span class="number">93</span>cee841<span class="literal">-f524-11db-af62-aa767141e6b3</span>&#125;</span><br><span class="line">                        &#123;<span class="number">93</span>cee842<span class="literal">-f524-11db-af62-aa767141e6b3</span>&#125;</span><br><span class="line">                        &#123;<span class="number">93</span>cee844<span class="literal">-f524-11db-af62-aa767141e6b3</span>&#125;</span><br><span class="line">                        &#123;<span class="number">93</span>cee843<span class="literal">-f524-11db-af62-aa767141e6b3</span>&#125;</span><br><span class="line">timeout                 <span class="number">2</span></span><br><span class="line"></span><br><span class="line">Windows Boot Manager</span><br><span class="line"><span class="literal">--------------------</span></span><br><span class="line">identifier              &#123;bootmgr&#125;</span><br><span class="line">device                  partition=\Device\HarddiskVolume1</span><br><span class="line">path                    \EFI\Microsoft\Boot\bootmgfw.efi</span><br><span class="line">description             Windows Boot Manager</span><br><span class="line">locale                  en<span class="literal">-US</span></span><br><span class="line">inherit                 &#123;globalsettings&#125;</span><br><span class="line">default                 &#123;current&#125;</span><br><span class="line">displayorder            &#123;current&#125;</span><br><span class="line">toolsdisplayorder       &#123;memdiag&#125;</span><br><span class="line">timeout                 <span class="number">30</span></span><br><span class="line"></span><br><span class="line">Firmware Application (<span class="number">101</span>fffff)</span><br><span class="line"><span class="literal">-------------------------------</span></span><br><span class="line">identifier              &#123;<span class="number">93</span>cee840<span class="literal">-f524-11db-af62-aa767141e6b3</span>&#125;</span><br><span class="line">description             Primary Master CDRO</span><br></pre></td></tr></table></figure>

<p>需要注意的是<code>path</code>这个参数，可以看出是否是你想要删除的引导项。例如<code>primeos</code>的路径就是<code>\EFI\android\xxxx</code>，<code>ubuntu</code>的路径是<code>\EFI\ubuntu\xxx</code>，下边会用到其中的<code>identifier</code>项。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">bcdedit /export savebcd</span><br><span class="line"><span class="built_in">copy</span> savebcd newbcd</span><br></pre></td></tr></table></figure>

<p>新建<code>rm.cmd</code>，并写入以下代码，注意后面的<code>&#123;&#125;</code>内的内容替换为我们需要删除的引导项的<code>identifier</code>。</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">Bcdedit /store newbcd /delete &#123;<span class="number">93</span>cee841-f524-<span class="number">11</span>db-af62-aa767141e6b3&#125;</span><br><span class="line">Bcdedit /store newbcd /delete &#123;<span class="number">93</span>cee842-f524-<span class="number">11</span>db-af62-aa767141e6b3&#125;</span><br><span class="line">Bcdedit /store newbcd /delete &#123;<span class="number">93</span>cee843-f524-<span class="number">11</span>db-af62-aa767141e6b3&#125;</span><br><span class="line">Bcdedit /store newbcd /delete &#123;<span class="number">93</span>cee844-f524-<span class="number">11</span>db-af62-aa767141e6b3&#125;</span><br><span class="line">Bcdedit /store newbcd /delete &#123;<span class="number">8</span>b87c5a1-f2f2-<span class="number">11</span>db-<span class="number">9717</span>-f87ee6ea6002&#125;</span><br><span class="line">Bcdedit /store newbcd /delete &#123;<span class="number">8</span>b87c5a2-f2f2-<span class="number">11</span>db-<span class="number">9717</span>-f87ee6ea6002&#125;</span><br><span class="line">Bcdedit /store newbcd /delete &#123;<span class="number">8</span>b87c5a3-f2f2-<span class="number">11</span>db-<span class="number">9717</span>-f87ee6ea6002&#125;</span><br><span class="line">Bcdedit /store newbcd /delete &#123;<span class="number">8</span>b87c5a4-f2f2-<span class="number">11</span>db-<span class="number">9717</span>-f87ee6ea6002&#125;</span><br><span class="line">Bcdedit /import newbcd /clean</span><br></pre></td></tr></table></figure>

<p>运行命令</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">copy</span> rm.<span class="built_in">cmd</span> C:\WINDOWS\system32\</span><br><span class="line">.\rm.<span class="built_in">cmd</span></span><br><span class="line">Bcdedit /enum firmware</span><br><span class="line"><span class="built_in">del</span> rm.<span class="built_in">cmd</span> newbcd savebcd</span><br></pre></td></tr></table></figure>

<p>彻底删除<code>boot</code>分区里的多余引导文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">diskpart</span><br><span class="line">list disk  ;显示所有磁盘</span><br><span class="line">select disk 0 ;boot所在磁盘</span><br><span class="line">list partition ;显示当前磁盘所有分区</span><br><span class="line">select partition 1  ;boot所在分区</span><br><span class="line">assign letter=p  ;这样就可以通过命令进入该分区，进行命令删除操作了</span><br><span class="line">remove letter=p  ;隐藏分区</span><br></pre></td></tr></table></figure>

<p>参考：<br>a. <a href="https://blog.csdn.net/fuyangruc/article/details/107455038">彻底删除UEFI启动项的方法</a><br>b. <a href="https://blog.csdn.net/JohnsonSmile/article/details/89289469">window10下彻底删除多余引导项的终极方法</a></p>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Windows 64位系统的文件系统重定向</title>
    <url>/2024/07/31/%E5%85%B3%E4%BA%8EWindows-64%E4%BD%8D%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    <content><![CDATA[<p>为什么32位的Notepad++通过“打开”，无法选择<code>C:\Windows\System32\</code>下的文件？</p>
<p>原因在于64位Windows系统为了兼容原来32位文件系统，采用了“<a href="https://docs.microsoft.com/zh-cn/windows/desktop/WinProg64/file-system-redirector">文件系统重定向（File System Redirector）</a>”</p>
<p>参考<a href="https://superuser.com/questions/617449/why-is-the-system32-drivers-etc-folder-not-displayed-in-notepad-when-opened-as">Why is the system32\drivers\etc folder not displayed in Notepad++ when opened as Administrator in Windows 7</a></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>同步方法调用异步方法的方式</title>
    <url>/2024/07/31/%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E5%BC%82%E6%AD%A5%E6%96%B9%E6%B3%95%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="问"><a href="#问" class="headerlink" title="问"></a>问</h2><p>我正在更新一个库，该库具有在 .NET 3.5 中构建的 API 界面。因此，所有方法都是同步的。我无法更改 API（即，将返回值转换为 Task），因为这需要更改所有调用者。所以我只剩下如何以同步方式最好地调用异步方法。异步方法是在 ASP.NET 4、ASP.NET Core 和 .NET&#x2F;.NET Core 控制台应用程序的上下文中。  </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> T <span class="title">taskSyncRunner</span>&lt;<span class="title">T</span>&gt;(<span class="params">Func&lt;Task&lt;T&gt;&gt; task</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        T result;</span><br><span class="line">        <span class="comment">// approach 1</span></span><br><span class="line">        result = Task.Run(<span class="keyword">async</span> () =&gt; <span class="keyword">await</span> task()).ConfigureAwait(<span class="literal">false</span>).GetAwaiter().GetResult();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// approach 2</span></span><br><span class="line">        result = Task.Run(task).ConfigureAwait(<span class="literal">false</span>).GetAwaiter().GetResult();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// approach 3</span></span><br><span class="line">        result = task().ConfigureAwait(<span class="literal">false</span>).GetAwaiter().GetResult();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// approach 4</span></span><br><span class="line">        result = Task.Run(task).Result;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// approach 5</span></span><br><span class="line">        result = Task.Run(task).GetAwaiter().GetResult();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// approach 6</span></span><br><span class="line">        <span class="keyword">var</span> t = task();</span><br><span class="line">        t.RunSynchronously();</span><br><span class="line">        result = t.Result;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// approach 7</span></span><br><span class="line">        <span class="keyword">var</span> t1 = task();</span><br><span class="line">        Task.WaitAll(t1);</span><br><span class="line">        result = t1.Result;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// approach 8?</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="答"><a href="#答" class="headerlink" title="答"></a>答</h2><blockquote>
<p>所以我只剩下如何以同步方式最好地调用异步方法。</p>
</blockquote>
<p>首先，这样做是可以的。我之所以这么说，是因为 Stack Overflow 上普遍有人不顾具体情况，一概而论地指出这是魔鬼的行为。</p>
<p>为了保证正确性，并不需要一直保持异步。阻塞异步操作以使其同步会产生性能成本，这可能很重要，也可能完全无关紧要。这取决于具体情况。</p>
<p>死锁是由于两个线程试图同时进入同一个单线程同步上下文而产生的。任何可以避免这种情况的技术都可以可靠地避免阻塞导致的死锁。</p>
<p>在您的代码片段中，所有对的<code>.ConfigureAwait(false)</code>调用都是无意义的，因为没有等待返回值。<code>ConfigureAwait</code>返回一个结构，当等待时，它会表现出您请求的行为。如果只是删除该结构，它什么也不做。</p>
<p><code>RunSynchronously</code>无效，因为并非所有任务都可以通过这种方式处理。此方法适用于基于 CPU 的任务，在某些情况下可能会失败。</p>
<p><code>.GetAwaiter().GetResult()</code>不同于<code>Result/Wait()</code>, 它模仿<code>await</code>异常传播行为。您需要决定是否要这样做。（因此，请研究该行为是什么；无需在此重复。）如果您的任务包含单个异常，则错误<code>await</code>行为通常很方便，并且几乎没有缺点。如果有多个异常，例如来自<code>Parallel</code>多个任务失败的失败循环，<code>await</code>则会删除除第一个之外的所有异常。这会使调试更加困难。</p>
<p>所有这些方法的性能都差不多。它们会以某种方式分配一个操作系统事件并阻塞它。这是最昂贵的部分。相比之下，其他机制相当便宜。我不知道哪种方法绝对最便宜。</p>
<p>如果抛出异常，那将是最昂贵的部分。在 .NET 5 上，在快速 CPU 上，异常的处理速度最多为每秒 200,000 个。深堆栈速度较慢，任务机制往往会重新抛出异常，从而使其成本成倍增加。例如，有几种方法可以阻止任务而不重新抛出异常.比如</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">task.ContinueWith(_ =&gt; &#123; &#125;, TaskContinuationOptions.ExecuteSynchronously).Wait();</span><br></pre></td></tr></table></figure>

<p>我个人喜欢这个<code>Task.Run(() =&gt; DoSomethingAsync()).Wait();</code>模式(<code>Task.Run(async () =&gt; await DoSomethingAsync());</code>一样)，因为它可以彻底避免死锁，它很简单，而且不会隐藏一些GetResult()可能隐藏的异常。但你GetResult()也可以使用它。</p>
<p>原文<a href="https://stackoverflow.com/questions/40324300/calling-async-methods-from-non-async-code">Calling async methods from non-async code</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>安装 Windows 11 22H2 时断网</title>
    <url>/2024/07/31/%E5%AE%89%E8%A3%85-Windows-11-22H2-%E6%97%B6%E6%96%AD%E7%BD%91/</url>
    <content><![CDATA[<p>在安装过程中联网那个地方 <code>Shift + F10</code>，输入 <code>oobe\BypassNRO.cmd</code> ，然后会重启就可以跳过了。</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>PowerShell</tag>
      </tags>
  </entry>
  <entry>
    <title>快速切换Java版本</title>
    <url>/2024/07/31/%E5%BF%AB%E9%80%9F%E5%88%87%E6%8D%A2Java%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="Windows系统"><a href="#Windows系统" class="headerlink" title="Windows系统"></a>Windows系统</h2><h3 id="JDK函数"><a href="#JDK函数" class="headerlink" title="JDK函数"></a>JDK函数</h3><ol>
<li><p>编辑<code>~\Documents\WindowsPowerShell\JDK.Settings.ps1</code></p>
</li>
<li><p><code>PowerShell</code> 中默认 <code>CodePage</code> 为 <code>936</code>， <code>UTF-8</code> 中文会乱码</p>
</li>
<li><p>以 <code>UTF-8</code>保存,不要以 <code>GBK</code>&#x2F;<code>GB18030</code>&#x2F;<code>GB2312</code>保存，编辑器默认<code>UTF-8</code>，容易错误保存，造成乱码。</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$jdkPaths</span> = <span class="selector-tag">@</span>&#123;</span><br><span class="line">    <span class="string">&quot;8&quot;</span>  = <span class="string">&quot;D:\Java\JDK\Liberica\jdk8u442&quot;</span></span><br><span class="line">    <span class="string">&quot;11&quot;</span> = <span class="string">&quot;D:\Java\JDK\Liberica\jdk-11.0.26&quot;</span></span><br><span class="line">    <span class="string">&quot;17&quot;</span> = <span class="string">&quot;D:\Java\JDK\Liberica\jdk-17.0.14&quot;</span></span><br><span class="line">    <span class="string">&quot;21&quot;</span> = <span class="string">&quot;D:\Java\JDK\Liberica\jdk-21.0.6&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set-JavaVersion</span></span> &#123;</span><br><span class="line">    <span class="keyword">param</span> (</span><br><span class="line">        [<span class="type">ValidateSet</span>(<span class="string">&quot;8&quot;</span>, <span class="string">&quot;11&quot;</span>, <span class="string">&quot;17&quot;</span>, <span class="string">&quot;21&quot;</span>)]</span><br><span class="line">        [<span class="built_in">string</span>]<span class="variable">$version</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="operator">-not</span> <span class="variable">$jdkPaths</span>.ContainsKey(<span class="variable">$version</span>)) &#123;</span><br><span class="line">        <span class="built_in">Write-Error</span> <span class="string">&quot;JDK version <span class="variable">$version</span> is not defined&quot;</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$jdkPath</span> = <span class="variable">$jdkPaths</span><span class="function">[<span class="variable">$version</span>]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="operator">-not</span> (<span class="built_in">Test-Path</span> <span class="variable">$jdkPath</span>)) &#123;</span><br><span class="line">        <span class="built_in">Write-Error</span> <span class="string">&quot;JDK Path: &#x27;<span class="variable">$jdkPath</span>&#x27; does not exist&quot;</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$env:JAVA_HOME</span> = <span class="variable">$jdkPath</span></span><br><span class="line">    <span class="variable">$env:Path</span> = <span class="string">&quot;<span class="variable">$jdkPath</span>\bin;&quot;</span> + ((<span class="variable">$env:Path</span> <span class="operator">-split</span> <span class="string">&#x27;;&#x27;</span> | <span class="built_in">Where-Object</span> &#123; <span class="variable">$_</span> <span class="operator">-notmatch</span> <span class="string">&#x27;jdk&#x27;</span> &#125;) <span class="operator">-join</span> <span class="string">&#x27;;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Write-Host</span> <span class="string">&quot;JAVA_HOME set to: <span class="variable">$jdkPath</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Get-JavaVersions</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Write-Host</span> <span class="string">&quot;Available JDK`n&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$version</span> <span class="keyword">in</span> <span class="variable">$jdkPaths</span>.Keys | <span class="built_in">Sort-Object</span> &#123;[<span class="built_in">int</span>]<span class="variable">$_</span>&#125;) &#123;</span><br><span class="line">        <span class="variable">$path</span> = <span class="variable">$jdkPaths</span><span class="function">[<span class="variable">$version</span>]</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Test-Path</span> <span class="string">&quot;<span class="variable">$path</span>\bin\java.exe&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$verOutput</span> = &amp; <span class="string">&quot;<span class="variable">$path</span>\bin\java.exe&quot;</span> <span class="literal">-version</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> | <span class="built_in">Select-Object</span> <span class="literal">-First</span> <span class="number">1</span></span><br><span class="line">            <span class="built_in">Write-Host</span> <span class="string">&quot;JDK <span class="variable">$version</span> : <span class="variable">$verOutput</span>&quot;</span></span><br><span class="line">            <span class="built_in">Write-Host</span> <span class="string">&quot;     Path: <span class="variable">$path</span>`n&quot;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">Write-Host</span> <span class="string">&quot;JDK <span class="variable">$version</span> : java.exe not found&quot;</span></span><br><span class="line">            <span class="built_in">Write-Host</span> <span class="string">&quot;     Path: <span class="variable">$path</span>`n&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Maven函数"><a href="#Maven函数" class="headerlink" title="Maven函数"></a>Maven函数</h3><ol>
<li>类似的,编辑<code>~\Documents\WindowsPowerShell\Maven.Settings.ps1</code></li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable">$mavenPaths</span> = <span class="selector-tag">@</span>&#123;</span><br><span class="line">    <span class="string">&quot;3.9.9&quot;</span>  = <span class="string">&quot;D:\Java\Maven\LocalMaven\apache-maven-3.9.9&quot;</span></span><br><span class="line">    <span class="string">&quot;3.9.8&quot;</span>  = <span class="string">&quot;D:\Java\Maven\LocalMaven\apache-maven-3.9.8&quot;</span></span><br><span class="line">    <span class="string">&quot;3.8.6&quot;</span> = <span class="string">&quot;D:\Java\Maven\LocalMaven\apache-maven-3.8.6&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set-MavenVersion</span></span> &#123;</span><br><span class="line">    <span class="keyword">param</span> (</span><br><span class="line">        [<span class="type">ValidateSet</span>(<span class="string">&quot;3.9.9&quot;</span>,<span class="string">&quot;3.9.8&quot;</span>, <span class="string">&quot;3.8.6&quot;</span>)]</span><br><span class="line">        [<span class="built_in">string</span>]<span class="variable">$version</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="operator">-not</span> <span class="variable">$mavenPaths</span>.ContainsKey(<span class="variable">$version</span>)) &#123;</span><br><span class="line">        <span class="built_in">Write-Error</span> <span class="string">&quot;Maven version <span class="variable">$version</span> is not defined&quot;</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$mavenPath</span> = <span class="variable">$mavenPaths</span><span class="function">[<span class="variable">$version</span>]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="operator">-not</span> (<span class="built_in">Test-Path</span> <span class="variable">$mavenPath</span>)) &#123;</span><br><span class="line">        <span class="built_in">Write-Error</span> <span class="string">&quot;Maven Path : &#x27;<span class="variable">$mavenPath</span>&#x27; does not exist&quot;</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$env:MAVEN_HOME</span> = <span class="variable">$mavenPath</span></span><br><span class="line">    <span class="variable">$env:Path</span> = <span class="string">&quot;<span class="variable">$mavenPath</span>\bin;&quot;</span> + ((<span class="variable">$env:Path</span> <span class="operator">-split</span> <span class="string">&#x27;;&#x27;</span> | <span class="built_in">Where-Object</span> &#123; <span class="variable">$_</span> <span class="operator">-notmatch</span> <span class="string">&#x27;apache-maven&#x27;</span> &#125;) <span class="operator">-join</span> <span class="string">&#x27;;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Write-Host</span> <span class="string">&quot;MAVEN_HOME set to: <span class="variable">$mavenPath</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Get-MavenVersions</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Write-Host</span> <span class="string">&quot;Available Maven`n&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$version</span> <span class="keyword">in</span> <span class="variable">$mavenPaths</span>.Keys | <span class="built_in">Sort-Object</span> <span class="literal">-Descending</span>) &#123;</span><br><span class="line">        <span class="variable">$path</span> = <span class="variable">$mavenPaths</span><span class="function">[<span class="variable">$version</span>]</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Test-Path</span> <span class="string">&quot;<span class="variable">$path</span>\bin\mvn.cmd&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$verOutput</span> = &amp; <span class="string">&quot;<span class="variable">$path</span>\bin\mvn.cmd&quot;</span> <span class="literal">-version</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> | <span class="built_in">Select-Object</span> <span class="literal">-First</span> <span class="number">1</span></span><br><span class="line">            <span class="built_in">Write-Host</span> <span class="string">&quot;Maven <span class="variable">$version</span> : <span class="variable">$verOutput</span>&quot;</span></span><br><span class="line">            <span class="built_in">Write-Host</span> <span class="string">&quot;     Path: <span class="variable">$path</span>`n&quot;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">Write-Host</span> <span class="string">&quot;Maven <span class="variable">$version</span> : mvn.cmd not found&quot;</span></span><br><span class="line">            <span class="built_in">Write-Host</span> <span class="string">&quot;     Path: <span class="variable">$path</span>`n&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Gradle函数"><a href="#Gradle函数" class="headerlink" title="Gradle函数"></a>Gradle函数</h3><ol>
<li>类似的,编辑<code>~\Documents\WindowsPowerShell\Gradle.Settings.ps1</code></li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$gradlePaths</span> = <span class="selector-tag">@</span>&#123;</span><br><span class="line">    <span class="string">&quot;8.13&quot;</span> = <span class="string">&quot;D:\Java\Gradle\LocalGradle\gradle-8.13&quot;</span></span><br><span class="line">    <span class="string">&quot;7.6&quot;</span> = <span class="string">&quot;D:\Java\Gradle\LocalGradle\gradle-7.6.4&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set-GradleVersion</span></span> &#123;</span><br><span class="line">    <span class="keyword">param</span> (</span><br><span class="line">        [<span class="type">ValidateSet</span>(<span class="string">&quot;8.13&quot;</span>, <span class="string">&quot;7.6&quot;</span>)]</span><br><span class="line">        [<span class="built_in">string</span>]<span class="variable">$version</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="operator">-not</span> <span class="variable">$gradlePaths</span>.ContainsKey(<span class="variable">$version</span>)) &#123;</span><br><span class="line">        <span class="built_in">Write-Error</span> <span class="string">&quot;Gradle version <span class="variable">$version</span> is not defined&quot;</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$gradlePath</span> = <span class="variable">$gradlePaths</span><span class="function">[<span class="variable">$version</span>]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="operator">-not</span> (<span class="built_in">Test-Path</span> <span class="variable">$gradlePath</span>)) &#123;</span><br><span class="line">        <span class="built_in">Write-Error</span> <span class="string">&quot;Gradle Path: &#x27;<span class="variable">$gradlePath</span>&#x27; does not exist&quot;</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$env:GRADLE_HOME</span> = <span class="variable">$gradlePath</span></span><br><span class="line">    <span class="variable">$env:Path</span> = <span class="string">&quot;<span class="variable">$gradlePath</span>\bin;&quot;</span> + ((<span class="variable">$env:Path</span> <span class="operator">-split</span> <span class="string">&#x27;;&#x27;</span> | <span class="built_in">Where-Object</span> &#123; <span class="variable">$_</span> <span class="operator">-notmatch</span> <span class="string">&#x27;gradle&#x27;</span> &#125;) <span class="operator">-join</span> <span class="string">&#x27;;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Write-Host</span> <span class="string">&quot;GRADLE_HOME set to: <span class="variable">$gradlePath</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Get-GradleVersions</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Write-Host</span> <span class="string">&quot;Available Gradle`n&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$version</span> <span class="keyword">in</span> <span class="variable">$gradlePaths</span>.Keys | <span class="built_in">Sort-Object</span> &#123;[<span class="built_in">int</span>]<span class="variable">$_</span>&#125;) &#123;</span><br><span class="line">        <span class="variable">$path</span> = <span class="variable">$gradlePaths</span><span class="function">[<span class="variable">$version</span>]</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Test-Path</span> <span class="string">&quot;<span class="variable">$path</span>\bin\gradle.bat&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$verOutput</span> = &amp; <span class="string">&quot;<span class="variable">$path</span>\bin\gradle.bat&quot;</span> <span class="literal">-version</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> | <span class="built_in">Select-Object</span>  <span class="literal">-Skip</span> <span class="number">6</span> <span class="literal">-First</span> <span class="number">1</span></span><br><span class="line">            <span class="built_in">Write-Host</span> <span class="string">&quot;Gradle <span class="variable">$version</span> : <span class="variable">$verOutput</span>&quot;</span></span><br><span class="line">            <span class="built_in">Write-Host</span> <span class="string">&quot;     Path: <span class="variable">$path</span>`n&quot;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">Write-Host</span> <span class="string">&quot;Gradle <span class="variable">$version</span> : gradle.bat not found&quot;</span></span><br><span class="line">            <span class="built_in">Write-Host</span> <span class="string">&quot;     Path: <span class="variable">$path</span>`n&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加到Microsoft-PowerShell-profile-ps1"><a href="#添加到Microsoft-PowerShell-profile-ps1" class="headerlink" title="添加到Microsoft.PowerShell_profile.ps1"></a>添加到<code>Microsoft.PowerShell_profile.ps1</code></h3><ol>
<li><p>编辑<code>~\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1</code>,添加如下内容，以导入 <code>JDK.Settings.ps1</code>、<code>Maven.Settings.ps1</code> 和 <code>Gradle.Settings.ps1</code></p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">. <span class="string">&quot;<span class="variable">$PSScriptRoot</span>\JDK.Settings.ps1&quot;</span></span><br><span class="line"><span class="built_in">Set-JavaVersion</span> <span class="number">21</span></span><br><span class="line"></span><br><span class="line">. <span class="string">&quot;<span class="variable">$PSScriptRoot</span>\Maven.Settings.ps1&quot;</span></span><br><span class="line"><span class="built_in">Set-MavenVersion</span> <span class="number">3.9</span>.<span class="number">9</span></span><br><span class="line"></span><br><span class="line">. <span class="string">&quot;<span class="variable">$PSScriptRoot</span>\Gradle.Settings.ps1&quot;</span></span><br><span class="line"><span class="built_in">Set-GradleVersion</span> <span class="number">8.13</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>说明：</p>
<ul>
<li>jabba提供的在线版本不全，也不一定是自己需要的</li>
<li>jabba添加本地版本是，命名必须是<code>system@xxxx</code>格式</li>
<li>sdkMan不支持Windows</li>
<li>jvms 有bug,不能使用</li>
</ul>
<h2 id="Linux-Mac等"><a href="#Linux-Mac等" class="headerlink" title="Linux&#x2F;Mac等"></a>Linux&#x2F;Mac等</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install zip unzip curl</span><br><span class="line">curl  <span class="string">&quot;https://get.sdkman.io&quot;</span> | bash  </span><br><span class="line"><span class="comment"># 如果上面的命令出现错误`curl: (56) OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 104` 添加选项` -A &quot;Mozilla Chrome Safari&quot;`</span></span><br><span class="line">curl -A <span class="string">&quot;Mozilla Chrome Safari&quot;</span>  <span class="string">&quot;https://get.sdkman.io&quot;</span> | bash</span><br><span class="line"><span class="built_in">source</span> <span class="string">&quot;<span class="variable">$HOME</span>/.sdkman/bin/sdkman-init.sh&quot;</span></span><br><span class="line">sdk version</span><br></pre></td></tr></table></figure>

<p><a href="https://sdkman.io/">SDKMan</a><br>SDK使用方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage:  sdk &lt;<span class="built_in">command</span>&gt;   [candidate] [version]</span><br><span class="line">        sdk offline     &lt;<span class="built_in">enable</span>|<span class="built_in">disable</span>&gt;</span><br><span class="line">    commands</span><br><span class="line">        install     or i    &lt;candidate&gt; [version]   [local-path]</span><br><span class="line">        uninstall   or <span class="built_in">rm</span>   &lt;candidate&gt; &lt;version&gt;</span><br><span class="line">        list        or <span class="built_in">ls</span>   [candidate]</span><br><span class="line">        use         or u    &lt;candidate&gt; &lt;version&gt;</span><br><span class="line">        config      </span><br><span class="line">        default     or d    &lt;candidate&gt;[version]</span><br><span class="line">        home        or h    &lt;candidate&gt;&lt;version&gt;</span><br><span class="line">        <span class="built_in">env</span>         or e    [init installclear]</span><br><span class="line">        current     or c    [candidate]</span><br><span class="line">        upgrade     or ug   [candidate]</span><br><span class="line">        version     or v    </span><br><span class="line">        broadcast   or b</span><br><span class="line">        <span class="built_in">help</span></span><br><span class="line">        offline     [<span class="built_in">enable</span> | <span class="built_in">disable</span>]</span><br><span class="line">        selfupdate  [force]</span><br><span class="line">        update</span><br><span class="line">        flush       [tmp|broadcast|metadata|version]</span><br><span class="line"></span><br><span class="line">    candidate   :       the SDK to install:groovy,scala,grails,gradle,kotlin,etc.</span><br><span class="line">                        use list <span class="built_in">command</span> <span class="keyword">for</span> comprehensive list of candidates</span><br><span class="line">                        eg:S sdk list</span><br><span class="line">    version     :       <span class="built_in">where</span> optional,defaults to latest stable <span class="keyword">if</span> not provided</span><br><span class="line">                        eg:sdk install groovy</span><br><span class="line">    local-path  :       optional path to an existing <span class="built_in">local</span> installation</span><br><span class="line">                        eg:sdk install groovy 2.4.13-<span class="built_in">local</span> /opt/groovy-2.4.13</span><br></pre></td></tr></table></figure>

<h2 id="JDK下载地址"><a href="#JDK下载地址" class="headerlink" title="JDK下载地址"></a>JDK下载地址</h2><p><a href="https://adoptium.net/zh-CN/">Temurin JDK</a><br><a href="https://bell-sw.com/pages/downloads">Liberica JDK</a><br><a href="https://www.oracle.com/hk/java/technologies/downloads/">Oracle JDK</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>快速彻底删除node_modules</title>
    <url>/2024/07/31/%E5%BF%AB%E9%80%9F%E5%BD%BB%E5%BA%95%E5%88%A0%E9%99%A4node-modules/</url>
    <content><![CDATA[<p>使用 Node.js 组件 rimraf</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install rimraf <span class="literal">-g</span></span><br><span class="line">rimraf node_modules</span><br></pre></td></tr></table></figure>

<p>使用 PowerShell</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Remove-Item</span> <span class="literal">-Recurse</span>  <span class="literal">-Force</span> node_modules</span><br></pre></td></tr></table></figure>

<p>增加<code>rmrf.ps1</code>，并放入系统<code>PATH</code>目录</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Remove-Item</span> <span class="literal">-Recurse</span>  <span class="literal">-Force</span> <span class="literal">-Path</span> <span class="variable">$args</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>PowerShell</tag>
      </tags>
  </entry>
  <entry>
    <title>怎样看公司财务报表</title>
    <url>/2024/07/31/%E6%80%8E%E6%A0%B7%E7%9C%8B%E5%85%AC%E5%8F%B8%E8%B4%A2%E5%8A%A1%E6%8A%A5%E8%A1%A8/</url>
    <content><![CDATA[<p>拿到一份财务报表，很多人不知道如何下手，其实分析企业财务一般从企业偿债能力、营运能力和盈利能力等方面分析以下一张图涵盖了财务分析的各维度，各指标。</p>
<p><img src="/2024/07/31/%E6%80%8E%E6%A0%B7%E7%9C%8B%E5%85%AC%E5%8F%B8%E8%B4%A2%E5%8A%A1%E6%8A%A5%E8%A1%A8/1.jpg" alt="1"></p>
<h3 id="财务报表分析的思路"><a href="#财务报表分析的思路" class="headerlink" title="财务报表分析的思路"></a>财务报表分析的思路</h3><p><img src="/2024/07/31/%E6%80%8E%E6%A0%B7%E7%9C%8B%E5%85%AC%E5%8F%B8%E8%B4%A2%E5%8A%A1%E6%8A%A5%E8%A1%A8/2.jpg" alt="2"></p>
<h3 id="一、基本思路"><a href="#一、基本思路" class="headerlink" title="一、基本思路"></a>一、基本思路</h3><ul>
<li>捕捉：报表各项目的具体数据只是表面，结构(各种比率或指标)是骨架，趋势是核心。结构比数值重要，而趋势比结构重要</li>
<li>对比：财务报表只有通过对比式阅读才有意义，通常情况下至少要横比三家纵比三年才能得出相对科学的结论。</li>
<li>掌握：各种会计原则都有天然的局限，不能迷信或局限于报表分析，不妄下结论。</li>
</ul>
<h3 id="二、分析方法"><a href="#二、分析方法" class="headerlink" title="二、分析方法"></a>二、分析方法</h3><ol>
<li><p>结构分析</p>
<ol>
<li><p>检查报表的各种钩稽关系，这是基本功。</p>
</li>
<li><p>做报表结构的横向对比，找出与同行之间的重大指标差异并分析原因。比较重要的指标是毛利率、净利率、∑经营活动现金流&#x2F;∑销售收入、销售收入&#x2F;固定资产、流动资产&#x2F;非流动资产、存货&#x2F;固定资产、负债&#x2F;总资产，等等。不必拘泥于教科书上的经典指标，甚至可根据行业特性自创比率，一切奥妙存乎于心。</p>
</li>
</ol>
<p> 结构差异列出之后，要从竞争力、产品细分、商业模式、规模、地域等方面进行推理，若找不出合理原因则有理由怀疑报表的真实性</p>
<p> <img src="/2024/07/31/%E6%80%8E%E6%A0%B7%E7%9C%8B%E5%85%AC%E5%8F%B8%E8%B4%A2%E5%8A%A1%E6%8A%A5%E8%A1%A8/3.jpg" alt="3"></p>
</li>
<li><p>趋势分析</p>
<p> 趋势分析的重要内容是资产、收入和利润。<br><br> 资产的增加主要分析是来源于负债还是权益(盈利或股东投入)，此外还要重点关注各资产科目的比例变化，这往往体现了企业的模式变化。<br><br> 收入的增加主要分析是来源于合并范围扩大还是自身经营扩张，重点关注毛利率和市场占有率的变化。总体来说，在毛利率较小波动的前提下市场占有率逐步增长才是最可靠最有持续性的情形，除此之外都要认真分析。<br><br> 利润的增加要综合资产与收入的增长作逻辑推理，但利润系经过若干加减之后处于报表末尾，客观性最弱，要深入理解权责发生制的缺陷与漏洞之后辨证看待。</p>
</li>
</ol>
<p><img src="/2024/07/31/%E6%80%8E%E6%A0%B7%E7%9C%8B%E5%85%AC%E5%8F%B8%E8%B4%A2%E5%8A%A1%E6%8A%A5%E8%A1%A8/4.jpg"></p>
<p>企业的价值在于发展趋势，需要深入揣摩、熟能生巧。而这与所处行业紧密相关，不能仅凭报表做出草率结论。</p>
<h3 id="财务三大报表"><a href="#财务三大报表" class="headerlink" title="财务三大报表"></a>财务三大报表</h3><h4 id="一、资产负债表"><a href="#一、资产负债表" class="headerlink" title="一、资产负债表"></a>一、资产负债表</h4><p>资产负债表主要是告诉我们在出报表的时刻公司资产负债情况如何，所以，报表关键是看出的时间，时间对这张报表的影响很大。最重要的一个“勾稽关系”就是资产等于负债加上权益。就是现在拥有的一切，不外乎来源于两个方面，一个是本来就是自己的，另一个就是借来的，自己有的，再加上借来的，当然就是现在拥有的一切。在会计上，目前我拥有的一切，就叫资产，而借来的钱，就是负债，自己的，就叫权益。这就是资产负债表最重要的内部“勾稽关系”。</p>
<p><img src="/2024/07/31/%E6%80%8E%E6%A0%B7%E7%9C%8B%E5%85%AC%E5%8F%B8%E8%B4%A2%E5%8A%A1%E6%8A%A5%E8%A1%A8/5.jpg" alt="5"></p>
<h4 id="二、利润表"><a href="#二、利润表" class="headerlink" title="二、利润表"></a>二、利润表</h4><p>利润表或损益表，主要是告诉我们在一段时间里，公司的损益情况，损益表关键一点，就是看这段时间有多长，一般是一个月，一个季度或一年的时间。在损益表里，最重要的一个“勾稽关系”就是收入减去成本费用，等于利润。</p>
<p><img src="/2024/07/31/%E6%80%8E%E6%A0%B7%E7%9C%8B%E5%85%AC%E5%8F%B8%E8%B4%A2%E5%8A%A1%E6%8A%A5%E8%A1%A8/6.jpg" alt="6"></p>
<h4 id="三、现金流量表"><a href="#三、现金流量表" class="headerlink" title="三、现金流量表"></a>三、现金流量表</h4><p>现金流量表，主要是告诉我们，在一段时间里，这个公司收进了多少现金，付出去了多少现金，还余下多少现金在银行里。这张报表的关键也是要看这段时间有多长了，这一点同利益表或损益表一样。在这张表里，最重要的一个“勾稽关系”就是流入的现金减去流出的现金，等于余下的现金，这个关系也十分简单，就不用多解释了。</p>
<p><img src="/2024/07/31/%E6%80%8E%E6%A0%B7%E7%9C%8B%E5%85%AC%E5%8F%B8%E8%B4%A2%E5%8A%A1%E6%8A%A5%E8%A1%A8/7.jpg" alt="7"></p>
<p>这是从大的层面上来说，报表分析是很简单的，因为毕竟是表内的关系，一般是一些加加减减，然后汇总，只要明白各个项目内的加减关系，同时计算没有什么问题，一般不会出什么错。但也不要小看这些表内“勾稽关系”，特别是资产负债表里的那个“勾稽关系”，就是资产等于负债加权益，这个是会计的一个核心原理之一。</p>
<h3 id="报表分析工具"><a href="#报表分析工具" class="headerlink" title="报表分析工具"></a>报表分析工具</h3><p>如果数据量没有大到用到数据库，excel就能胜任，当然如果会写VB的话，excel也能连数据库。spss、sas、stata这些专业统计软件，搞线性回归、F统计、抽样、假设检验用得上。</p>
<p>但如果涉及到数据库，那还是选择专业软件。首先Excel对数据的处理性能是有限的，而且很难实现实时数据更新。在具体的报表工具选型上，国外软件并不推荐，水晶报表这种做中国式报表有巨大的局限；国产软件方面，Finereport等报表工具采用拖拽式操作，类excel界面，其功能、性能的确更好地解决了中国用户的需求。</p>
<p>除了报表工具，以上还可以利用BI工具制作dashboard来解决，例如FineBI等，形成一个财务管理驾驶舱，操作上是将数据字段拖拽生成一个个分析图表，共同组合成一个主题的分析。</p>
<p><img src="/2024/07/31/%E6%80%8E%E6%A0%B7%E7%9C%8B%E5%85%AC%E5%8F%B8%E8%B4%A2%E5%8A%A1%E6%8A%A5%E8%A1%A8/8.jpg" alt="8"></p>
<h3 id="附录：财务报表分析指标"><a href="#附录：财务报表分析指标" class="headerlink" title="附录：财务报表分析指标"></a>附录：财务报表分析指标</h3><p>1、流动比率</p>
<p>流动比率&#x3D;流动资产&#x2F;流动负债</p>
<p>一般认为，流动比率若达到2倍时，是最令人满意的。若流动比率过低，企业可能面临着到期偿还债务的困难。若流动比率过高，这又意味着企业持有较多的不能赢利的闲置流动资产。使用这一指标评价企业流动指标时，应同时结合企业的具体情况。</p>
<p>2、速动比率</p>
<p>速动比率又称酸性实验比例，是指速动资产占流动负债的比率，它反映企业短期内可变现资产偿还短期内到期债务的能力。速动比率是对流动比率的补充。计算公式如下：</p>
<p>速动比例&#x3D;速动资产&#x2F;流动负债</p>
<p>速动资产是企业在短期内可变现的资产，等于流动资产减去流动速度较慢的存货的余额，包括货币资金、短期投资和应收账款等。一般认为速动比率1：1是合理的，速动比率若大于1，企业短期偿债能力强，但获利能力将下降。速动比率若小于1，企业将需要依赖出售存货或举借新债来偿还到期债务。</p>
<p>3、现金比率</p>
<p>现金比率是企业现金同流动负债的比率。这里说的现金，包括现金和现金等价物。这项比率可显示企业立即偿还到期债务的能力，其计算公式为：现金比率&#x3D;现金&#x2F;流动负债。</p>
<p>4、 资产负债率</p>
<p>资产负债率，亦称负债比率、举债经营比率，是指负债总额对全部资产总额之比，用来衡量企业利用债权人提供资金进行经营活动的能力，反映债权人发放贷款的安全程度。计算公式为：</p>
<p>资产负债率&#x3D;（负债总额&#x2F;资产总额）X100%</p>
<p>一般认为，资产负债率应保持在50%左右，这说明企业有较好的偿债能力，又充分利用了负债经营能力。</p>
<p>作者：帆软<br>链接：<a href="https://www.zhihu.com/question/20324128/answer/684131335">https://www.zhihu.com/question/20324128/answer/684131335</a></p>
]]></content>
      <categories>
        <category>投机</category>
      </categories>
      <tags>
        <tag>投机</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建Git服务器</title>
    <url>/2024/07/31/%E6%90%AD%E5%BB%BAGit%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p>说明：此文是在FreeBSD系统下的处理过程，未来得及修改</p>
<h3 id="安装-Git-并创建Git仓储目录"><a href="#安装-Git-并创建Git仓储目录" class="headerlink" title="安装 Git 并创建Git仓储目录"></a>安装 Git 并创建Git仓储目录</h3><pre><code><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">pkg install git</span></span><br></pre></td></tr></table></figure>
</code></pre>
<h3 id="添加-git-用户"><a href="#添加-git-用户" class="headerlink" title="添加 git 用户"></a>添加 git 用户</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pw groupadd -n git -g 9418</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pw useradd -n git -u 9418 -g git -c git -d /home/git -s /usr/local/libexec/git-core/git-shell -h -</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">passwd git</span></span><br></pre></td></tr></table></figure>

<h3 id="创建仓库根目录，并确认权限正确"><a href="#创建仓库根目录，并确认权限正确" class="headerlink" title="创建仓库根目录，并确认权限正确"></a>创建仓库根目录，并确认权限正确</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /home/git</span><br><span class="line">chown git:git /home/git</span><br><span class="line">mkdir /home/git/base</span><br><span class="line">chown git:git /home/git/base</span><br><span class="line">chmode 775 /home/git/base</span><br></pre></td></tr></table></figure>

<h3 id="添加能够访问-home-git-base建立仓库的用户到git用户组"><a href="#添加能够访问-home-git-base建立仓库的用户到git用户组" class="headerlink" title="添加能够访问&#x2F;home&#x2F;git&#x2F;base建立仓库的用户到git用户组"></a>添加能够访问&#x2F;home&#x2F;git&#x2F;base建立仓库的用户到git用户组</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vi /etc/group</span></span><br><span class="line">git:*:9418:user1,user2</span><br></pre></td></tr></table></figure>

<h3 id="使用SSH-keys认证"><a href="#使用SSH-keys认证" class="headerlink" title="使用SSH keys认证"></a>使用SSH keys认证</h3><p>  首先，收集所有需要有提交权限的用户的public keys。然后把这些public keys添加到<code>/home/git/.ssh/</code>目录下面。对应的客户端比如Windows10，在<code>C:\Users\Frank\.ssh\</code>下面应包含此公约和对应的私钥，如果只包含私钥，在push或pull时会一直提示输入密码，即ssh配置失败。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">mkdir</span> /home/git/.ssh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">chmod</span> 700 /git/.ssh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">touch</span> /git/.ssh/authorized_keys</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">chmod</span> 600 /home/git/.ssh/authorized_keys</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Put the public keys into authorized_keys,one per line)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">chown</span> -R git:git /home/git/.ssh/</span></span><br></pre></td></tr></table></figure>

<p>现在创建一个仓库来测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> /git/base/test.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /git/base/test.git &amp;&amp; git init --bare</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">chown</span> -R git:git /home/git/</span></span><br></pre></td></tr></table></figure>

<p>在客户机创建本地仓库，并提交</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> ~/test</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ~/test &amp;&amp; git init</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;123456&#x27;</span> &gt; foo</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add .</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit</span></span><br></pre></td></tr></table></figure>

<p>push到远程仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote add origin git@git.example.com:base/test.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push -u origin master</span></span><br></pre></td></tr></table></figure>

<p>关于Git使用ssh协议免密</p>
<p>附：<br><a href="https://git-scm.com/book/zh/v2">Git使用手册</a></p>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>查看端口占用</title>
    <url>/2024/07/31/%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/</url>
    <content><![CDATA[<h2 id="查看本地端口"><a href="#查看本地端口" class="headerlink" title="查看本地端口"></a>查看本地端口</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到使用8080端口的PID</span></span><br><span class="line">netstat <span class="literal">-ano</span> | findstr <span class="string">&quot;8080&quot;</span></span><br><span class="line"><span class="comment"># 找到PID 4对应的进程，假如上一步找出的PID为4</span></span><br><span class="line">tasklist | findstr <span class="number">4</span></span><br></pre></td></tr></table></figure>

<h2 id="查看远程端口"><a href="#查看远程端口" class="headerlink" title="查看远程端口"></a>查看远程端口</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> D:\Temp\Java&gt; telnet <span class="number">192.168</span>.<span class="number">1.200</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">PS</span> D:\Temp\Java&gt; nmap <span class="number">192.168</span>.<span class="number">1.200</span></span><br><span class="line">Nmap scan report <span class="keyword">for</span> www.test.org (<span class="number">192.168</span>.<span class="number">1.200</span>)</span><br><span class="line">Host is up (<span class="number">0.0016</span>s latency).</span><br><span class="line">Not shown: <span class="number">995</span> filtered tcp ports (no<span class="literal">-response</span>)</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line"><span class="number">22</span>/tcp   open  ssh</span><br><span class="line"><span class="number">80</span>/tcp   open  http</span><br><span class="line"><span class="number">81</span>/tcp   open  hosts2<span class="literal">-ns</span></span><br><span class="line"><span class="number">3306</span>/tcp open  mysql</span><br><span class="line"><span class="number">8080</span>/tcp open  http<span class="literal">-proxy</span></span><br><span class="line">Nmap done: <span class="number">1</span> IP address (<span class="number">1</span> host up) scanned <span class="keyword">in</span> <span class="number">5.17</span> seconds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">PS</span> D:\Temp\Java&gt; nmap <span class="number">192.168</span>.<span class="number">1.200</span> <span class="literal">-p</span> <span class="number">80</span></span><br><span class="line">Nmap scan report <span class="keyword">for</span> www.test.org (<span class="number">192.168</span>.<span class="number">1.200</span>)</span><br><span class="line">Host is up (<span class="number">0.00</span>s latency).</span><br><span class="line"></span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line"><span class="number">80</span>/tcp open  http</span><br><span class="line"></span><br><span class="line">Nmap done: <span class="number">1</span> IP address (<span class="number">1</span> host up) scanned <span class="keyword">in</span> <span class="number">0.05</span> seconds</span><br></pre></td></tr></table></figure>

<p>Linux专有</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">frank@debian:~$ nc -v 192.168.1.200 8080</span><br><span class="line">192.168.1.200: inverse host lookup failed: Unknown host</span><br><span class="line">(UNKNOWN) [192.168.1.200] 8080 (http-alt) open</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>混淆软件Allatori使用</title>
    <url>/2024/07/30/%E6%B7%B7%E6%B7%86%E8%BD%AF%E4%BB%B6Allatori%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="1-混淆类库"><a href="#1-混淆类库" class="headerlink" title="1. 混淆类库"></a>1. 混淆类库</h2><p>所有公共 API 不应该重命名，这样才能保证其他库调用能正常使用。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">in</span>=<span class="string">&quot;test.jar&quot;</span> <span class="attr">out</span>=<span class="string">&quot;obf-test.jar&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">in</span>=<span class="string">&quot;mousegestures-1.2.jar&quot;</span> <span class="attr">out</span>=<span class="string">&quot;obf-mousegestures-1.2.jar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-names</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span> <span class="attr">access</span>=<span class="string">&quot;protected+&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">field</span> <span class="attr">access</span>=<span class="string">&quot;protected+&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">method</span> <span class="attr">access</span>=<span class="string">&quot;protected+&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-names</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log-file&quot;</span> <span class="attr">value</span>=<span class="string">&quot;log.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>jars</code> 配置输出的 <code>jar</code>文件名。如果<code>in</code>和<code>out</code>一样，那么混淆后的版本(<code>out</code>)会覆盖原来的版本</p>
<p><code>keep-names</code> 配置不应该重命名的类、方法、字段。此处配置<code>protected+</code>,意味着所有<code>protected+</code>的可见性字段不会被重命名。</p>
<p><code>log-file</code> 配置<code>log</code>文件，可省略</p>
<p>命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">java <span class="literal">-Xms128m</span> <span class="literal">-Xmx512m</span> <span class="literal">-jar</span> ..\..\..\lib\allatori.jar config.xml</span><br></pre></td></tr></table></figure>

<h2 id="2-独立应用程序"><a href="#2-独立应用程序" class="headerlink" title="2. 独立应用程序"></a>2. 独立应用程序</h2><p>独立应用程序，可以让所有公共的 API 都不可见，越多的类&#x2F;方法&#x2F;字段被重命名，越好。事实上，可以仅保留 Main 类为原来的名字。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">in</span>=<span class="string">&quot;test.jar&quot;</span> <span class="attr">out</span>=<span class="string">&quot;obf-test.jar&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">in</span>=<span class="string">&quot;mousegestures-1.2.jar&quot;</span> <span class="attr">out</span>=<span class="string">&quot;obf-mousegestures-1.2.jar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-names</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span> <span class="attr">template</span>=<span class="string">&quot;class *.TestFrame&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-names</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log-file&quot;</span> <span class="attr">value</span>=<span class="string">&quot;log.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-通过-Classpath配置混淆"><a href="#3-通过-Classpath配置混淆" class="headerlink" title="3. 通过 Classpath配置混淆"></a>3. 通过 <code>Classpath</code>配置混淆</h2><p>test.jar 是独立应用程序<br>mousegestures-1.2.jar 是 test.jar 调用的三方库</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">in</span>=<span class="string">&quot;test.jar&quot;</span> <span class="attr">out</span>=<span class="string">&quot;obf-test.jar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">classpath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">name</span>=<span class="string">&quot;mousegestures-1.2.jar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">classpath</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-names</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span> <span class="attr">template</span>=<span class="string">&quot;class *.TestFrame&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-names</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log-file&quot;</span> <span class="attr">value</span>=<span class="string">&quot;log.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>classpath</code>中不必填写程序引用的所有<code>jar</code>。但是，不填写，可能导致混淆效果较差。如果删除<code>classpath</code>，<code>Allatori</code>在混淆时，会产生警告<code>missing classes</code></p>
<h2 id="4-一个Jar包"><a href="#4-一个Jar包" class="headerlink" title="4. 一个Jar包"></a>4. 一个<code>Jar</code>包</h2><p>打包所有的应用程序类到一个<code>Jar</code><br>此测试是基于步骤 2。会把<code>obf-test.jar</code>和<code>obf-mousegestures-1.2.jar</code>整合到<code>single.jar</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">single-jar</span>=<span class="string">&quot;single.jar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">in</span>=<span class="string">&quot;test.jar&quot;</span> <span class="attr">out</span>=<span class="string">&quot;obf-test.jar&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">in</span>=<span class="string">&quot;mousegestures-1.2.jar&quot;</span> <span class="attr">out</span>=<span class="string">&quot;obf-mousegestures-1.2.jar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-names</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span> <span class="attr">template</span>=<span class="string">&quot;class *.TestFrame&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-names</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log-file&quot;</span> <span class="attr">value</span>=<span class="string">&quot;log.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-水印"><a href="#5-水印" class="headerlink" title="5. 水印"></a>5. 水印</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">single-jar</span>=<span class="string">&quot;single.jar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">in</span>=<span class="string">&quot;test.jar&quot;</span> <span class="attr">out</span>=<span class="string">&quot;obf-test.jar&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">in</span>=<span class="string">&quot;mousegestures-1.2.jar&quot;</span> <span class="attr">out</span>=<span class="string">&quot;obf-mousegestures-1.2.jar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-names</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span> <span class="attr">template</span>=<span class="string">&quot;class *.TestFrame&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-names</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log-file&quot;</span> <span class="attr">value</span>=<span class="string">&quot;log.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">watermark</span> <span class="attr">key</span>=<span class="string">&quot;secure-key-to-extract-watermark&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Customer: John Smith; Date: xx.yy.zzzz&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>watermark</code></p>
<ul>
<li><code>key</code>,把水印嵌入到应用程序</li>
<li><code>value</code>, 要嵌入到应用程序的字符串，可以是版权、客户名字、公司名字、或者其他任何信息</li>
</ul>
<p>消除水印</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">in</span>=<span class="string">&quot;single.jar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">watermark</span> <span class="attr">key</span>=<span class="string">&quot;secure-key-to-extract-watermark&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>key</code> 要与添加水印时使用的<code>key</code>一致，才能消除；如果不一致，水印不会消除。<br>命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">java <span class="literal">-Xms128m</span> <span class="literal">-Xmx512m</span> <span class="literal">-cp</span> ..\..\..\lib\allatori.jar com.allatori.Watermark <span class="literal">-extract</span> ExtractWatermark.xml</span><br></pre></td></tr></table></figure>

<h2 id="6-不混淆水印"><a href="#6-不混淆水印" class="headerlink" title="6. 不混淆水印"></a>6. 不混淆水印</h2><p>存在如下情形：1、只需要添加水印而不需要混淆水印；或者应用程序已经混淆过，但是还没有添加水印。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">in</span>=<span class="string">&quot;mousegestures-1.2.jar&quot;</span> <span class="attr">out</span>=<span class="string">&quot;marked-mousegestures-1.2.jar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">watermark</span> <span class="attr">key</span>=<span class="string">&quot;secure-key-to-extract-watermark&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Customer: John Smith; Date: xx.yy.zzzz&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">java <span class="literal">-Xms128m</span> <span class="literal">-Xmx512m</span> <span class="literal">-cp</span> ..\..\..\lib\allatori.jar com.allatori.Watermark <span class="literal">-add</span> AddWatermark.xml</span><br></pre></td></tr></table></figure>

<p>去除水印</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">in</span>=<span class="string">&quot;marked-mousegestures-1.2.jar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">watermark</span> <span class="attr">key</span>=<span class="string">&quot;secure-key-to-extract-watermark&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">java <span class="literal">-Xms128m</span> <span class="literal">-Xmx512m</span> <span class="literal">-cp</span> ..\..\..\lib\allatori.jar com.allatori.Watermark <span class="literal">-extract</span> ExtractWatermark.xml</span><br></pre></td></tr></table></figure>

<h2 id="7-给多个没有混淆的-jar-添加水印"><a href="#7-给多个没有混淆的-jar-添加水印" class="headerlink" title="7. 给多个没有混淆的 jar 添加水印"></a>7. 给多个没有混淆的 jar 添加水印</h2><p>类似 6</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">in</span>=<span class="string">&quot;test.jar&quot;</span> <span class="attr">out</span>=<span class="string">&quot;marked-test.jar&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">in</span>=<span class="string">&quot;mousegestures-1.2.jar&quot;</span> <span class="attr">out</span>=<span class="string">&quot;marked-mousegestures-1.2.jar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">watermark</span> <span class="attr">key</span>=<span class="string">&quot;secure-key-to-extract-watermark&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Customer: John Smith; Date: xx.yy.zzzz&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>去水印</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">in</span>=<span class="string">&quot;marked-test.jar&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">in</span>=<span class="string">&quot;marked-mousegestures-1.2.jar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">watermark</span> <span class="attr">key</span>=<span class="string">&quot;secure-key-to-extract-watermark&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要 2 个<code>jar</code>同时去水印，不能只从一个<code>jar</code>里面去水印</p>
<h2 id="8-使用StackTrace工具"><a href="#8-使用StackTrace工具" class="headerlink" title="8. 使用StackTrace工具"></a>8. 使用<code>StackTrace</code>工具</h2><p>混淆后产生的 <code>log</code> 文件，可以用于重建在原始的<code>jar</code>包中的 stacktrace。这样所有的名称和行号就和混淆前的原始代码一样，对于 debug 非常有用。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">java <span class="literal">-Xms128m</span> <span class="literal">-Xmx512m</span> <span class="literal">-cp</span> ..\..\..\lib\allatori.jar com.allatori.StackTrace2 log.xml input.txt output.txt</span><br></pre></td></tr></table></figure>

<h2 id="10-添加过期时间"><a href="#10-添加过期时间" class="headerlink" title="10 添加过期时间"></a>10 添加过期时间</h2><p>基于步骤 2</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">in</span>=<span class="string">&quot;test.jar&quot;</span> <span class="attr">out</span>=<span class="string">&quot;obf-test.jar&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">in</span>=<span class="string">&quot;mousegestures-1.2.jar&quot;</span> <span class="attr">out</span>=<span class="string">&quot;obf-mousegestures-1.2.jar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-names</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span> <span class="attr">template</span>=<span class="string">&quot;class *.TestFrame&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-names</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log-file&quot;</span> <span class="attr">value</span>=<span class="string">&quot;log.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">expiry</span> <span class="attr">date</span>=<span class="string">&quot;2000/01/01&quot;</span> <span class="attr">string</span>=<span class="string">&quot;EXPIRED!&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 设置过期时间为2020/01/01，所以混淆程序就过期了，不会运行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>过期时间检查不仅仅被插入在 <code>main</code> 方法，不能被轻易移除。即使没有 <code>main</code> 方法的库中。</p>
<h2 id="12-Maven-项目中使用"><a href="#12-Maven-项目中使用" class="headerlink" title="12. Maven 项目中使用"></a>12. Maven 项目中使用</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.smardec.mousegestures<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mouse-gestures<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mouse-gestures<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- Copying Allatori configuration file to &#x27;target&#x27; directory.</span></span><br><span class="line"><span class="comment">           The destination file will be filtered (Maven properties used in configuration file will be resolved). --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-and-filter-allatori-config<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;basedir&#125;/target<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;basedir&#125;/allatori<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>allatori.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- Running Allatori --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>exec-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>run-allatori<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">goal</span>&gt;</span>exec<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">executable</span>&gt;</span>java<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">arguments</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">argument</span>&gt;</span>-Xms128m<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">argument</span>&gt;</span>-Xmx512m<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">argument</span>&gt;</span>-jar<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- Copy allatori.jar to &#x27;allatori&#x27; directory to use the commented line --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">argument</span>&gt;</span>$&#123;basedir&#125;/../../../../lib/allatori.jar<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;argument&gt;$&#123;basedir&#125;/allatori/allatori.jar&lt;/argument&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">argument</span>&gt;</span>$&#123;basedir&#125;/target/allatori.xml<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="15-自定义字符串加密"><a href="#15-自定义字符串加密" class="headerlink" title="15 自定义字符串加密"></a>15 自定义字符串加密</h2><p>基于步骤 1 更改，以使用字符串加密</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">in</span>=<span class="string">&quot;test.jar&quot;</span> <span class="attr">out</span>=<span class="string">&quot;obf-test.jar&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">in</span>=<span class="string">&quot;mousegestures-1.2.jar&quot;</span> <span class="attr">out</span>=<span class="string">&quot;obf-mousegestures-1.2.jar&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">in</span>=<span class="string">&quot;custom.jar&quot;</span> <span class="attr">out</span>=<span class="string">&quot;obf-custom.jar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-names</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span> <span class="attr">access</span>=<span class="string">&quot;protected+&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">field</span> <span class="attr">access</span>=<span class="string">&quot;protected+&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">method</span> <span class="attr">access</span>=<span class="string">&quot;protected+&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-names</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- We recommend using the v3 setting if custom string encryption is applied to ALL your classes. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- This way Allatori would not add any additional (unused) string decryption methods. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- If you combine custom string encryption and Allatori string encryption, then the default v4 setting is recommended. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;string-encryption-version&quot;</span> <span class="attr">value</span>=<span class="string">&quot;v3&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Disabling string encryption in custom decryption methods, as it could lead to infinite recursive calls. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;string-encryption&quot;</span> <span class="attr">value</span>=<span class="string">&quot;disable&quot;</span> <span class="attr">apply2class</span>=<span class="string">&quot;class com.allatori.custom.EncryptDecryptString&quot;</span> <span class="attr">apply2method</span>=<span class="string">&quot;decrypt*(java.lang.String)&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;string-encryption&quot;</span> <span class="attr">value</span>=<span class="string">&quot;maximum&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;string-encryption-type&quot;</span> <span class="attr">value</span>=<span class="string">&quot;custom(com.allatori.custom.EncryptDecryptString.encryptString, com.allatori.custom.EncryptDecryptString.decryptString)&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log-file&quot;</span> <span class="attr">value</span>=<span class="string">&quot;log.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以结合 Allatori 字符串加密和自定义字符串加密使用。如果只是应用自定义字符串加密在 <code>com.some.package</code>:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;string-encryption-type&quot;</span> <span class="attr">value</span>=<span class="string">&quot;custom(package.EncryptClassName.encryptMethodName, package.DecryptClassName.decryptMethodName)&quot;</span> <span class="attr">apply2class</span>=<span class="string">&quot;class com.some.package.*&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以使用多个字符串加密&#x2F;解密方法:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;string-encryption-type&quot;</span> <span class="attr">value</span>=<span class="string">&quot;custom(package.EncryptClassName1.encryptMethodName1, package.DecryptClassName1.decryptMethodName1)&quot;</span> <span class="attr">apply2class</span>=<span class="string">&quot;class com.some.package.*&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;string-encryption-type&quot;</span> <span class="attr">value</span>=<span class="string">&quot;custom(package.EncryptClassName2.encryptMethodName2, package.DecryptClassName2.decryptMethodName2)&quot;</span> <span class="attr">apply2class</span>=<span class="string">&quot;class com.some.other.package.*&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Methods for classes not matched by the rules above --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;string-encryption-type&quot;</span> <span class="attr">value</span>=<span class="string">&quot;custom(package.EncryptClassName3.encryptMethodName3, package.DecryptClassName3.decryptMethodName3)&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>加密只是在混淆的时候需要，运行时不需要。所以，可以把<code>加密</code>放在不发布的一个单独<code>jar</code>包里。<br>解密在运行时需要，可以放在发布的应用程序的任何一个类里。</p>
<p>自定义字符串加密特性可以应用在国际化。因为 Allatori 会用<code>methodCall(&quot;String literal&quot;)</code>包装所有字符串。可以在加密方法记录日志，然后翻译，在运行时，解密方法会使用国际化的语言替换。</p>
<h2 id="THE-END-示例"><a href="#THE-END-示例" class="headerlink" title="THE END 示例"></a>THE END 示例</h2><p><code>pom.xml</code>设置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Copying Allatori configuration file to &#x27;target&#x27; directory.</span></span><br><span class="line"><span class="comment">            The destination file will be filtered (Maven properties used in configuration file will be resolved). --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-and-filter-allatori-config<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;basedir&#125;/target<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;basedir&#125;/allatori<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>allatori.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Running Allatori --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>exec-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>run-allatori<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>exec<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executable</span>&gt;</span>java<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">arguments</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">argument</span>&gt;</span>-Xms128m<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">argument</span>&gt;</span>-Xmx512m<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">argument</span>&gt;</span>-jar<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- Copy allatori.jar to &#x27;allatori&#x27; directory to use the commented line --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">argument</span>&gt;</span>$&#123;basedir&#125;/allatori/allatori.jar<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- &lt;argument&gt;$&#123;basedir&#125;/allatori/allatori.jar&lt;/argument&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">argument</span>&gt;</span>$&#123;basedir&#125;/target/allatori.xml<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>allatori.xml</code> 仅仅可用，SpringBoot非最佳</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--$&#123;project.build.finalName&#125; 无法正确处理--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--https://github.com/lyb-geek/springboot-learning/tree/master/springboot-proguard--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-1.3-Release-Notes#maven-resources-filtering--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">in</span>=<span class="string">&quot;@project.build.finalName@.jar&quot;</span> <span class="attr">out</span>=<span class="string">&quot;@project.build.finalName@-obfuscated.jar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-names</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span> <span class="attr">access</span>=<span class="string">&quot;public&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">field</span> <span class="attr">access</span>=<span class="string">&quot;public&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">method</span> <span class="attr">access</span>=<span class="string">&quot;public&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-names</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">ignore-classes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span> <span class="attr">template</span>=<span class="string">&quot;class *springframework*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span> <span class="attr">template</span>=<span class="string">&quot;class com.rarelong.proxyserviceinsichuanelectricpower.controller.*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ignore-classes</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log-file&quot;</span> <span class="attr">value</span>=<span class="string">&quot;log.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://allatori.com/">官方</a><br><a href="https://github.com/lqs1848/AllatoriCrack">AllatoriCrack</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>表驱动法编程--数据驱动</title>
    <url>/2024/07/31/%E8%A1%A8%E9%A9%B1%E5%8A%A8%E6%B3%95%E7%BC%96%E7%A8%8B-%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[<h2 id="What"><a href="#What" class="headerlink" title="What"></a>What</h2><p><strong>表驱动方法（Table-Driven Methods）</strong>，在《Unix 编程艺术》中有提到，《代码大全》的第十八章对此进行了详细地讲解。</p>
<p>表驱动法是一种从表里查找信息而不是使用逻辑语句（<code>if</code>或<code>switch</code>）的编程模型。</p>
<h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>先通过一个简单的例子体验下，在某些情况下，如果不使用表驱动方法，代码会如何地难看。</p>
<p>假设让你实现一个返回每个月天数的函数（为简单起见不考虑闰年）。</p>
<p>初级码农的笨方法是马上摆出 12 副威武雄壮的 <code>if-else</code> 组合拳：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">iGetMonthDays</span>(<span class="params"><span class="built_in">int</span> iMonth</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> iDays;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span> == iMonth) &#123;iDays = <span class="number">31</span>;&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">2</span> == iMonth) &#123;iDays = <span class="number">28</span>;&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">3</span> == iMonth) &#123;iDays = <span class="number">31</span>;&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">4</span> == iMonth) &#123;iDays = <span class="number">30</span>;&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">5</span> == iMonth) &#123;iDays = <span class="number">31</span>;&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">6</span> == iMonth) &#123;iDays = <span class="number">30</span>;&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">7</span> == iMonth) &#123;iDays = <span class="number">31</span>;&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">8</span> == iMonth) &#123;iDays = <span class="number">31</span>;&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">9</span> == iMonth) &#123;iDays = <span class="number">30</span>;&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">10</span> == iMonth) &#123;iDays = <span class="number">31</span>;&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">11</span> == iMonth) &#123;iDays = <span class="number">30</span>;&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">12</span> == iMonth) &#123;iDays = <span class="number">31</span>;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> iDays;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>稍微机灵点的码农发现每月天数无外乎 28、30、31 三种，或许会用 <code>switch-case</code> “裁剪”下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">iGetMonthDays</span>(<span class="params"><span class="built_in">int</span> iMonth</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> iDays;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span> (iMonth) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:&#123;iDays = <span class="number">31</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:&#123;iDays = <span class="number">28</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:&#123;iDays = <span class="number">30</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> iDays;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这两种方法充斥了大量的逻辑判断，还凭空冒出了一大堆<code>1，2，…，11，12</code>这样的 <code>Magic Number</code>（魔鬼数字公然出现在程序里是很 ugly 的做法），不利于代码的维护与扩展。</p>
<p>表驱动处理起来就赏心悦目得多了：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">int</span> monthDays[<span class="number">12</span>] = &#123;<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">iGetMonthDays</span>(<span class="params"><span class="built_in">int</span> iMonth</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> monthDays[(iMonth - <span class="number">1</span>)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><p>表驱动可以使你的代码更简洁，结构更加灵活，多用于逻辑性不强但是分支多的情况。</p>
<h3 id="如何使用表驱动法"><a href="#如何使用表驱动法" class="headerlink" title="如何使用表驱动法?"></a>如何使用表驱动法?</h3><p>需要明确两个关键问题：表的形式及表中放什么内容</p>
<ul>
<li>表形式可以为一维数组、二维数组和结构体数组。</li>
<li>表中可以存放数值、字符串或函数指针等数据。</li>
</ul>
<h3 id="如何去访问表"><a href="#如何去访问表" class="headerlink" title="如何去访问表?"></a>如何去访问表?</h3><p>下面介绍表的三种访问方式：</p>
<ul>
<li><h4 id="直接访问"><a href="#直接访问" class="headerlink" title="直接访问"></a>直接访问</h4><p>直接根据“键”来获得“值”，给定下标 index，然后array[index]就获得数组在相应下标处的数值。例如前面这个根据月份取天数的例子。</p>
<p><img src="/2024/07/31/%E8%A1%A8%E9%A9%B1%E5%8A%A8%E6%B3%95%E7%BC%96%E7%A8%8B-%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8/key-value.png" alt="Key-Value"></p>
</li>
<li><h4 id="索引访问"><a href="#索引访问" class="headerlink" title="索引访问"></a>索引访问</h4><p><img src="/2024/07/31/%E8%A1%A8%E9%A9%B1%E5%8A%A8%E6%B3%95%E7%BC%96%E7%A8%8B-%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8/index.png" alt="索引访问"></p>
<p>  它适用于这样的情况：假设你经营一家商店，有 100 种商品，每种商品都有一个 ID 号，但很多商品的描述都差不多，所以只有 30 条不同的描述，如何建立建立商品与商品描述的表？<br>  还是同上面做法来一一对应吗？那样描述会扩充到 100 个，会有 70 个描述是重复的！太浪费了。<br>  方法是建立一个 100 长的索引和 30 长的描述，然后这些索引指向相应的描述（不同的索引可以指向相同的描述），这样就解决了表数据冗余的问题啦。</p>
  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">product_t</span> &#123;</span><br><span class="line">    <span class="type">char</span> * id;</span><br><span class="line">    <span class="type">int</span> desc_index;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> * desc[] = &#123;</span><br><span class="line">    <span class="string">&quot;description_1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description_2&quot;</span>,</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&quot;description_29&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description_30&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">product_t</span> goods [] = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;id_1&quot;</span>, <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;id_2&quot;</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    ...</span><br><span class="line">    &#123;<span class="string">&quot;id_99&quot;</span>, <span class="number">12</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;id_100&quot;</span>, <span class="number">5</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">desc_product</span> <span class="params">(<span class="type">const</span> <span class="type">char</span>* id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="type">product_t</span> &amp; p : goods) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(p.id, id) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> desc[p.desc_index - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <br>
</li>
<li><h4 id="阶梯访问"><a href="#阶梯访问" class="headerlink" title="阶梯访问"></a>阶梯访问</h4><table>
<thead>
<tr>
<th>范围上限</th>
<th>范围下限</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>100</td>
<td>90</td>
<td>A</td>
</tr>
<tr>
<td>90</td>
<td>80</td>
<td>B</td>
</tr>
<tr>
<td>80</td>
<td>70</td>
<td>C</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
</tbody></table>
<p>例子：将百分制成绩转成五级分制（我们用的优、良、中、合格、不合格，西方用的 A、B、C、D和F），假定转换关系:</p>
<table>
<thead>
<tr>
<th>Score</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>[90,100]</td>
<td>A</td>
</tr>
<tr>
<td>[80,90)</td>
<td>B</td>
</tr>
<tr>
<td>[70,80)</td>
<td>C</td>
</tr>
<tr>
<td>[60,70)</td>
<td>D</td>
</tr>
<tr>
<td>[0,60)</td>
<td>E</td>
</tr>
</tbody></table>
<p>如何用表格表示这些范围？</p>
<p>你当然可以用第一种直接访问的方法：申请一个 100 长的表，然后在这个表中填充相应的等级。很明显，也会浪费大量空间，有没有更好的方法？</p>
<p>对于这种“某个范围区间内，对应某个值”的逻辑规则，可用阶梯访问的方式。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> gradeTable[] = &#123;</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;F&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> downLimit[] = &#123;</span><br><span class="line">    <span class="number">90</span>, <span class="number">80</span>, <span class="number">70</span>, <span class="number">60</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">degree</span><span class="params">(<span class="type">int</span> score)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> gradeLevel = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> lowestDegree = gradeTable[<span class="built_in">sizeof</span>(gradeTable)/<span class="built_in">sizeof</span>(gradeTable[<span class="number">0</span>]) - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里可用二分查找优化</span></span><br><span class="line">    <span class="keyword">while</span> (gradeTable[gradeLevel] != lowestDegree) &#123;</span><br><span class="line">        <span class="keyword">if</span>(score &lt; downLimit[gradeLevel]) &#123;</span><br><span class="line">            ++ gradeLevel;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> gradeTable[gradeLevel];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将来如果等级规则变了（比如 85～100 分为等级 A，或添加 50～60 分为等级 E），只需要修改 gradeTable 和 downLimit 表就行，degree 函数可以保持一行都不改动。</p>
<p>更进一步地，gradeTable 和 downLimit 表还可以配置文件的形式表示，主程序从外部文件 load 进来就行，程序灵活性大大增加。</p>
</li>
</ul>
<h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><p>  伟大的 C 语言大师 Rob Pike 有句话说的好：</p>
<blockquote>
<p>数据压倒一切。<br>如果选择了正确的数据结构并把一切组织的井井有条，正确的算法就不言自明。编程的核心是数据结构，而不是算法。</p>
</blockquote>
<p>  <em><strong>对人类来说，数据比编程逻辑更容易驾驭。在复杂数据和复杂代码中选择，宁可选择前者。</strong></em></p>
<p>  更进一步，在设计中，应该主动将代码的复杂度转移到数据中去。</p>
<p>  这里谈到了 Unix 哲学之分离原则：<strong>策略同机制分离</strong></p>
<ul>
<li>机制，即提供的功能。</li>
<li>策略，即如何使用功能。</li>
</ul>
<p>以百分制转五级分制为例，机制就是 degree 函数：你给一个百分制分数给它，它吐出来一个五级分制给你。策略就是gradeTable 和 downLimit 这两个表，它规定了哪个区间的分数对应哪个等级。<br>从 degree 的实现可以看出:对机制而言，策略是透明的（degree 完全看不到 gradeTable 和 downLimit 这两个表的内部规则）。<br>将两者分离，可以使机制(degree)相对保持稳定，而同时支持策略(表)的变化。</p>
]]></content>
      <categories>
        <category>编程思想</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Java</tag>
        <tag>C</tag>
        <tag>CPP</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA之External tools</title>
    <url>/2024/09/01/IntelliJ-IDEA%E4%B9%8BExternal-tools/</url>
    <content><![CDATA[<h2 id="javap"><a href="#javap" class="headerlink" title="javap"></a>javap</h2><p><code>Ctrl + Alt + S</code> ——&gt; <code>External Tools</code> ——&gt; <code>Add</code> ,在添加页面的 <code>Tool Setting</code>部分分别设置</p>
<ol>
<li><code>Program</code> 填 <code>$JDKPath$\bin\javap</code><br>  <code>javap</code> 使用 JVM 选项 <code>-J-Dfile.encoding=GB2312</code></li>
<li><code>Arguments</code> 填 <code>-v -c -l -s -p $FileClass$</code></li>
<li><code>Working directory</code> 填 <code>$OutputPath$</code></li>
</ol>
<h2 id="jconsole"><a href="#jconsole" class="headerlink" title="jconsole"></a>jconsole</h2><ol>
<li><code>Program</code> 填 <code>$JDKPath$\bin\jconsole</code></li>
</ol>
<h2 id="protoc"><a href="#protoc" class="headerlink" title="protoc"></a>protoc</h2><ol>
<li><code>Program</code> 填 <code>protoc</code></li>
<li><code>Arguments</code> 填 <code>--java_out=$SourcepathEntry$ $FileNameWithoutExtension$.proto</code><br>  <code>--java_out=</code> 指定输出文件的目录。如果使用宏<code>$SourcepathEntry$</code>,则在编写<code>xx.proto</code>文件时，最好指定正确的包名，结果会输出到相应的位置。或者指定为<code>.</code>,即输出到<code>xx.proto</code>文件所在的文件夹，然后复制到正确位置。</li>
<li><code>Working directory</code> 填 <code>$FileDir$</code></li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot项目启动</title>
    <url>/2024/09/03/SpringBoot%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<h2 id="官方脚手架模式"><a href="#官方脚手架模式" class="headerlink" title="官方脚手架模式"></a>官方脚手架模式</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="不使用spring-boot-starter-parent"><a href="#不使用spring-boot-starter-parent" class="headerlink" title="不使用spring-boot-starter-parent"></a>不使用<code>spring-boot-starter-parent</code></h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome自定义搜索引擎</title>
    <url>/2024/08/17/Chrome%E8%87%AA%E5%AE%9A%E4%B9%89%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<p><code>设置</code>–&gt;<code>搜索引擎</code>–&gt;<code>管理搜索引擎和网站数据</code>–&gt;网站搜索旁的<code>添加</code>–&gt;<code>保存</code>–&gt;<code>设置默认选项</code></p>
<p>比如,google原来的格式为</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">&#123;google:baseURL&#125;search?<span class="attr">q</span>=%s&amp;&#123;google:RLZ&#125;&#123;google:originalQueryForSuggestion&#125;&#123;google:assistedQueryStats&#125;&#123;google:searchFieldtrialParameter&#125;&#123;google:language&#125;&#123;google:prefetchSource&#125;&#123;google:searchClient&#125;&#123;google:sourceId&#125;&#123;google:contextualSearchVersion&#125;ie=&#123;inputEncoding&#125;</span><br></pre></td></tr></table></figure>

<p>现在要过滤”csdn.net”的内容,格式为</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">&#123;google:baseURL&#125;search?<span class="attr">q</span>=%s+-site:csdn.net&amp;&#123;google:RLZ&#125;&#123;google:originalQueryForSuggestion&#125;&#123;google:assistedQueryStats&#125;&#123;google:searchFieldtrialParameter&#125;&#123;google:language&#125;&#123;google:prefetchSource&#125;&#123;google:searchClient&#125;&#123;google:sourceId&#125;&#123;google:contextualSearchVersion&#125;ie=&#123;inputEncoding&#125;</span><br></pre></td></tr></table></figure>

<p>将修改好的网址格式保存</p>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian重新安装grub引导</title>
    <url>/2024/08/08/Debian%E9%87%8D%E6%96%B0%E5%AE%89%E8%A3%85grub%E5%BC%95%E5%AF%BC/</url>
    <content><![CDATA[<p>一定要使用<code>Live CD</code>,不要使用普通<code>ISO</code>，确保<code>UEFI</code>引导进入系统，否则会有其他错误产生</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/partitions</span><br><span class="line">fdisk -l</span><br><span class="line">mount /dev/sda2	/target/			<span class="comment"># sda2 根分区</span></span><br><span class="line">mount /dev/sda4 /target/boot/			<span class="comment"># sda4 boot分区</span></span><br><span class="line">mount /dev/sda1 /target/boot/efi/		<span class="comment"># efi 分区</span></span><br><span class="line">mount --<span class="built_in">bind</span> /proc/ /target/proc/</span><br><span class="line">mount --<span class="built_in">bind</span> /sys/ /target/sys/</span><br><span class="line">mount --<span class="built_in">bind</span> /dev/ /target/dev/</span><br><span class="line">mount --<span class="built_in">bind</span> /dev/pts/ /target/dev/pts/</span><br><span class="line"><span class="built_in">chroot</span> /target/</span><br><span class="line">grub-install /dev/sda</span><br><span class="line">update-grub</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/ylxtiankong/p/17168867.html">linux UEFI引导重新安装系统grub启动项</a><br><a href="https://unix.stackexchange.com/questions/693101/reinstall-grub-grub-install-warning-efi-variables-are-not-supported-on-this-s">Reinstall GRUB (grub-install: warning: EFI variables are not supported on this system.)</a></p>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Debian</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle 基本介绍</title>
    <url>/2024/08/03/Gradle-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p><img src="/2024/08/03/Gradle-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/gradle-basic-1.png" alt="Gradle流程图"></p>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><table>
<thead>
<tr>
<th>指令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>gradle clean</td>
<td>清空当前项目下的build目录</td>
</tr>
<tr>
<td>gradle classes</td>
<td>编译业务代码和配置文件</td>
</tr>
<tr>
<td>gradle test</td>
<td>编译测试代码，生成测试报告</td>
</tr>
<tr>
<td>gradle build</td>
<td>构建项目</td>
</tr>
<tr>
<td>gradle build -x test</td>
<td>跳过测试构建项目</td>
</tr>
<tr>
<td>gradle run</td>
<td>运行一个服务，需要application插件支持，并且制定了主启动类才能运行</td>
</tr>
<tr>
<td>gradle init</td>
<td>初始化 gradle项目</td>
</tr>
<tr>
<td>gradle wrapper</td>
<td>生成 wrapper 文件夹</td>
</tr>
<tr>
<td>gradle projects</td>
<td>列出所有项目</td>
</tr>
<tr>
<td>gradle tasks</td>
<td>列出所选项目（当前项目，不包括父、子项目）的任务</td>
</tr>
<tr>
<td>gradle tasks –all</td>
<td>列出所选项目的所有任务</td>
</tr>
<tr>
<td>gradle tasks –group&#x3D;”build setup”</td>
<td>列出所选项目种指定分组中的任务</td>
</tr>
<tr>
<td>gradle help –task someTask</td>
<td>显示某个任务的详细信息</td>
</tr>
<tr>
<td>gradle dependencies</td>
<td>查看整个项目的依赖信息，以依赖树的方式显示</td>
</tr>
<tr>
<td>gradle properties</td>
<td>列出所选项目的属性列表</td>
</tr>
<tr>
<td>-S,–full-stacktrace</td>
<td>打印出所有异常的完整堆栈跟踪信息</td>
</tr>
<tr>
<td>-s,–stacktrace</td>
<td>打印出用户异常的堆栈跟踪</td>
</tr>
<tr>
<td>-Dorg.gradle.daemon.debug&#x3D;true</td>
<td>调试守护进程</td>
</tr>
<tr>
<td>-Dorg.gradle.debug&#x3D;true</td>
<td>调试客户端（非daemon）</td>
</tr>
<tr>
<td>-Dorg.gradle.debug.port&#x3D;9999</td>
<td>调试监听端口</td>
</tr>
<tr>
<td>gradle init –type pom</td>
<td>将Maven项目转换为 gradle项目(根目录执行)</td>
</tr>
</tbody></table>
<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><h3 id="依赖的方式"><a href="#依赖的方式" class="headerlink" title="依赖的方式"></a>依赖的方式</h3><p><code>dependencies</code> 本质是<code>Project</code>接口定义的一个方法</p>
<ol>
<li><p>本地依赖。可通过 文件集合、文件树的方式指定</p>
</li>
<li><p>项目依赖</p>
</li>
<li><p>直接依赖 依赖类型.依赖的组名.名称.版本号</p>
 <figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line"><span class="comment">//    implementation  files(&quot;example1.jar&quot;,&quot;example2.jar&quot;)</span></span><br><span class="line"><span class="comment">//    implementation  fileTree(&quot;dir&quot;:&quot;lib&quot;,includes: [&#x27;*.jar&#x27;],excludes: [&#x27;*.md&#x27;])</span></span><br><span class="line">    implementation project(<span class="string">&#x27;:subproject01&#x27;</span>) <span class="comment">// 一定要出现在 settings.gradle 中</span></span><br><span class="line">    implementation project(<span class="string">&#x27;subProject02&#x27;</span>)</span><br><span class="line">    implementation <span class="string">&#x27;org.apache.logging.log4j:log4j-spring-cloud-config-client:2.17.2&#x27;</span></span><br><span class="line">    implementation <span class="attr">group:</span> <span class="string">&#x27;org.springframework.boot&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;spring-boot-starter-web&#x27;</span>,    <span class="attr">version:</span> <span class="string">&#x27;3. 3.2&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="依赖类型"><a href="#依赖类型" class="headerlink" title="依赖类型"></a>依赖类型</h3><table>
<thead>
<tr>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>compileOnly</code></td>
<td>由Java插件提供，曾短暂的叫<code>provided</code>,后续版本已经改成了 <code>compileOnly</code>,适于编译器需要，而     不需要打包的情况</td>
</tr>
<tr>
<td><code>runtimeOnly</code></td>
<td>由Java插件提供，只在运行期有效，编译时不需要，比如 mysql 驱动包，取代老版的 <code>runtime</code></td>
</tr>
<tr>
<td><code>implementation</code></td>
<td>由Java插件提供，针对代码<code>src/main</code>目录，在编译、运行时都有效。取代老版的 <code>compile</code></td>
</tr>
<tr>
<td><code>testCompileOnly</code></td>
<td>由Java插件提供，用于编译测试的依赖项，运行时不需要</td>
</tr>
<tr>
<td><code>testRuntimeOnly</code></td>
<td>由Java插件提供，只在运行测试时需要，而编译测试时不需要</td>
</tr>
<tr>
<td><code>testImplementation</code></td>
<td>由Java插件提供，针对测试代码<code>src/test</code>目录，在编译、运行时都有效。代老版本的      <code>testCompile</code></td>
</tr>
<tr>
<td><code>providedCompile</code></td>
<td>war插件提供支持，编译、测试阶段代码需要此类依赖包，而在运行阶段容器已提供了相应的支     持，所以无需将这些文件打入到<code>war</code>包中。 如 servlet-api.jar,jsp-api.jar</td>
</tr>
<tr>
<td><code>api</code></td>
<td>java-library插件提供支持，这些依赖项可以传递性地导出给使用者，用于编译时和运行时。代老版本种被移      除的compile</td>
</tr>
<tr>
<td><code>compileOnlyApi</code></td>
<td>java-library插件提供支持，在声明模块和编译时需要的依赖项，在运行时不需要</td>
</tr>
</tbody></table>
<p>说明:使用<code>api</code>需要引入<code>java-library</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;application&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;java-library&#x27;</span></span><br><span class="line">&#125; </span><br><span class="line">dependencies &#123;</span><br><span class="line">    api <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>api</code>和<code>implementation</code>区别</p>
<table>
<thead>
<tr>
<th></th>
<th><code>api</code></th>
<th><code>implementation</code></th>
</tr>
</thead>
<tbody><tr>
<td>编译时</td>
<td>能进行依赖传递，底层变，全部都要变、编译速度较慢</td>
<td>不能进行依赖传递，底层变，不用全部变，编译速度较   快</td>
</tr>
<tr>
<td>运行时</td>
<td>所有模块的<code>class</code>都要被加载</td>
<td>所有模块的<code>class</code>都要被加载</td>
</tr>
<tr>
<td>应用场景</td>
<td>适用于多模块依赖，避免重复依赖</td>
<td>多数情况下，使用<code>implementation</code></td>
</tr>
</tbody></table>
<h4 id="一些示例"><a href="#一些示例" class="headerlink" title="一些示例"></a>一些示例</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">//implementation (group: &#x27;org.springframework.boot&#x27;, name: &#x27;spring-boot-starter-web&#x27;, version:       &#x27;3.3.2&#x27;)&#123;</span></span><br><span class="line">    <span class="comment">//    exclude group &#x27;&#x27;</span></span><br><span class="line">    <span class="comment">//    exclude module &#x27;&#x27;</span></span><br><span class="line">    <span class="comment">//    exclude group &#x27;&#x27; module &#x27;&#x27;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//implementation (group: &#x27;org.springframework.boot&#x27;, name: &#x27;spring-boot-starter-web&#x27;, version:       &#x27;3.3.2&#x27;)&#123;</span></span><br><span class="line">    <span class="comment">//  transitive(false) // 不建议</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    implementation (<span class="attr">group:</span> <span class="string">&#x27;org.springframework.boot&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;spring-boot-starter-web&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;3.       3.2&#x27;</span>)</span><br><span class="line">    <span class="comment">//implementation &#x27;org.apache.logging.log4j:log4j-spring-cloud-config-client:2.17.3!!&#x27; //强制</span></span><br><span class="line">    implementation (<span class="string">&#x27;org.apache.logging.log4j:log4j-spring-cloud-config-client:2.17.3&#x27;</span>) <span class="comment">//强制</span></span><br><span class="line">    &#123;</span><br><span class="line">        version &#123;</span><br><span class="line">            strictly(<span class="string">&#x27;2.18.0&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    implementation (<span class="string">&#x27;org.apache.logging.log4j:log4j-spring-cloud-config-client:+&#x27;</span>) <span class="comment">// + 表示最新       release 版，动态声明，不建议使用</span></span><br><span class="line">    implementation (<span class="string">&#x27;org.apache.logging.log4j:log4j-spring-cloud-config-client:latest.       integration&#x27;</span>) <span class="comment">// ，动态声明，不建议使用</span></span><br></pre></td></tr></table></figure>

<h4 id="发现依赖冲突"><a href="#发现依赖冲突" class="headerlink" title="发现依赖冲突"></a>发现依赖冲突</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">configurations.all() &#123;</span><br><span class="line">    Configuration configuration-&gt;</span><br><span class="line">        configuration.resolutionStrategy.failOnVersionConflict()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul>
<li><p>脚本插件 (使用<code>apply from &#39;test.gradle&#39;</code> 引入)</p>
</li>
<li><p>二进制插件（对象插件）实现了<code>org.gradle.ap.Plugin</code>接口的插件，每一个都有 <code>plugin id</code></p>
<ol>
<li>内部<ol>
<li>apply方式<ul>
<li>apply(map具名参数)</li>
<li>apply(闭包)</li>
</ul>
</li>
<li>plugins DSL</li>
</ol>
</li>
<li>三方<ul>
<li>传统<ol>
<li>引入依赖</li>
<li>apply 应用</li>
</ol>
</li>
</ul>
</li>
<li>自定义<ul>
<li>构建过程中默认执行</li>
</ul>
</li>
</ol>
<p>更多资料见官方<a href="https://docs.gradle.org/current/userguide/plugin_reference.html">Gradle Plugin Reference</a></p>
</li>
</ul>
<h3 id="插件关注点"><a href="#插件关注点" class="headerlink" title="插件关注点"></a>插件关注点</h3><ol>
<li>插件引用方法</li>
<li>主要功能</li>
<li>工程目录结构</li>
<li>依赖管理</li>
<li>常用属性</li>
</ol>
<h2 id="buildSrc"><a href="#buildSrc" class="headerlink" title="buildSrc"></a><code>buildSrc</code></h2><p>  <code>buildSrc</code>是Grale默认的插件目录，Gradle编译的时候，会自动识别这个目录，将其中的代码编译为插件</p>
<h2 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a><code>build.gradle</code></h2><ul>
<li>是一个 gradle的构建脚本文件，支持Java、Kotlin、Groovy等语言</li>
<li>每个项目都会有一个 <code>build.gradle</code>文件，该文件是项目构建的入口，配置版本、插件、依赖库等信息</li>
<li>每个 <code>build.gradle</code> 文件都有一个对应的 <code>Project</code> 实例，对<code>build.gradle</code> 文件配置，本质就是设置     <code>Project</code> 实例的属性和法</li>
<li><code>Root Project</code>可以获取到所有子项目，可在<code>Root Project</code>中对所有子项目进行统一的配置，如应用的插件、依赖的仓库等</li>
</ul>
<h3 id="build-gradle常见属性和方法"><a href="#build-gradle常见属性和方法" class="headerlink" title="build.gradle常见属性和方法"></a><code>build.gradle</code>常见属性和方法</h3><ol>
<li><p>属性</p>
<ol>
<li>自带属性<ol>
<li><code>group</code>, 类型 Maven 中GAV坐标的Group</li>
<li><code>name(artifact)</code>, 项目名</li>
<li><code>version</code> 项目版本</li>
<li><code>sourceCompatibility</code> 指定编译JDK版本</li>
<li><code>targetCompatibility</code> 指定生成目标JDK版本</li>
<li><code>compileJava.options.encoding</code> 业务代码编码</li>
<li><code>compileTestJava.options.encoding</code> 测试代码编码</li>
</ol>
</li>
<li>自定义属性 <code>ext</code></li>
</ol>
</li>
<li><p>方法</p>
<ol>
<li><code>buildscript</code> 应用插件(老式插件)</li>
<li><code>apply</code> 应用插件 (老式插件)</li>
<li><code>task</code> 定义任务</li>
<li><code>plugins</code> 应用插件 新式插件应用方式</li>
<li><code>dependencies</code> 设置当前project的依赖信息</li>
<li><code>repositories</code> 设置当前project的仓库信息</li>
<li><code>allprojects</code> 设置所有 project的信息</li>
<li><code>subprojects</code> 设置所有子项目的信息</li>
<li><code>project</code> 设置子项目的信息</li>
<li><code>sourceSets</code> 配置此项目的源集</li>
<li><code>publishing</code> 配置发布插件添加的PublishingExtension</li>
<li><code>configurations</code> 配置此项目的依赖项配置</li>
<li><code>artifacts</code> 配置此项目的已发布构建</li>
</ol>
<p> <code>ext</code>为自定义属性，而<code>gradle.properties</code>中一般定义系统属性、环境变量、项目属性、JVM相关配置信息</p>
</li>
</ol>
<h2 id="项目启动"><a href="#项目启动" class="headerlink" title="项目启动"></a>项目启动</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;application&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">application &#123;</span><br><span class="line">    mainClass = <span class="string">&#x27;org.gradle.sample.Main&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//application &#123;</span></span><br><span class="line"><span class="comment">//    mainModule = &#x27;org.gradle.sample.app&#x27; // name defined in  module-info.java</span></span><br><span class="line"><span class="comment">//    mainClass = &#x27;org.gradle.sample.Main&#x27;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">tasks.jar&#123;</span><br><span class="line">    manifest &#123;</span><br><span class="line">        attributes[<span class="string">&quot;Main-Class&quot;</span>]=<span class="string">&quot;org.frank.Main&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="项目发布"><a href="#项目发布" class="headerlink" title="项目发布"></a>项目发布</h2><p>发布到Maven仓库即可被其他项目使用</p>
<p><a href="https://docs.gradle.org/current/userguide/publishing_maven.html">项目发布到Maven仓库</a></p>
<h2 id="Gradle钩子函数"><a href="#Gradle钩子函数" class="headerlink" title="Gradle钩子函数"></a>Gradle钩子函数</h2><p><img src="/2024/08/03/Gradle-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/hook_function.png" alt="Gradle 钩子函数"></p>
<p><a href="https://mirrors.cloud.tencent.com/gradle/">下载Gradle</a></p>
<p>另外，为了加快gradle构建，在家目录下的.gradle&#x2F;gradle.properties文件（如没有，可需要新建文件），加上如下的代码即可</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置完成后，Gradle 将分叉到org.gradle.workers.maxJVM 来并行执行项目。</span></span><br><span class="line"><span class="comment"># 默认为false。</span></span><br><span class="line"><span class="attr">org.gradle.parallel</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 指定 Gradle Daemon 使用的 JVM 参数。此设置对于配置 JVM 内存设置以提高构建性能特别有用。这不会影响 Gradle 客户端 VM 的 JVM 设置。</span></span><br><span class="line"><span class="comment"># 默认为-Xmx512m &quot;-XX:MaxMetaspaceSize=384m&quot;。</span></span><br><span class="line"><span class="comment"># org.gradle.jvmargs=(JVM arguments) -Dfile.encoding=GBK  -Dstdout.encoding=UTF-8 -Dstderr.encoding=UTF-8</span></span><br><span class="line"><span class="attr">org.gradle.jvmargs</span>=-Xms512m -Xmx1g  -XX:+HeapDumpOnOutOfMemoryError -XX:+UseParallelGC </span><br><span class="line"></span><br><span class="line"><span class="attr">systemProp.socksProxyHost</span>=<span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">systemProp.socksProxyPort</span>=<span class="number">10808</span></span><br></pre></td></tr></table></figure>
<ol>
<li><a href="https://droidyue.com/blog/2017/04/16/speedup-gradle-building/">一些关于加速Gradle构建的个人经验</a></li>
<li><a href="https://blog.csdn.net/IOT_AI/article/details/106617626">IDEA如何正确配置Gradle? GRADLE_USER_HOME 和 Gradle user home的区别</a></li>
</ol>
<p>修改<code>init-script</code>方式修改默认仓库<br>以上的方案适合自己的项目，方便直接修改<code>build.gradle</code>的情况，某些情况下无法直接修改<code>build.gradle</code>，比如参与开源项目，并不方便修改别人写好的配置，再比如在CI流水线中，并不方便对源代码进行任何形式的修改等等场景。</p>
<p>对于这一类的需求，<code>gradle</code>提供了<code>init-script</code>的形式修改仓库。也就是说，这种形式非常类似于<code>Linux</code>的初始化脚本<code>init.d</code>，会加载一遍之后才完成系统启动。每个<code>gradle</code>命令执行之前会先执行一遍<code>init-script</code>，然后才真正执行构建的<code>task</code>。</p>
<p>因此，我们只要把仓库的配置写入<code>init-script</code>配置即可，由于<code>build.gradle</code>配置通常都会定义多个<code>maven</code>仓库，因此<code>init-script</code>脚本可以不用考虑仓库冗余的问题。</p>
<p>示例<code>init.gradle</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> repoConfig = &#123;</span><br><span class="line">    all &#123; ArtifactRepository repo -&gt;</span><br><span class="line">        <span class="keyword">if</span> (repo <span class="keyword">instanceof</span> MavenArtifactRepository) &#123;</span><br><span class="line">            <span class="keyword">def</span> url = repo.url.toString()</span><br><span class="line">            <span class="keyword">if</span> (url.contains(<span class="string">&#x27;repo1.maven.org/maven2/&#x27;</span>) </span><br><span class="line">                || url.contains(<span class="string">&#x27;jcenter.bintray.com/&#x27;</span>)</span><br><span class="line">                || url.contains(<span class="string">&#x27;plugins.gradle.org/&#x27;</span>)</span><br><span class="line">                || url.contains(<span class="string">&#x27;repository.apache.org/&#x27;</span>)</span><br><span class="line">                || url.contains(<span class="string">&#x27;maven.google.com/&#x27;</span>)</span><br><span class="line">                || url.contains(<span class="string">&#x27;repo.spring.io/&#x27;</span>)</span><br><span class="line">                || url.contains(<span class="string">&#x27;repo.grails.org/&#x27;</span>)</span><br><span class="line">                || url.contains(<span class="string">&#x27;repository.mapr.com/&#x27;</span>)</span><br><span class="line">              ) &#123;</span><br><span class="line">                println <span class="string">&quot;gradle init: ($&#123;repo.name&#125;: $&#123;repo.url&#125;) removed&quot;</span></span><br><span class="line">                remove repo</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/public&#x27;</span> &#125;</span><br><span class="line">    maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/central&#x27;</span> &#125;</span><br><span class="line">    maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/jcenter&#x27;</span> &#125;</span><br><span class="line">    maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/releases&#x27;</span> &#125;</span><br><span class="line">    maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/spring&#x27;</span> &#125;</span><br><span class="line">    maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/spring-plugin&#x27;</span> &#125;          </span><br><span class="line">    maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/gradle-plugin&#x27;</span> &#125;</span><br><span class="line">    maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/google&#x27;</span> &#125;</span><br><span class="line">    maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/apache-snapshots&#x27;</span> &#125;</span><br><span class="line">    maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/grails-core&#x27;</span> &#125;</span><br><span class="line">    maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/snapshots&#x27;</span> &#125;</span><br><span class="line">    maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/mapr-public&#x27;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    </span><br><span class="line">    buildscript &#123;</span><br><span class="line">        repositories repoConfig</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    repositories repoConfig</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于<code>init-script</code>详情可以去看<a href="https://docs.gradle.org/current/userguide/init_scripts.html">官方文档</a>介绍，我这里简单总结一下。</p>
<p><code>init</code>脚本的查找路径:</p>
<ol>
<li>使用-I&#x2F;–init-script直接在命令行指定初始化脚本</li>
<li>~&#x2F;.gradle&#x2F;init.gradle</li>
<li>~&#x2F;.gradle&#x2F;init.d&#x2F;*.gradle</li>
<li>${GRADLE_HOME}&#x2F;init.d&#x2F;*.gradle</li>
</ol>
<p>如果有多个<code>init-script</code>可以执行，那么将按照以上的顺序依次执行，对于<code>*.gradle</code>这样的文件将按照文件名排序顺序执行。</p>
<p>撇开别的高级玩法和高级定制不谈，只说说定义镜像仓库怎么搞。我的做法是直接新建<code>~/.gradle/init.d/repo.gradle</code>:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    buildscript &#123;</span><br><span class="line">        repositories &#123;</span><br><span class="line">            maven &#123; url <span class="string">&quot;https://maven.aliyun.com/repository/public&quot;</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123; url <span class="string">&quot;https://maven.aliyun.com/repository/public&quot;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就等于设置了默认的仓库配置，那么每次执行<code>gradle</code>的时候都会从我希望的镜像站中去寻找依赖并下载了</p>
<p>但需要注意的是由于<code>plugins &#123;&#125; DSL</code>目前不使用<code>buildscript &#123;&#125;</code>配置，也无法通过<code>init script</code>定制的方式传入<code>settings.gradle</code>中，所以这种方式是不起作用的。不过好在这个<code>DSL</code>官方还在完善中，也许未来会支持也说不定。<br>参考<a href="https://my.oschina.net/abcfy2/blog/783743">gradle使用maven镜像仓库的方法</a><br>参考<a href="http://www.souvc.com/?p=2573">《Gradle实战》如何配置利用Maven本地仓库</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle项目不能启动</title>
    <url>/2024/08/02/Gradle%E9%A1%B9%E7%9B%AE%E4%B8%8D%E8%83%BD%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<p>在<code>build.gradle</code>添加</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;application&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">application &#123;</span><br><span class="line">    mainClass= <span class="string">&#x27;org.frank.Main&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.jar&#123;</span><br><span class="line">    manifest &#123;</span><br><span class="line">        attributes[<span class="string">&quot;Main-Class&quot;</span>]=<span class="string">&#x27;org.frank.Main&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo使用</title>
    <url>/2024/08/17/Hexo%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-cli</span> <span class="literal">-g</span></span><br></pre></td></tr></table></figure>

<h2 id="自动备份"><a href="#自动备份" class="headerlink" title="自动备份"></a>自动备份</h2><ol>
<li><p>删除 <code>themes\</code>目录下的所有 <code>.git</code>目录, Git不允许嵌套.否则,主题不能被提交,之后克隆下来,因为没有主题,网站不显示.</p>
</li>
<li><p>在本地Hexo创建的博客根目录<code>D:\blog</code> 执行命令 <code>git init</code>, 然后编辑<code>.gitignore</code> 文件</p>
</li>
</ol>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">_multiconfig.yml</span><br><span class="line">package-lock.json</span><br><span class="line">yarn.lock</span><br></pre></td></tr></table></figure>

<ol>
<li>远程在 gitee 新建一个 <strong>私有</strong> 仓库 <code>blog</code>,配置好 ssh</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git remote add origin git@gitee.com:franklovebsd/blog.git</span><br><span class="line">git push <span class="literal">-u</span> origin <span class="string">&quot;master&quot;</span></span><br></pre></td></tr></table></figure>

<p>另外修改发布脚本<code>deploy.ps1</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除建立的不需要的图片保存目录</span></span><br><span class="line"><span class="variable">$destDir</span>= <span class="string">&quot;D:\blog\source\_posts&quot;</span></span><br><span class="line"><span class="built_in">Get-ChildItem</span> <span class="variable">$destDir</span> <span class="literal">-Recurse</span> <span class="literal">-Directory</span> | <span class="built_in">Where-Object</span> &#123; <span class="selector-tag">@</span>(<span class="built_in">Get-ChildItem</span> <span class="variable">$_</span>.FullName).Length <span class="operator">-eq</span> <span class="number">0</span>&#125; | <span class="built_in">Remove-Item</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$destDir</span></span><br><span class="line"></span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份到gitee</span></span><br><span class="line">git add .</span><br><span class="line">git commit <span class="literal">-m</span> <span class="string">&quot;hexo backup&quot;</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<p>安装了<code>shelljs</code>组件再删除后,<code>package.json</code>多了 <code>&quot;hexo-site&quot;: &quot;file:&quot;,</code>,使用<code>npm</code>命令删除即可,否则一直报错</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ERROR: Plugin load failed: hexo<span class="literal">-site</span></span><br><span class="line">ERROR: EISDIR: illegal operation on a direcotry,read at async readFileHandle (node:internal/fs/promises:<span class="number">553</span>:<span class="number">24</span>)</span><br></pre></td></tr></table></figure>

<h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git clone git@gitee.com:franklovebsd/blog.git</span><br><span class="line">npm install hexo<span class="literal">-cli</span> <span class="literal">-g</span></span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>Linux <code>deploy.sh</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">dest_dir=/home/frank/blog/source/_posts</span><br><span class="line">cd $dest_dir</span><br><span class="line"></span><br><span class="line">find $dest_dir -type d -empty -delete</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;hexo backup&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA 编辑 pom.xml 卡顿</title>
    <url>/2024/08/03/IntelliJ-IDEA-%E7%BC%96%E8%BE%91-pom-xml-%E5%8D%A1%E9%A1%BF/</url>
    <content><![CDATA[<p>删除<code>%localappdata%\JetBrains\IntelliJIdea&#123;version&#125;\Maven\Indices</code>目录下的内容</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM的一些说明</title>
    <url>/2024/08/17/JVM%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<ol>
<li>开启GC日志,使用<code>-XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:/export/log/risk_pillar/gc.log</code><br><img src="/gc.jpg" alt="gc"></li>
<li>设置JVM垃圾最大年龄 <code>-XX:MaxTenuringThreshold=15</code></li>
<li>打印所有命令参数 <code>-XX:+PrintCommandLineFlags -version</code></li>
<li>使用压缩指针<code>-XX:+UseCompressedClassPointers</code>。64位虚拟机中在堆内存小于32GB的情况下，UseCompressedOops是默认开启的，该参数表示开启指针压缩，会将原来64位的指针压缩为32位。所以，在内存大于32G但又不是特别大的时候(比如36G-48G)，通过<code>-xmx=31G</code>限制最大堆内存，强迫JVM开启压缩指针。</li>
</ol>
<p><a href="https://help.aliyun.com/zh/sae/jvm-options">JVM参数配置说明</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之PrintAssembly</title>
    <url>/2024/08/31/Java%E4%B9%8BPrintAssembly/</url>
    <content><![CDATA[<h2 id="PrintAssembly是什么"><a href="#PrintAssembly是什么" class="headerlink" title="PrintAssembly是什么?"></a><code>PrintAssembly</code>是什么?</h2><p><code>PrintAssembly</code> 是JDK 7 以来才有的，用于查看 Java 编译后生成的汇编代码的选项。但要查看汇编代码，需要反汇编插件。插件目前有2种实现: 一种是依赖于Gnu <code>disassembler</code>的，一种是Kenai的项目<a href="http://kenai.com/projects/base-hsdis">base-hsdis</a>，<a href="https://github.com/drazzib/base-hsdis">GitHub地址</a></p>
<p>今天我们使用基于<code>base-hsdis</code>的插件，从<a href="https://chriswhocodes.com/hsdis/">下载地址</a>找到对应的版本下载对应的文件。并将该插件放到相应的位置(Linux是<code>libjvm.so</code>文件所在的文件夹，Windows是<code>jvm.dll</code>所在的文件夹),或者是<code>java</code>命令执行是能找到的环境变量位置。</p>
<h2 id="PrintAssembly常用选项"><a href="#PrintAssembly常用选项" class="headerlink" title="PrintAssembly常用选项"></a><code>PrintAssembly</code>常用选项</h2><ol>
<li><code>+PrintAssembly</code> 打印字节码和本机方法的汇编代码</li>
<li><code>+PrintNMethods</code> 打印生成的方法</li>
<li><code>+PrintNativeNMethods</code> 在生成本机方法包装器时打印它们</li>
<li><code>+PrintSignatureHandlers</code> 打印本机方法签名处理程序</li>
<li><code>+PrintAdapterHandlers</code> 打印适配器（<code>i2c</code>、<code>c2i</code>）的生成情况</li>
<li><code>+PrintStubCode</code> 打印存根：取消选择、不常见陷阱、异常、安全点、运行时支持</li>
<li><code>+PrintInterpreter</code> 打印解释器代码</li>
<li><code>-Xcomp</code> 让 JVM 以编译模式执行代码，即 JVM 会在第一次运行时即将所有字节码编译为本地代码</li>
<li><code>-XX:PrintAssemblyOptions=intel</code> 打印 intel 语法的汇编，默认打印 AT&amp;T的汇编代码</li>
</ol>
<p>这些选项都是“诊断选项”，所以在使用这些选项时，要加上<code>-XX:+UnlockDiagnosticVMOptions</code>选项一起使用，并且加上前缀<code>-XX:</code>(如<code>-XX:+PrintAssembly</code>)。这些选项也可以配置在默认的的文件<code>.hotspotrc</code>中；也可以自定的存在某个文件<code>myhotspotrc.txt</code>,然后使用选项<code>-XX:Flags=myhotspotrc.txt</code>来使用。</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>Linux版</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">XJAVA=<span class="string">&quot;<span class="variable">$JDK7</span>/bin/java -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="variable">$XJAVA</span> -Xcomp -<span class="built_in">cp</span> ~/Classes hello</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="variable">$XJAVA</span> -Xcomp -<span class="built_in">cp</span> ~/Classes -XX:PrintAssemblyOptions=hsdis-print-bytes hello</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="variable">$XJAVA</span> -XX:-PrintAssembly -XX:+PrintStubCode</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="variable">$XJAVA</span> -XX:-PrintAssembly -XX:+PrintInterpreter</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="variable">$XJAVA</span> -XX:-PrintAssembly -XX:+PrintSignatureHandlers</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="variable">$XJAVA</span> -Xbatch -<span class="built_in">cp</span> ~/Classes -XX:+PrintCompilation myloopingbenchmark</span></span><br></pre></td></tr></table></figure>

<p>Windows版</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">java  <span class="literal">-XX</span>:+UnlockDiagnosticVMOptions <span class="literal">-XX</span>:+PrintAssembly <span class="literal">-XX</span>:PrintAssemblyOptions=intel <span class="literal">-XX</span>:+PrintCompilation <span class="literal">-XX</span>:CompileCommand=print,*Son.print  .\chapter01<span class="literal">-bytecode-1</span>.<span class="number">0</span><span class="literal">-SNAPSHOT</span>.jar</span><br></pre></td></tr></table></figure>

<h2 id="过滤输出"><a href="#过滤输出" class="headerlink" title="过滤输出"></a>过滤输出</h2><p>由于使用<code>-XX:PrintAssembly</code>选项，默认输出太多.可以增加一些过滤选项</p>
<ul>
<li><code>-XX:CompileCommand=print,*MyClass.myMethod</code> 仅打印<code>myMethod()</code>的汇编</li>
<li><code>-XX:CompileCommand=option,*MyClass.myMethod,PrintOptoAssembly</code>（仅限调试生成的字节码）生成<code>myMethod()</code>方法的老版本<code>print</code>命令输出</li>
<li><code>-XX:CompileCommand=option,*MyClass.myMethod,PrintNMethods</code> 生成<code>myMethod()</code>方法的转储</li>
</ul>
<p>如果没有输出，使用<code>-XX:+PrintCompilation</code>验证是否编译过。</p>
<p>帮助</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">java  <span class="literal">-XX</span>:CompileCommand=help <span class="literal">-version</span></span><br></pre></td></tr></table></figure>

<h2 id="阅读编译器的细节"><a href="#阅读编译器的细节" class="headerlink" title="阅读编译器的细节"></a>阅读编译器的细节</h2><p>使用<code>-XX:+LogCompilation</code> 选项会生成一个有关编译器和运行时决策的低级 <code>XML</code> 文件，这可能对某些人来说很有趣。这个选项也必须和<code>-XX:+UnlockDiagnosticVMOptions</code>一起使用。默认日志位于当前目录的<code>hotspot.log</code>;也可以使用选项指定位置，如<code>-XX:LogFile=jit.log</code>。</p>
<h2 id="JITWatch"><a href="#JITWatch" class="headerlink" title="JITWatch"></a>JITWatch</h2><p><a href="https://github.com/AdoptOpenJDK/jitwatch">JITWatch</a>是对<code>PrintAssembly</code>打印出的汇编代码进行可视化分析工具。因此，需要添加<code>-Xcomp</code>、<code>-XX:+LogCompilation</code>和选项<code>-XX:LogFile=jit.log</code>打印出汇编代码。</p>
<p>参考<br><a href="https://wiki.openjdk.org/display/HotSpot/PrintAssembly">PrintAssembly</a><br><a href="https://xyzghio.xyz/HSDISAndJITWatch/">Java 反汇编：HSDIS、JITWatch</a><br><a href="https://dropzone.nfshost.com/hsdis/">How to build hsdis-amd64.dll and hsdis-i386.dll on Windows</a><br><a href="https://blogs.oracle.com/javamagazine/post/java-hotspot-hsdis-disassembler">Developers disassemble! Use Java and hsdis to see it all.</a><br><a href="https://github.com/openjdk/jdk/tree/master/src/utils/hsdis">hsdis源码</a><br><a href="https://jornvernee.github.io/hsdis/2022/04/30/hsdis.html">Building hsdis in 2022</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java官方文档使用</title>
    <url>/2024/08/01/Java%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>进入<a href="https://docs.oracle.com/en/java/javase/21/index.html">Oracal Help Center</a>选择对应 JDK 版本，然后分类选择。<br>如查询 <code>java</code> 命令选项，进入<a href="https://docs.oracle.com/en/java/javase/21/docs/specs/man/index.html">JDK Tool Specifications</a>，<br>再进入<a href="https://docs.oracle.com/en/java/javase/21/docs/specs/man/java.html">java</a>信息页面。</p>
<p>如查看系统环境</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> D:\Temp\Java&gt; java <span class="literal">-XshowSettings</span></span><br><span class="line">VM settings:</span><br><span class="line">    Max. Heap Size (Estimated): <span class="number">7.96</span>G</span><br><span class="line">    <span class="keyword">Using</span> VM: OpenJDK 64-Bit Server VM</span><br><span class="line"></span><br><span class="line">Property settings:</span><br><span class="line">    file.encoding = UTF<span class="literal">-8</span></span><br><span class="line">    file.separator = \</span><br><span class="line">    java.class.path =</span><br><span class="line">    java.class.version = <span class="number">65.0</span></span><br><span class="line">    java.home = D:\ProgramFiles\Java\Jabba\jdk\system@<span class="number">21.0</span>.<span class="number">3</span><span class="literal">-full-liberica</span></span><br><span class="line">    java.io.tmpdir = C:\Users\FRANK\AppData\Local\Temp\</span><br><span class="line">    java.library.path = D:\ProgramFiles\Java\Jabba\jdk\system@<span class="number">21.0</span>.<span class="number">3</span><span class="literal">-full-liberica</span>\bin</span><br><span class="line">        C:\Windows\Sun\Java\bin</span><br><span class="line">        C:\Windows\system32</span><br><span class="line">        C:\Windows</span><br><span class="line">        C:\Program Files\Microsoft Visual Studio\<span class="number">2022</span>\Enterprise\Common7\IDE\CommonExtensions\Microsoft\TestWindow</span><br><span class="line">        C:\Program Files\Microsoft Visual Studio\<span class="number">2022</span>\Enterprise\Common7\IDE\CommonExtensions\Microsoft\TeamFoundation\Team Explorer</span><br><span class="line">        C:\Program Files\Microsoft Visual Studio\<span class="number">2022</span>\Enterprise\MSBuild\Current\bin\Roslyn</span><br><span class="line">        C:\Program Files (x86)\Microsoft SDKs\Windows\v10.<span class="number">0</span>A\bin\NETFX <span class="number">4.8</span> Tools\x64\</span><br><span class="line">        C:\Program Files\Microsoft Visual Studio\<span class="number">2022</span>\Enterprise\Common7\IDE\CommonExtensions\Microsoft\FSharp\Tools</span><br><span class="line">        C:\Program Files\Microsoft Visual Studio\<span class="number">2022</span>\Enterprise\Team Tools\DiagnosticsHub\Collector</span><br><span class="line">        C:\Program Files\Microsoft Visual Studio\<span class="number">2022</span>\Enterprise\Common7\IDE\Extensions\Microsoft\CodeCoverage.Console</span><br><span class="line">        C:\Program Files\Microsoft Visual Studio\<span class="number">2022</span>\Enterprise\\MSBuild\Current\Bin\amd64</span><br><span class="line">        C:\Windows\Microsoft.NET\Framework64\v4.<span class="number">0.30319</span></span><br><span class="line">        C:\Program Files\Microsoft Visual Studio\<span class="number">2022</span>\Enterprise\Common7\IDE\</span><br><span class="line">        C:\Program Files\Microsoft Visual Studio\<span class="number">2022</span>\Enterprise\Common7\Tools\</span><br><span class="line">        C:\Windows\system32</span><br><span class="line">        D:\ProgramFiles\Utils</span><br><span class="line">        D:\ProgramFiles\nvm<span class="literal">-noinstall</span></span><br><span class="line">        D:\ProgramFiles\nvm<span class="literal">-noinstall</span>\Node.js</span><br><span class="line">        C:\Program Files (x86)\Windows Kits\<span class="number">10</span>\Windows Performance Toolkit\</span><br><span class="line">        D:\ProgramFiles\Git\bin</span><br><span class="line">        C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\<span class="number">170</span>\Tools\Binn\</span><br><span class="line">        C:\Program Files\Microsoft SQL Server\<span class="number">150</span>\Tools\Binn\</span><br><span class="line">        C:\Program Files\dotnet\</span><br><span class="line">        C:\Program Files\TortoiseGit\bin</span><br><span class="line">        C:\Windows\System32\WindowsPowerShell\v1.<span class="number">0</span></span><br><span class="line">        C:\Windows\System32\OpenSSH</span><br><span class="line">        C:\Users\FRANK\.cargo\bin</span><br><span class="line">        C:\Users\FRANK\AppData\Local\Microsoft\WindowsApps</span><br><span class="line">        C:\Users\FRANK\.dotnet\tools</span><br><span class="line">        D:\ProgramFiles\Java\Jabba\jdk\system@<span class="number">21.0</span>.<span class="number">3</span><span class="literal">-full-liberica</span>\bin</span><br><span class="line"></span><br><span class="line">        .</span><br><span class="line">    java.runtime.name = OpenJDK Runtime Environment</span><br><span class="line">    java.runtime.version = <span class="number">21.0</span>.<span class="number">3</span>+<span class="number">12</span><span class="literal">-LTS</span></span><br><span class="line">    java.specification.name = Java Platform API Specification</span><br><span class="line">    java.specification.vendor = Oracle Corporation</span><br><span class="line">    java.specification.version = <span class="number">21</span></span><br><span class="line">    java.vendor = BellSoft</span><br><span class="line">    java.vendor.url = https://bell<span class="literal">-sw</span>.com/</span><br><span class="line">    java.vendor.url.bug = https://bell<span class="literal">-sw</span>.com/support</span><br><span class="line">    java.version = <span class="number">21.0</span>.<span class="number">3</span></span><br><span class="line">    java.version.date = <span class="number">2024</span><span class="literal">-04-16</span></span><br><span class="line">    java.vm.compressedOopsMode = Zero based</span><br><span class="line">    java.vm.info = mixed mode, sharing</span><br><span class="line">    java.vm.name = OpenJDK <span class="number">64</span><span class="literal">-Bit</span> Server VM</span><br><span class="line">    java.vm.specification.name = Java Virtual Machine Specification</span><br><span class="line">    java.vm.specification.vendor = Oracle Corporation</span><br><span class="line">    java.vm.specification.version = <span class="number">21</span></span><br><span class="line">    java.vm.vendor = BellSoft</span><br><span class="line">    java.vm.version = <span class="number">21.0</span>.<span class="number">3</span>+<span class="number">12</span><span class="literal">-LTS</span></span><br><span class="line">    jdk.debug = release</span><br><span class="line">    line.separator = \r \n</span><br><span class="line">    native.encoding = GBK</span><br><span class="line">    os.arch = amd64</span><br><span class="line">    os.name = Windows <span class="number">11</span></span><br><span class="line">    os.version = <span class="number">10.0</span></span><br><span class="line">    path.separator = ;</span><br><span class="line">    stderr.encoding = ms936</span><br><span class="line">    stdout.encoding = ms936</span><br><span class="line">    sun.arch.data.model = <span class="number">64</span></span><br><span class="line">    sun.boot.library.path = D:\ProgramFiles\Java\Jabba\jdk\system@<span class="number">21.0</span>.<span class="number">3</span><span class="literal">-full-liberica</span>\bin</span><br><span class="line">    sun.cpu.endian = little</span><br><span class="line">    sun.cpu.isalist = amd64</span><br><span class="line">    sun.io.unicode.encoding = UnicodeLittle</span><br><span class="line">    sun.java.launcher = SUN_STANDARD</span><br><span class="line">    sun.jnu.encoding = GBK</span><br><span class="line">    sun.management.compiler = HotSpot <span class="number">64</span><span class="literal">-Bit</span> Tiered Compilers</span><br><span class="line">    sun.os.patch.level =</span><br><span class="line">    user.country = CN</span><br><span class="line">    user.dir = D:\Temp\Java</span><br><span class="line">    user.home = C:\Users\FRANK</span><br><span class="line">    user.language = zh</span><br><span class="line">    user.name = FRANK</span><br><span class="line">    user.script =</span><br><span class="line">    user.variant =</span><br><span class="line"></span><br><span class="line">Locale settings:</span><br><span class="line">    default locale = 中文 (中国)</span><br><span class="line">    default display locale = 中文 (中国)</span><br><span class="line">    default format locale = 中文 (中国)</span><br><span class="line">    tzdata version = <span class="number">2024</span>a</span><br><span class="line">    available locales = , af, af_NA, af_ZA, af_ZA_<span class="comment">#Latn, agq, agq_CM, agq_CM_#Latn,</span></span><br><span class="line">        ak, ak_GH, ak_GH_<span class="comment">#Latn, am, am_ET, am_ET_#Ethi, ann, ann_NG,</span></span><br><span class="line">        ann_NG_<span class="comment">#Latn, ar, ar_001, ar_AE, ar_BH, ar_DJ, ar_DZ, ar_EG,</span></span><br><span class="line">        ar_EG_<span class="comment">#Arab, ar_EH, ar_ER, ar_IL, ar_IQ, ar_JO, ar_KM, ar_KW,</span></span><br><span class="line">        ar_LB, ar_LY, ar_MA, ar_MR, ar_OM, ar_PS, ar_QA, ar_SA,</span><br><span class="line">        ar_SD, ar_SO, ar_SS, ar_SY, ar_TD, ar_TN, ar_YE, as,</span><br><span class="line">        as_IN, as_IN_<span class="comment">#Beng, asa, asa_TZ, asa_TZ_#Latn, ast, ast_ES, ast_ES_#Latn,</span></span><br><span class="line">        az, az_AZ, az_AZ_<span class="comment">#Cyrl, az_AZ_#Latn, az__#Cyrl, az__#Latn, bas, bas_CM,</span></span><br><span class="line">        bas_CM_<span class="comment">#Latn, be, be_BY, be_BY_#Cyrl, be__TARASK, bem, bem_ZM, bem_ZM_#Latn,</span></span><br><span class="line">        bez, bez_TZ, bez_TZ_<span class="comment">#Latn, bg, bg_BG, bg_BG_#Cyrl, bgc, bgc_IN,</span></span><br><span class="line">        bgc_IN_<span class="comment">#Deva, bho, bho_IN, bho_IN_#Deva, bm, bm_ML, bm_ML_#Latn, bn,</span></span><br><span class="line">        bn_BD, bn_BD_<span class="comment">#Beng, bn_IN, bo, bo_CN, bo_CN_#Tibt, bo_IN, br,</span></span><br><span class="line">        br_FR, br_FR_<span class="comment">#Latn, brx, brx_IN, brx_IN_#Deva, bs, bs_BA, bs_BA_#Cyrl,</span></span><br><span class="line">        bs_BA_<span class="comment">#Latn, bs__#Cyrl, bs__#Latn, ca, ca_AD, ca_ES, ca_ES_#Latn, ca_ES_VALENCIA,</span></span><br><span class="line">        ca_FR, ca_IT, ccp, ccp_BD, ccp_BD_<span class="comment">#Cakm, ccp_IN, ce, ce_RU,</span></span><br><span class="line">        ce_RU_<span class="comment">#Cyrl, ceb, ceb_PH, ceb_PH_#Latn, cgg, cgg_UG, cgg_UG_#Latn, chr,</span></span><br><span class="line">        chr_US, chr_US_<span class="comment">#Cher, ckb, ckb_IQ, ckb_IQ_#Arab, ckb_IR, cs, cs_CZ,</span></span><br><span class="line">        cs_CZ_<span class="comment">#Latn, cv, cv_RU, cv_RU_#Cyrl, cy, cy_GB, cy_GB_#Latn, da,</span></span><br><span class="line">        da_DK, da_DK_<span class="comment">#Latn, da_GL, dav, dav_KE, dav_KE_#Latn, de, de_AT,</span></span><br><span class="line">        de_BE, de_CH, de_DE, de_DE_<span class="comment">#Latn, de_IT, de_LI, de_LU, dje,</span></span><br><span class="line">        dje_NE, dje_NE_<span class="comment">#Latn, doi, doi_IN, doi_IN_#Deva, dsb, dsb_DE, dsb_DE_#Latn,</span></span><br><span class="line">        dua, dua_CM, dua_CM_<span class="comment">#Latn, dyo, dyo_SN, dyo_SN_#Latn, dz, dz_BT,</span></span><br><span class="line">        dz_BT_<span class="comment">#Tibt, ebu, ebu_KE, ebu_KE_#Latn, ee, ee_GH, ee_GH_#Latn, ee_TG,</span></span><br><span class="line">        el, el_CY, el_GR, el_GR_<span class="comment">#Grek, el__POLYTON, en, en_001, en_150,</span></span><br><span class="line">        en_AE, en_AG, en_AI, en_AS, en_AT, en_AU, en_BB, en_BE,</span><br><span class="line">        en_BI, en_BM, en_BS, en_BW, en_BZ, en_CA, en_CC, en_CH,</span><br><span class="line">        en_CK, en_CM, en_CX, en_CY, en_DE, en_DG, en_DK, en_DM,</span><br><span class="line">        en_ER, en_FI, en_FJ, en_FK, en_FM, en_GB, en_GD, en_GG,</span><br><span class="line">        en_GH, en_GI, en_GM, en_GU, en_GY, en_HK, en_IE, en_IL,</span><br><span class="line">        en_IM, en_IN, en_IO, en_JE, en_JM, en_KE, en_KI, en_KN,</span><br><span class="line">        en_KY, en_LC, en_LR, en_LS, en_MG, en_MH, en_MO, en_MP,</span><br><span class="line">        en_MS, en_MT, en_MU, en_MV, en_MW, en_MY, en_NA, en_NF,</span><br><span class="line">        en_NG, en_NL, en_NR, en_NU, en_NZ, en_PG, en_PH, en_PK,</span><br><span class="line">        en_PN, en_PR, en_PW, en_RW, en_SB, en_SC, en_SD, en_SE,</span><br><span class="line">        en_SG, en_SH, en_SI, en_SL, en_SS, en_SX, en_SZ, en_TC,</span><br><span class="line">        en_TK, en_TO, en_TT, en_TV, en_TZ, en_UG, en_UM, en_US,</span><br><span class="line">        en_US_<span class="comment">#Latn, en_US_POSIX, en_VC, en_VG, en_VI, en_VU, en_WS, en_ZA,</span></span><br><span class="line">        en_ZM, en_ZW, eo, eo_001, eo_001_<span class="comment">#Latn, es, es_419, es_AR,</span></span><br><span class="line">        es_BO, es_BR, es_BZ, es_CL, es_CO, es_CR, es_CU, es_DO,</span><br><span class="line">        es_EA, es_EC, es_ES, es_ES_<span class="comment">#Latn, es_GQ, es_GT, es_HN, es_IC,</span></span><br><span class="line">        es_MX, es_NI, es_PA, es_PE, es_PH, es_PR, es_PY, es_SV,</span><br><span class="line">        es_US, es_UY, es_VE, et, et_EE, et_EE_<span class="comment">#Latn, eu, eu_ES,</span></span><br><span class="line">        eu_ES_<span class="comment">#Latn, ewo, ewo_CM, ewo_CM_#Latn, fa, fa_AF, fa_IR, fa_IR_#Arab,</span></span><br><span class="line">        ff, ff_BF_<span class="comment">#Adlm, ff_BF_#Latn, ff_CM_#Adlm, ff_CM_#Latn, ff_GH_#Adlm, ff_GH_#Latn, ff_GM_#Adlm,</span></span><br><span class="line">        ff_GM_<span class="comment">#Latn, ff_GN, ff_GN_#Adlm, ff_GN_#Latn, ff_GW_#Adlm, ff_GW_#Latn, ff_LR_#Adlm, ff_LR_#Latn,</span></span><br><span class="line">        ff_MR_<span class="comment">#Adlm, ff_MR_#Latn, ff_NE_#Adlm, ff_NE_#Latn, ff_NG_#Adlm, ff_NG_#Latn, ff_SL_#Adlm, ff_SL_#Latn,</span></span><br><span class="line">        ff_SN, ff_SN_<span class="comment">#Adlm, ff_SN_#Latn, ff__#Adlm, ff__#Latn, fi, fi_FI, fi_FI_#Latn,</span></span><br><span class="line">        fil, fil_PH, fil_PH_<span class="comment">#Latn, fo, fo_DK, fo_FO, fo_FO_#Latn, fr,</span></span><br><span class="line">        fr_BE, fr_BF, fr_BI, fr_BJ, fr_BL, fr_CA, fr_CD, fr_CF,</span><br><span class="line">        fr_CG, fr_CH, fr_CI, fr_CM, fr_DJ, fr_DZ, fr_FR, fr_FR_<span class="comment">#Latn,</span></span><br><span class="line">        fr_GA, fr_GF, fr_GN, fr_GP, fr_GQ, fr_HT, fr_KM, fr_LU,</span><br><span class="line">        fr_MA, fr_MC, fr_MF, fr_MG, fr_ML, fr_MQ, fr_MR, fr_MU,</span><br><span class="line">        fr_NC, fr_NE, fr_PF, fr_PM, fr_RE, fr_RW, fr_SC, fr_SN,</span><br><span class="line">        fr_SY, fr_TD, fr_TG, fr_TN, fr_VU, fr_WF, fr_YT, frr,</span><br><span class="line">        frr_DE, frr_DE_<span class="comment">#Latn, fur, fur_IT, fur_IT_#Latn, fy, fy_NL, fy_NL_#Latn,</span></span><br><span class="line">        ga, ga_GB, ga_IE, ga_IE_<span class="comment">#Latn, gd, gd_GB, gd_GB_#Latn, gl,</span></span><br><span class="line">        gl_ES, gl_ES_<span class="comment">#Latn, gsw, gsw_CH, gsw_CH_#Latn, gsw_FR, gsw_LI, gu,</span></span><br><span class="line">        gu_IN, gu_IN_<span class="comment">#Gujr, guz, guz_KE, guz_KE_#Latn, gv, gv_IM, gv_IM_#Latn,</span></span><br><span class="line">        ha, ha_GH, ha_NE, ha_NG, ha_NG_<span class="comment">#Latn, haw, haw_US, haw_US_#Latn,</span></span><br><span class="line">        he, he_IL, he_IL_<span class="comment">#Hebr, hi, hi_IN, hi_IN_#Deva, hi_IN_#Latn, hi__#Latn,</span></span><br><span class="line">        hr, hr_BA, hr_HR, hr_HR_<span class="comment">#Latn, hsb, hsb_DE, hsb_DE_#Latn, hu,</span></span><br><span class="line">        hu_HU, hu_HU_<span class="comment">#Latn, hy, hy_AM, hy_AM_#Armn, ia, ia_001, ia_001_#Latn,</span></span><br><span class="line">        id, id_ID, id_ID_<span class="comment">#Latn, ig, ig_NG, ig_NG_#Latn, ii, ii_CN,</span></span><br><span class="line">        ii_CN_<span class="comment">#Yiii, is, is_IS, is_IS_#Latn, it, it_CH, it_IT, it_IT_#Latn,</span></span><br><span class="line">        it_SM, it_VA, ja, ja_JP, ja_JP_<span class="comment">#Jpan, ja_JP_JP_#u-ca-japanese, jgo, jgo_CM,</span></span><br><span class="line">        jgo_CM_<span class="comment">#Latn, jmc, jmc_TZ, jmc_TZ_#Latn, jv, jv_ID, jv_ID_#Latn, ka,</span></span><br><span class="line">        ka_GE, ka_GE_<span class="comment">#Geor, kab, kab_DZ, kab_DZ_#Latn, kam, kam_KE, kam_KE_#Latn,</span></span><br><span class="line">        kde, kde_TZ, kde_TZ_<span class="comment">#Latn, kea, kea_CV, kea_CV_#Latn, kgp, kgp_BR,</span></span><br><span class="line">        kgp_BR_<span class="comment">#Latn, khq, khq_ML, khq_ML_#Latn, ki, ki_KE, ki_KE_#Latn, kk,</span></span><br><span class="line">        kk_KZ, kk_KZ_<span class="comment">#Cyrl, kkj, kkj_CM, kkj_CM_#Latn, kl, kl_GL, kl_GL_#Latn,</span></span><br><span class="line">        kln, kln_KE, kln_KE_<span class="comment">#Latn, km, km_KH, km_KH_#Khmr, kn, kn_IN,</span></span><br><span class="line">        kn_IN_<span class="comment">#Knda, ko, ko_KP, ko_KR, ko_KR_#Kore, kok, kok_IN, kok_IN_#Deva,</span></span><br><span class="line">        ks, ks_IN, ks_IN_<span class="comment">#Arab, ks_IN_#Deva, ks__#Arab, ks__#Deva, ksb, ksb_TZ,</span></span><br><span class="line">        ksb_TZ_<span class="comment">#Latn, ksf, ksf_CM, ksf_CM_#Latn, ksh, ksh_DE, ksh_DE_#Latn, ku,</span></span><br><span class="line">        ku_TR, ku_TR_<span class="comment">#Latn, kw, kw_GB, kw_GB_#Latn, ky, ky_KG, ky_KG_#Cyrl,</span></span><br><span class="line">        lag, lag_TZ, lag_TZ_<span class="comment">#Latn, lb, lb_LU, lb_LU_#Latn, lg, lg_UG,</span></span><br><span class="line">        lg_UG_<span class="comment">#Latn, lkt, lkt_US, lkt_US_#Latn, ln, ln_AO, ln_CD, ln_CD_#Latn,</span></span><br><span class="line">        ln_CF, ln_CG, lo, lo_LA, lo_LA_<span class="comment">#Laoo, lrc, lrc_IQ, lrc_IR,</span></span><br><span class="line">        lrc_IR_<span class="comment">#Arab, lt, lt_LT, lt_LT_#Latn, lu, lu_CD, lu_CD_#Latn, luo,</span></span><br><span class="line">        luo_KE, luo_KE_<span class="comment">#Latn, luy, luy_KE, luy_KE_#Latn, lv, lv_LV, lv_LV_#Latn,</span></span><br><span class="line">        mai, mai_IN, mai_IN_<span class="comment">#Deva, mas, mas_KE, mas_KE_#Latn, mas_TZ, mdf,</span></span><br><span class="line">        mdf_RU, mdf_RU_<span class="comment">#Cyrl, mer, mer_KE, mer_KE_#Latn, mfe, mfe_MU, mfe_MU_#Latn,</span></span><br><span class="line">        mg, mg_MG, mg_MG_<span class="comment">#Latn, mgh, mgh_MZ, mgh_MZ_#Latn, mgo, mgo_CM,</span></span><br><span class="line">        mgo_CM_<span class="comment">#Latn, mi, mi_NZ, mi_NZ_#Latn, mk, mk_MK, mk_MK_#Cyrl, ml,</span></span><br><span class="line">        ml_IN, ml_IN_<span class="comment">#Mlym, mn, mn_MN, mn_MN_#Cyrl, mni, mni_IN, mni_IN_#Beng,</span></span><br><span class="line">        mni__<span class="comment">#Beng, mr, mr_IN, mr_IN_#Deva, ms, ms_BN, ms_ID, ms_MY,</span></span><br><span class="line">        ms_MY_<span class="comment">#Latn, ms_SG, mt, mt_MT, mt_MT_#Latn, mua, mua_CM, mua_CM_#Latn,</span></span><br><span class="line">        my, my_MM, my_MM_<span class="comment">#Mymr, mzn, mzn_IR, mzn_IR_#Arab, naq, naq_NA,</span></span><br><span class="line">        naq_NA_<span class="comment">#Latn, nb, nb_NO, nb_NO_#Latn, nb_SJ, nd, nd_ZW, nd_ZW_#Latn,</span></span><br><span class="line">        nds, nds_DE, nds_DE_<span class="comment">#Latn, nds_NL, ne, ne_IN, ne_NP, ne_NP_#Deva,</span></span><br><span class="line">        nl, nl_AW, nl_BE, nl_BQ, nl_CW, nl_NL, nl_NL_<span class="comment">#Latn, nl_SR,</span></span><br><span class="line">        nl_SX, nmg, nmg_CM, nmg_CM_<span class="comment">#Latn, nn, nn_NO, nn_NO_#Latn, nnh,</span></span><br><span class="line">        nnh_CM, nnh_CM_<span class="comment">#Latn, no, no_NO, no_NO_#Latn, no_NO_NY, nus, nus_SS,</span></span><br><span class="line">        nus_SS_<span class="comment">#Latn, nyn, nyn_UG, nyn_UG_#Latn, oc, oc_ES, oc_FR, oc_FR_#Latn,</span></span><br><span class="line">        om, om_ET, om_ET_<span class="comment">#Latn, om_KE, or, or_IN, or_IN_#Orya, os,</span></span><br><span class="line">        os_GE, os_GE_<span class="comment">#Cyrl, os_RU, pa, pa_IN, pa_IN_#Guru, pa_PK, pa_PK_#Arab,</span></span><br><span class="line">        pa__<span class="comment">#Arab, pa__#Guru, pcm, pcm_NG, pcm_NG_#Latn, pis, pis_SB, pis_SB_#Latn,</span></span><br><span class="line">        pl, pl_PL, pl_PL_<span class="comment">#Latn, ps, ps_AF, ps_AF_#Arab, ps_PK, pt,</span></span><br><span class="line">        pt_AO, pt_BR, pt_BR_<span class="comment">#Latn, pt_CH, pt_CV, pt_GQ, pt_GW, pt_LU,</span></span><br><span class="line">        pt_MO, pt_MZ, pt_PT, pt_ST, pt_TL, qu, qu_BO, qu_EC,</span><br><span class="line">        qu_PE, qu_PE_<span class="comment">#Latn, raj, raj_IN, raj_IN_#Deva, rm, rm_CH, rm_CH_#Latn,</span></span><br><span class="line">        rn, rn_BI, rn_BI_<span class="comment">#Latn, ro, ro_MD, ro_RO, ro_RO_#Latn, rof,</span></span><br><span class="line">        rof_TZ, rof_TZ_<span class="comment">#Latn, ru, ru_BY, ru_KG, ru_KZ, ru_MD, ru_RU,</span></span><br><span class="line">        ru_RU_<span class="comment">#Cyrl, ru_UA, rw, rw_RW, rw_RW_#Latn, rwk, rwk_TZ, rwk_TZ_#Latn,</span></span><br><span class="line">        sa, sa_IN, sa_IN_<span class="comment">#Deva, sah, sah_RU, sah_RU_#Cyrl, saq, saq_KE,</span></span><br><span class="line">        saq_KE_<span class="comment">#Latn, sat, sat_IN, sat_IN_#Olck, sat__#Olck, sbp, sbp_TZ, sbp_TZ_#Latn,</span></span><br><span class="line">        <span class="built_in">sc</span>, sc_IT, sc_IT_<span class="comment">#Latn, sd, sd_IN, sd_IN_#Deva, sd_PK, sd_PK_#Arab,</span></span><br><span class="line">        sd__<span class="comment">#Arab, sd__#Deva, se, se_FI, se_NO, se_NO_#Latn, se_SE, seh,</span></span><br><span class="line">        seh_MZ, seh_MZ_<span class="comment">#Latn, ses, ses_ML, ses_ML_#Latn, sg, sg_CF, sg_CF_#Latn,</span></span><br><span class="line">        shi, shi_MA, shi_MA_<span class="comment">#Latn, shi_MA_#Tfng, shi__#Latn, shi__#Tfng, si, si_LK,</span></span><br><span class="line">        si_LK_<span class="comment">#Sinh, sk, sk_SK, sk_SK_#Latn, sl, sl_SI, sl_SI_#Latn, smn,</span></span><br><span class="line">        smn_FI, smn_FI_<span class="comment">#Latn, sms, sms_FI, sms_FI_#Latn, sn, sn_ZW, sn_ZW_#Latn,</span></span><br><span class="line">        so, so_DJ, so_ET, so_KE, so_SO, so_SO_<span class="comment">#Latn, sq, sq_AL,</span></span><br><span class="line">        sq_AL_<span class="comment">#Latn, sq_MK, sq_XK, sr, sr_BA, sr_BA_#Cyrl, sr_BA_#Latn, sr_CS,</span></span><br><span class="line">        sr_ME, sr_ME_<span class="comment">#Cyrl, sr_ME_#Latn, sr_RS, sr_RS_#Cyrl, sr_RS_#Latn, sr_XK_#Cyrl, sr_XK_#Latn,</span></span><br><span class="line">        sr__<span class="comment">#Cyrl, sr__#Latn, su, su_ID, su_ID_#Latn, su__#Latn, sv, sv_AX,</span></span><br><span class="line">        sv_FI, sv_SE, sv_SE_<span class="comment">#Latn, sw, sw_CD, sw_KE, sw_TZ, sw_TZ_#Latn,</span></span><br><span class="line">        sw_UG, ta, ta_IN, ta_IN_<span class="comment">#Taml, ta_LK, ta_MY, ta_SG, te,</span></span><br><span class="line">        te_IN, te_IN_<span class="comment">#Telu, teo, teo_KE, teo_UG, teo_UG_#Latn, tg, tg_TJ,</span></span><br><span class="line">        tg_TJ_<span class="comment">#Cyrl, th, th_TH, th_TH_#Thai, th_TH_TH_#u-nu-thai, ti, ti_ER, ti_ET,</span></span><br><span class="line">        ti_ET_<span class="comment">#Ethi, tk, tk_TM, tk_TM_#Latn, to, to_TO, to_TO_#Latn, tok,</span></span><br><span class="line">        tok_001, tok_001_<span class="comment">#Latn, tr, tr_CY, tr_TR, tr_TR_#Latn, tt, tt_RU,</span></span><br><span class="line">        tt_RU_<span class="comment">#Cyrl, twq, twq_NE, twq_NE_#Latn, tzm, tzm_MA, tzm_MA_#Latn, ug,</span></span><br><span class="line">        ug_CN, ug_CN_<span class="comment">#Arab, uk, uk_UA, uk_UA_#Cyrl, ur, ur_IN, ur_PK,</span></span><br><span class="line">        ur_PK_<span class="comment">#Arab, uz, uz_AF, uz_AF_#Arab, uz_UZ, uz_UZ_#Cyrl, uz_UZ_#Latn, uz__#Arab,</span></span><br><span class="line">        uz__<span class="comment">#Cyrl, uz__#Latn, vai, vai_LR, vai_LR_#Latn, vai_LR_#Vaii, vai__#Latn, vai__#Vaii,</span></span><br><span class="line">        vi, vi_VN, vi_VN_<span class="comment">#Latn, vun, vun_TZ, vun_TZ_#Latn, wae, wae_CH,</span></span><br><span class="line">        wae_CH_<span class="comment">#Latn, wo, wo_SN, wo_SN_#Latn, xh, xh_ZA, xh_ZA_#Latn, xog,</span></span><br><span class="line">        xog_UG, xog_UG_<span class="comment">#Latn, yav, yav_CM, yav_CM_#Latn, yi, yi_001, yi_001_#Hebr,</span></span><br><span class="line">        yo, yo_BJ, yo_NG, yo_NG_<span class="comment">#Latn, yrl, yrl_BR, yrl_BR_#Latn, yrl_CO,</span></span><br><span class="line">        yrl_VE, yue, yue_CN, yue_CN_<span class="comment">#Hans, yue_HK, yue_HK_#Hant, yue__#Hans, yue__#Hant,</span></span><br><span class="line">        zgh, zgh_MA, zgh_MA_<span class="comment">#Tfng, zh, zh_CN, zh_CN_#Hans, zh_HK, zh_HK_#Hans,</span></span><br><span class="line">        zh_HK_<span class="comment">#Hant, zh_MO, zh_MO_#Hans, zh_MO_#Hant, zh_SG, zh_SG_#Hans, zh_TW, zh_TW_#Hant,</span></span><br><span class="line">        zh__<span class="comment">#Hans, zh__#Hant, zu, zu_ZA, zu_ZA_#Latn</span></span><br><span class="line">用法：java [<span class="type">options</span>] &lt;主类&gt; [<span class="type">args...</span>]</span><br><span class="line">           （执行类）</span><br><span class="line">   或  java [<span class="type">options</span>] <span class="literal">-jar</span> &lt;jar 文件&gt; [<span class="type">args...</span>]</span><br><span class="line">           （执行 jar 文件）</span><br><span class="line">   或  java [<span class="type">options</span>] <span class="literal">-m</span> &lt;模块&gt;[/&lt;主类&gt;] [<span class="type">args...</span>]</span><br><span class="line">       java [<span class="type">options</span>] <span class="literal">--module</span> &lt;模块&gt;[/&lt;主类&gt;] [<span class="type">args...</span>]</span><br><span class="line">           （执行模块中的主类）</span><br><span class="line">   或  java [<span class="type">options</span>] &lt;源文件&gt; [<span class="type">args</span>]</span><br><span class="line">           （执行单个源文件程序）</span><br><span class="line"></span><br><span class="line"> 将主类、源文件、<span class="literal">-jar</span> &lt;jar 文件&gt;、<span class="literal">-m</span> 或</span><br><span class="line"> <span class="literal">--module</span> &lt;模块&gt;/&lt;主类&gt; 后的参数作为参数</span><br><span class="line"> 传递到主类。</span><br><span class="line"></span><br><span class="line"> 其中，选项包括：</span><br><span class="line"></span><br><span class="line">    <span class="literal">-client</span>       选择 <span class="string">&quot;client&quot;</span> VM</span><br><span class="line">    <span class="literal">-cp</span> &lt;目录和 zip/jar 文件的类搜索路径&gt;</span><br><span class="line">    <span class="literal">-classpath</span> &lt;目录和 zip/jar 文件的类搜索路径&gt;</span><br><span class="line">    <span class="literal">--class-path</span> &lt;目录和 zip/jar 文件的类搜索路径&gt;</span><br><span class="line">                  使用 ; 分隔的, 用于搜索类文件的目录, JAR 档案</span><br><span class="line">                  和 ZIP 档案列表。</span><br><span class="line">    <span class="literal">-p</span> &lt;模块路径&gt;</span><br><span class="line">    <span class="literal">--module-path</span> &lt;模块路径&gt;...</span><br><span class="line">                  ; 分隔的元素列表，每个元素都是</span><br><span class="line">                  模块或包含模块的目录的文件路径。每个模块都是</span><br><span class="line">                  模块化 JAR 或展开的模块目录。</span><br><span class="line">    <span class="literal">--upgrade-module-path</span> &lt;模块路径&gt;...</span><br><span class="line">                  ; 分隔的元素列表，每个元素都是</span><br><span class="line">                  模块或包含模块（用于替换运行时映像中的</span><br><span class="line">                  可升级模块）的目录的文件路径。每个模块都是</span><br><span class="line">                  模块化 JAR 或展开的模块目录。</span><br><span class="line">    <span class="literal">--add-modules</span> &lt;模块名称&gt;[,&lt;模块名称&gt;<span class="type">...</span>]</span><br><span class="line">                  除了初始模块之外要解析的根模块。</span><br><span class="line">                  &lt;模块名称&gt; 还可以为 ALL<span class="literal">-DEFAULT</span>, ALL<span class="literal">-SYSTEM</span>,</span><br><span class="line">                  ALL<span class="literal">-MODULE-PATH</span>.</span><br><span class="line">    <span class="literal">--enable-native-access</span> &lt;module name&gt;[,&lt;<span class="type">module</span> <span class="type">name</span>&gt;<span class="type">...</span>]</span><br><span class="line">                  允许执行受限本机操作的模块。</span><br><span class="line">                  &lt;module name&gt; 还可以为 ALL<span class="literal">-UNNAMED</span>。</span><br><span class="line">    <span class="literal">--list-modules</span></span><br><span class="line">                  列出可观察模块并退出</span><br><span class="line">    <span class="literal">-d</span> &lt;module name&gt;</span><br><span class="line">    <span class="literal">--describe-module</span> &lt;模块名称&gt;</span><br><span class="line">                  描述模块并退出</span><br><span class="line">    <span class="literal">--dry-run</span>     创建 VM 并加载主类, 但不执行 main 方法。</span><br><span class="line">                  此 <span class="literal">--dry-run</span> 选项对于验证诸如</span><br><span class="line">                  模块系统配置这样的命令行选项可能非常有用。</span><br><span class="line">    <span class="literal">--validate-modules</span></span><br><span class="line">                  验证所有模块并退出</span><br><span class="line">                  <span class="literal">--validate-modules</span> 选项对于查找</span><br><span class="line">                  模块路径中模块的冲突及其他错误可能非常有用。</span><br><span class="line">    <span class="literal">-D</span>&lt;名称&gt;=&lt;值&gt;</span><br><span class="line">                  设置系统属性</span><br><span class="line">    <span class="literal">-verbose</span>:[<span class="type">class</span>|<span class="type">module</span>|<span class="type">gc</span>|<span class="type">jni</span>]</span><br><span class="line">                  为给定子系统启用详细输出</span><br><span class="line">    <span class="literal">-version</span>      将产品版本输出到错误流并退出</span><br><span class="line">    <span class="literal">--version</span>     将产品版本输出到输出流并退出</span><br><span class="line">    <span class="literal">-showversion</span>  将产品版本输出到错误流并继续</span><br><span class="line">    <span class="literal">--show-version</span></span><br><span class="line">                  将产品版本输出到输出流并继续</span><br><span class="line">    <span class="literal">--show-module-resolution</span></span><br><span class="line">                  在启动过程中显示模块解析输出</span><br><span class="line">    -? <span class="literal">-h</span> <span class="literal">-help</span></span><br><span class="line">                  将此帮助消息输出到错误流</span><br><span class="line">    <span class="literal">--help</span>        将此帮助消息输出到输出流</span><br><span class="line">    <span class="literal">-X</span>            将额外选项的帮助输出到错误流</span><br><span class="line">    <span class="literal">--help-extra</span>  将额外选项的帮助输出到输出流</span><br><span class="line">    <span class="literal">-ea</span>[:&lt;程序包名称&gt;<span class="type">...</span>|:&lt;类名&gt;]</span><br><span class="line">    <span class="literal">-enableassertions</span>[:&lt;程序包名称&gt;<span class="type">...</span>|:&lt;类名&gt;]</span><br><span class="line">                  按指定的粒度启用断言</span><br><span class="line">    <span class="literal">-da</span>[:&lt;程序包名称&gt;<span class="type">...</span>|:&lt;类名&gt;]</span><br><span class="line">    <span class="literal">-disableassertions</span>[:&lt;程序包名称&gt;<span class="type">...</span>|:&lt;类名&gt;]</span><br><span class="line">                  按指定的粒度禁用断言</span><br><span class="line">    <span class="literal">-esa</span> | <span class="literal">-enablesystemassertions</span></span><br><span class="line">                  启用系统断言</span><br><span class="line">    <span class="literal">-dsa</span> | <span class="literal">-disablesystemassertions</span></span><br><span class="line">                  禁用系统断言</span><br><span class="line">    <span class="literal">-agentlib</span>:&lt;库名&gt;[=&lt;选项&gt;]</span><br><span class="line">                  加载本机代理库 &lt;库名&gt;, 例如 <span class="literal">-agentlib</span>:jdwp</span><br><span class="line">                  另请参阅 <span class="literal">-agentlib</span>:jdwp=help</span><br><span class="line">    <span class="literal">-agentpath</span>:&lt;路径名&gt;[=&lt;选项&gt;]</span><br><span class="line">                  按完整路径名加载本机代理库</span><br><span class="line">    <span class="literal">-javaagent</span>:&lt;jar 路径&gt;[=&lt;选项&gt;]</span><br><span class="line">                  加载 Java 编程语言代理, 请参阅 java.lang.instrument</span><br><span class="line">    <span class="literal">-splash</span>:&lt;图像路径&gt;</span><br><span class="line">                  使用指定的图像显示启动屏幕</span><br><span class="line">                  自动支持和使用 HiDPI 缩放图像</span><br><span class="line">                  (如果可用)。应始终将未缩放的图像文件名 (例如, image.ext)</span><br><span class="line">                  作为参数传递给 <span class="literal">-splash</span> 选项。</span><br><span class="line">                  将自动选取提供的最合适的缩放</span><br><span class="line">                  图像。</span><br><span class="line">                  有关详细信息, 请参阅 SplashScreen API 文档</span><br><span class="line">    @argument 文件</span><br><span class="line">                  一个或多个包含选项的参数文件</span><br><span class="line">    <span class="literal">--disable-</span>@files</span><br><span class="line">                  阻止进一步扩展参数文件</span><br><span class="line">    <span class="literal">--enable-preview</span></span><br><span class="line">                  允许类依赖于此发行版的预览功能</span><br><span class="line">要为长选项指定参数, 可以使用 <span class="literal">--</span>&lt;名称&gt;=&lt;值&gt; 或</span><br><span class="line"><span class="literal">--</span>&lt;名称&gt; &lt;值&gt;。</span><br><span class="line"></span><br><span class="line"><span class="built_in">PS</span> D:\Temp\Java&gt;</span><br></pre></td></tr></table></figure>

<p>目前只找到 Oracle 官网有此文档，其他发布版本，不一定有。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux文本重定向权限问题</title>
    <url>/2024/08/03/Linux%E6%96%87%E6%9C%AC%E9%87%8D%E5%AE%9A%E5%90%91%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">frank@debian:/etc/nginx/sites-enabled$ <span class="built_in">cat</span> nexus.conf |grep -s proxy_set &gt;&gt; blog.conf</span><br><span class="line">-bash: blog.conf: Permission denied</span><br></pre></td></tr></table></figure>

<p>默认情况下，<code>Linux</code> shell 是使用当前用户的权限去执行 <code>&gt;</code> 和 <code>&gt;&gt;</code> 命令。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul>
<li><h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> -i</span><br><span class="line"><span class="built_in">cd</span> /etc/nginx/sites-enabled/</span><br><span class="line"><span class="built_in">cat</span> nexus.conf |grep -s proxy_set &gt;&gt; blog.conf</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="二"><a href="#二" class="headerlink" title="二"></a>二</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> bash -c <span class="string">&#x27;cat nexus.conf |grep -s proxy_set &gt;&gt; blog.conf&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="三"><a href="#三" class="headerlink" title="三"></a>三</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> nexus.conf |grep proxy_set|<span class="built_in">sudo</span> <span class="built_in">tee</span> -a blog.conf</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中文件命名的最佳实践</title>
    <url>/2024/08/04/Linux%E4%B8%AD%E6%96%87%E4%BB%B6%E5%91%BD%E5%90%8D%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p>转自<a href="https://www.inmotionhosting.com/support/server/linux/best-practice-for-naming-files-in-linux/">Best practice for naming files in Linux</a></p>
<p>如果您正在开发您的网站，但无法找出为什么您的页面、图像、JavaScript 和其他网络数据导致404 未找到错误，则您可能遇到了大小写敏感问题。</p>
<p>Linux 服务器区分大小写。Windows 服务器不区分大小写，因此如果您将文件从 Windows 开发平台移动到 Linux Web 平台，则可能需要注意以下常见错误。</p>
<p>常见的区分大小写错误</p>
<ul>
<li><p>混合大写和小写</p>
<ul>
<li>一个常见的错误是将文件命名为大小写混合。<br>如:<br><code>MyFileName.html</code><br>Linux 按照文件名的输入方式读取文件名。因此，<br><code>MyFileName.html</code><br>与以下内容不同：<br><code>myfilename.html</code></li>
</ul>
</li>
<li><p>错误输入文件扩展名</p>
<p>文件扩展名也区分大小写。有些文件类型有 4 个字母，有些则有 3 个字母。请参见以下示例：<br>同样，文件扩展名也需要准确：<br><code>MyFileName.HTML</code><br>与以下内容不同：<br><code>myfilename.html</code></p>
<p>此外，图像扩展必须是正确的类型：<br><code>image.jpg</code><br>与以下内容不同：<br><code>image.jpeg</code></p>
</li>
</ul>
<p>Linux 文件命名的最佳实践<br>为了防止网站上的文件路径出现问题，我们建议遵循文件命名的最佳做法。请参阅以下内容：</p>
<ol>
<li>将所有文件命名为小写。</li>
<li>不要使用空格，而要使用 ( _ ) 或 ( – )</li>
<li>使用一致的文件类型。使用 jpg 或 jpeg。不要同时使用两者。</li>
<li>只能使用字母数字字符、句点、下划线和连字符，不要使用“%”、“$”等符号。</li>
<li>保持文件名简短且具有描述性</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql在Docker里时间晚8小时</title>
    <url>/2024/08/03/MySql%E5%9C%A8Docker%E9%87%8C%E6%97%B6%E9%97%B4%E6%99%9A8%E5%B0%8F%E6%97%B6/</url>
    <content><![CDATA[<p><code>/etc/localtime</code>是用来描述本机时间<br><code>/etc/timezone</code>是用来描述本机所属的时区</p>
<p>在Linux中，有一些程序会自己计算时间，不会直接采用带有时区的本机时间格式，会根据UTC时间和本机所属的时区等计算出当前的时间。</p>
<p>比如JDK应用，时区为“Etc&#x2F;UTC”，本机时间改为北京时间，通过Java代码中<code>new</code> 出来的时间还是 <code>UTC</code> 时间，所以必须得修正本机的时区。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it containerID /bin/bash</span><br></pre></td></tr></table></figure>

<p>以下命令在容器中运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"><span class="built_in">touch</span> clock</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&#x27;ZONE=&quot;Asia/Shanghai&quot; \nUTC=fasle\nARC=false&#x27;</span> &gt; clock</span><br></pre></td></tr></table></figure>

<p>依次检查系统时区、MySQL时区、Java应用程序时区、Java应用程序连接字符串时区设置</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>POM中使用本地JAR</title>
    <url>/2024/08/08/POM%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0JAR/</url>
    <content><![CDATA[<p>假定<code>lib</code>位于项目根目录，与<code>pom.xml</code>同级别</p>
<p>错误: 使用项目的相关变量，子项目找不到，编译也会错误提醒，但似乎可以执行。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jdk.tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jconsole<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;pom.basedir&#125;/lib/jconsole.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方式一: 使用绝对路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">local.lib</span>&gt;</span>D:/Java/JDK/OpenJDK/jdk8u412-b08/lib<span class="tag">&lt;/<span class="name">local.lib</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jdk.tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jconsole<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;local.lib&#125;/jconsole.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方式二: 使用仓库</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>external_lib<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Repository in project&#x27;s lib dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>file:///$&#123;project.basedir&#125;/lib<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jdk.tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jconsole<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Python免安装版配置</title>
    <url>/2024/08/17/Python%E5%85%8D%E5%AE%89%E8%A3%85%E7%89%88%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<ol>
<li><p>指定<code>pip</code>源泉<br> 创建配置文件</p>
<ul>
<li>Windows: 在<code>%USERPROFILE%\pip\pip.ini</code><br>  <code>mklink /D %USERPROFILE%\pip\ D:\SystemConfig\pip</code></li>
<li>Linux：在<code>~/.pip/pip.conf</code></li>
</ul>
 <figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = http://mirrors.aliyun.com/pypi/simple</span><br><span class="line"><span class="section">[install]</span></span><br><span class="line"><span class="attr">trusted-host</span>=mirrors.aliyun.com</span><br></pre></td></tr></table></figure>

<p> 清华源地址:<code>https://pypi.tuna.tsinghua.edu.cn/simple</code></p>
</li>
<li><p><a href="https://www.python.org/ftp/python/">下载Python</a></p>
</li>
<li><p>编辑<code>python[version]._pth</code></p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python311.<span class="built_in">zip</span></span><br><span class="line">.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消此行注释</span></span><br><span class="line"><span class="comment"># Uncomment to run site.main() automatically</span></span><br><span class="line"><span class="keyword">import</span> site</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://pip.pypa.io/en/stable/installation/">下载get-pip</a>,并将<code>get-pip.py</code>放到 Python 目录</p>
</li>
<li><p>执行命令</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">use-proxy</span>.ps1</span><br><span class="line">python get.pip.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加环境变量</p>
 <figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">D:\ProgramFiles\Python</span><br><span class="line">D:\ProgramFiles\Python\Scripts</span><br></pre></td></tr></table></figure>

<p> 说明: 已有多版本管理工具 <code>virtualenvwrapper</code> ,类似Maven Wrapper.<br> 但目前Windows版本只有支持 CMD的<code>virtualenvwrapper-win</code>,PowerShell版本 <code>VirtualEnvWrapper</code> 需要使用 <code>venv</code>模块,要安装Python Install安装版,</p>
</li>
<li><p>虚拟环境</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">python3 <span class="literal">-m</span> venv env                // 新建虚拟环境(安装版才自带)</span><br><span class="line">pip3 install virtualenv            // 安装 virtualenv</span><br><span class="line">virtual env                        // 创建虚拟环境 env</span><br><span class="line">.\env\Scripts\activate.ps1          // 使用新建虚拟环境</span><br><span class="line">pip install xxx                    // 安装缺少的 xxx 包</span><br><span class="line">pip freeze &gt; requirements.txt      // 导出项目安装的所有包</span><br><span class="line">pip install <span class="literal">-r</span> requirements.txt    // 新环境安装项目需要的包</span><br></pre></td></tr></table></figure>

<p> 在 Debian 上需要安装</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install python3.11-venv</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">激活环境</span></span><br><span class="line">source ./activate</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出环境</span></span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring基本流程</title>
    <url>/2024/08/03/Spring%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="什么事-Spring-容器"><a href="#什么事-Spring-容器" class="headerlink" title="什么事 Spring 容器"></a>什么事 Spring 容器</h3><p>管理 Bean 对象，通过依赖注入组织 Bean 之间的关系，从而降低业务对象之间的耦合性。</p>
<h3 id="ApplicationContext-和-BeanFactory-区别"><a href="#ApplicationContext-和-BeanFactory-区别" class="headerlink" title="ApplicationContext 和 BeanFactory 区别"></a>ApplicationContext 和 BeanFactory 区别</h3><p>ApplicationContext 的定义了所有 Bean 加载的全部过程；<br>BeanFactory 只是定义了获取和创建 Bean 的方法</p>
<h3 id="SpringBoot-Bean-加载流程"><a href="#SpringBoot-Bean-加载流程" class="headerlink" title="SpringBoot Bean 加载流程"></a>SpringBoot Bean 加载流程</h3><p><img src="/2024/08/03/Spring%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/SpringBoot%E5%AE%B9%E5%99%A8%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B.svg" alt="测试"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读取配置类</span></span><br><span class="line"><span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line"><span class="type">AnnotatedBeanDefinitionReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotatedBeanDefinitionReader</span>(beanFactory);</span><br><span class="line">reader.register(SpringIocFlowApplication.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析配置类</span></span><br><span class="line">String[] beanDefinitionNames = beanFactory.getBeanDefinitionNames();</span><br><span class="line">System.out.println(String.join(System.lineSeparator(), beanDefinitionNames));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环创建所有的Bean</span></span><br><span class="line"><span class="comment">// beanFactory.preInstantiateSingletons();</span></span><br></pre></td></tr></table></figure>


<p>构造函数发生循环依赖时，可以家<code>@Lazy</code>注解解决。</p>
<p>AOP的实现时基于动态代理</p>
<ul>
<li>JDK （有接口，反射调用目标方法）</li>
<li>Cglib （没有接口，子类调用父类）</li>
</ul>
<p>JDK 1.8以前，JDK较慢；之后，没有多大区别</p>
<p>事务失效</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        jdbcTemplate.execute(<span class="string">&quot;INSERT INTO test2.customers\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;( first_name, last_name)\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;VALUES(&#x27;a&#x27;, &#x27;aa&#x27;);&quot;</span>);</span><br><span class="line"></span><br><span class="line">        test2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.NEVER)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        jdbcTemplate.execute(<span class="string">&quot;INSERT INTO test2.customers\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;( first_name, last_name)\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;VALUES( &#x27;b&#x27;, &#x27;bb&#x27;);&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@Transactional</code> 本质也是AOP，通过动态代理实现。在同一个类里调用<code>test2</code>,没有经过代理类。<br>在项目支持循环依赖的情况下(最好不要),可以注入<code>userService</code>自己，调用<code>userService.test2()</code>来让事务传播生效.</p>
<p>Spring 事务传播机制可使用 <code>@Transactional(propagation=Propagation.REQUIRED)</code> 来定义，Spring 事务传播机制的级别包含以下 7 种：</p>
<table>
<thead>
<tr>
<th>事务传播行为类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Propagation.REQUIRED</td>
<td>默认的事务传播级别，它表示如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</td>
</tr>
<tr>
<td>Propagation.SUPPORTS</td>
<td>如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</td>
</tr>
<tr>
<td>Propagation.MANDATORY</td>
<td>（mandatory：强制性）如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</td>
</tr>
<tr>
<td>Propagation.REQUIRES_NEW</td>
<td>表示创建一个新的事务，如果当前存在事务，则把当前事务挂起。也就是说不管外部方法是否开启事务，Propagation.REQUIRES_NEW 修饰的内部方法会新开启自己的事务，且开启的事务相互独立，互不干扰。</td>
</tr>
<tr>
<td>Propagation.NOT_SUPPORTED</td>
<td>以非事务方式运行，如果当前存在事务，则把当前事务挂起。</td>
</tr>
<tr>
<td>Propagation.NEVER</td>
<td>以非事务方式运行，如果当前存在事务，则抛出异常。</td>
</tr>
<tr>
<td>Propagation.NESTED</td>
<td>如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于 PROPAGATION_REQUIRED。</td>
</tr>
</tbody></table>
<p>注意：<code>SpringBootTest</code> 里面的 <code>@Test</code> 方法添加 <code>@Transactional</code> 执行不符合预期</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows删除系统组件</title>
    <url>/2024/08/09/Windows%E5%88%A0%E9%99%A4%E7%B3%BB%E7%BB%9F%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<p>以管理员运行PowerShell</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-AppxPackage</span> <span class="literal">-allusers</span> | <span class="built_in">Select</span> Name,PackageFullName</span><br><span class="line"><span class="built_in">Get-AppxPackage</span> Microsoft.YourPhone <span class="literal">-AllUsers</span> | <span class="built_in">Remove-AppxPackage</span></span><br><span class="line"> <span class="built_in">get-appxpackage</span> <span class="literal">-allusers</span> *crossdevice* | <span class="built_in">remove-appxpackage</span>   </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows禁用别名curl</title>
    <url>/2024/08/14/Windows%E7%A6%81%E7%94%A8%E5%88%AB%E5%90%8Dcurl/</url>
    <content><![CDATA[<p>编辑用户配置文件<br>添加</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">remove-item</span> alias:<span class="built_in">curl</span></span><br></pre></td></tr></table></figure>

<p>Windows 11默认是5.1版本的PowerShell，不支持 <code>Remove-Alias</code>命令</p>
 <a href="/2024/08/02/%E5%85%B3%E4%BA%8E-Gradle-%E5%9C%A8-Powershell%E7%BB%88%E7%AB%AF-%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/" title="关于 Gradle 在 Powershell终端 乱码的问题">关于 Gradle 在 Powershell终端</a>]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx 403 排查及相关知识链接</title>
    <url>/2024/08/01/nginx-403-%E6%8E%92%E6%9F%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<ol>
<li>权限链路检查<ul>
<li>默认用户<code>www-data</code>是否有修改，设置的用户是否有对应目录的相应权限。 </li>
<li>相关用户（或程序）是否也有对应目录的权限</li>
</ul>
</li>
<li>是否有 <code>index</code>文件</li>
<li><code>SELinux</code>状态检查</li>
</ol>
<p>参考:</p>
<ul>
<li><a href="https://github.com/dunwu/nginx-tutorial">Nginx 极简教程</a></li>
<li><a href="https://www.cnblogs.com/zakun/p/nginx-vhost.html">nginx 单域名多站点配置</a></li>
<li><a href="https://nginx.org/">nginx官网</a></li>
<li><a href="https://www.cnblogs.com/cheyaoyao/p/17836522.html">使用 Hexo 搭建个人博客并部署到云服务器</a></li>
</ul>
<ol>
<li><p>当访问的 <code>uri</code> 最后不带斜杠时，例如 <code>http://localhost/product</code> ，会先查找 <code>product</code> 文件，存在就返回；若存在 <code>product</code> 文件夹，会在末尾加上一个斜杠并产生 301 跳转。</p>
</li>
<li><p>当访问的 <code>uri</code> 最后带斜杠时，例如 <code>http://localhost/product/</code>，查找 <code>product</code> 下的 <code>index</code> 页面，存在就返回；不存在且未开启自动索引目录选项（<code>autoindex on</code>）则报 403 错误。</p>
</li>
</ol>
<p>在第一种情况，访问带目录的 <code>url</code> 时，如果末尾不加斜杠(<code>&quot;/&quot;</code>)，nginx 默认会加上斜杠，发生一次 <code>301</code> 跳转，但这个默认行为在 <code>nginx</code> 前端有 <code>LB</code> 负载均衡器、且 <code>LB</code> 监听的端口与 <code>nginx server</code> 监听的端口不同时会导致访问出错。</p>
<p><a href="https://xie.infoq.cn/article/7db4e36c1123786578486aa57">nginx 在重定向时端口出错的问题</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>修改文件时间</title>
    <url>/2024/08/03/%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><ul>
<li>PowerShell</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> t <span class="string">&#x27;01/01/2021 01:01:01&#x27;</span></span><br><span class="line"><span class="comment"># 时间格式：MM/DD/YYYY hh:mm:ss</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$t</span></span><br><span class="line"><span class="built_in">ls</span> <span class="string">&#x27;sysin.txt&#x27;</span> | <span class="built_in">foreach-object</span> &#123; <span class="variable">$_</span>.LastWriteTime = <span class="variable">$t</span>; <span class="variable">$_</span>.CreationTime = <span class="variable">$t</span>; <span class="variable">$_</span>.LastAccessTime = <span class="variable">$t</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以单独设置不同的时间</span></span><br><span class="line"><span class="built_in">ls</span> <span class="string">&#x27;sysin.txt&#x27;</span> | <span class="built_in">foreach-object</span> &#123; <span class="variable">$_</span>.LastWriteTime = <span class="string">&#x27;01/01/2021 01:01:01&#x27;</span>; <span class="variable">$_</span>.CreationTime = <span class="string">&#x27;02/02/2021 01:01:01&#x27;</span>; <span class="variable">$_</span>.LastAccessTime = <span class="string">&#x27;03/03/2021 01:01:01&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>CMD</li>
</ul>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">#修改当前系统时间</span><br><span class="line"><span class="built_in">date</span> <span class="number">2021</span>/<span class="number">01</span>/<span class="number">01</span></span><br><span class="line"><span class="built_in">time</span> <span class="number">10</span>:<span class="number">59</span>:<span class="number">30</span></span><br><span class="line"></span><br><span class="line">#修改时间，注意是连续两个英文逗号</span><br><span class="line"><span class="built_in">copy</span> 文件名+,,</span><br><span class="line"></span><br><span class="line">#修改时间和访问时间，注意是连续两个英文句号</span><br><span class="line"><span class="built_in">copy</span> 文件名+..</span><br><span class="line"></span><br><span class="line"># 注意修改完毕需要将系统时间修改过来（或者等待 NTP 同步）</span><br></pre></td></tr></table></figure>

<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个测试文件</span></span><br><span class="line">$ <span class="built_in">touch</span> sysin.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 stat 命令查看文件时间信息</span></span><br><span class="line">$ <span class="built_in">stat</span> sysin.txt</span><br><span class="line">  File: sysin.txt</span><br><span class="line">  Size: 0               Blocks: 0          IO Block: 4096   regular empty file</span><br><span class="line">Device: fd01h/64769d    Inode: 405343      Links: 1</span><br><span class="line">Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)</span><br><span class="line">Access: 2021-01-08 13:22:44.792348339 +0800</span><br><span class="line">Modify: 2021-01-08 13:22:44.792348339 +0800</span><br><span class="line">Change: 2021-01-08 13:22:44.792348339 +0800</span><br><span class="line"> Birth: -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改“修改时间”</span></span><br><span class="line"><span class="built_in">touch</span> -mt YYYYMMDDhhmm filename</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改“访问时间和修改时间”</span></span><br><span class="line"><span class="built_in">touch</span> -t YYYYMMDDhhmm filename</span><br></pre></td></tr></table></figure>

<p>说明</p>
<blockquote>
<p>touch 不仅可以创建文件，还可以对其进行时间的一些修改<br>格式：touch 参数 文件名<br>参数：<br>-a: 修改访问时间，或 –time&#x3D;atime 或 –time&#x3D;access 或 –time&#x3D;use<br>-c: 或 –no-creat，如果文件不存在则不创建文件<br>-d: 使用指定的日期时间，可以使用不同的格式<br>-m: 或 –time&#x3D;mtime 或 –time&#x3D;modify，改变修改时间<br>-r: 把指定的文件日期更设成和参考文档或目录日期相同的时间<br>-t: 使用指定的日期时间，格式与 date 指令相同<br><br>YYYY  年-四位数<br>MM    月-两位数<br>DD    日-两位数<br>hh    小时-两位数<br>mm    分钟-两位数</p>
</blockquote>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 Gradle 在 Powershell终端 乱码的问题</title>
    <url>/2024/08/02/%E5%85%B3%E4%BA%8E-Gradle-%E5%9C%A8-Powershell%E7%BB%88%E7%AB%AF-%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="默认情况下，-在PowerShell-执行-gradle-build-如果代码有中文显示，会出现乱码"><a href="#默认情况下，-在PowerShell-执行-gradle-build-如果代码有中文显示，会出现乱码" class="headerlink" title="默认情况下， 在PowerShell 执行 gradle build,如果代码有中文显示，会出现乱码"></a>默认情况下， 在<code>PowerShell</code> 执行 <code>gradle build</code>,如果代码有中文显示，会出现乱码</h3><p>在没有特别设置的情况下，不论是 <code>IntelliJ IDEA</code>还是 <code>gradle init</code>创建项目，其代码文件默认都是<code>UTF-8</code>编码。<br>而 Windows 系统，则是 <code>GBK</code>、<code>GB18030</code>或者更早的<code>GB2312</code>。<br>两者是不一致的。</p>
<p>解决方法：</p>
<ol>
<li><p>修改系统的编码为<code>UTF-8</code>,<code>Windows 10</code>和<code>Windows 11</code>支持。<br>此方法最为彻底，方便！但影响不支持<code>UTF-8</code>的程序;<br>修改路径: <code>设置</code>-&gt;<code>时间和语言</code>-&gt;<code>管理语言设置</code>-&gt;<code>非 Unicode程序的语言</code>-&gt;<code>更改系统区域设置</code>-&gt;勾选<code>Beta版: 使用Unicode UTF-8 提供全球语言支持</code>-&gt;<code>确定</code></p>
</li>
<li><p>调整<code>gradle</code>命令执行的<code>JVM</code>环境</p>
<ol>
<li><p><code>IntelliJ IDEA</code>通过<code>Spring Initializr</code>创建的<code>Gradle</code>管理项目</p>
<ol>
<li>设置<code>Gradle</code>配置文件<code>~/.gradle/gradle.properties</code></li>
</ol>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.gradle.jvmargs=-Dfile.encoding=GBK</span><br></pre></td></tr></table></figure>

<ol>
<li>设置环境变量</li>
</ol>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRADLE_OPTS=-Dfile.encoding=GBK</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过<code>gradle init</code>创建的项目和<code>IntelliJ IDEA</code>通过<code>Java</code>模版创建的项目</p>
<ol>
<li>设置<code>Gradle</code>配置文件<code>~/.gradle/gradle.properties</code></li>
</ol>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.gradle.jvmargs=-Dfile.encoding=GB2312</span><br></pre></td></tr></table></figure>

<ol>
<li>设置环境变量</li>
</ol>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRADLE_OPTS=-Dfile.encoding=GBK</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<p>其他说明:</p>
<ol>
<li><code>IntelliJ IDEA</code> 运行 <code>gradle</code>,读取的是<code>~/.gradle/gradle.properties</code>的设置，环境变量<code>GRADLE_OPTS</code>无效</li>
<li>设置环境变量后，如果使用 <code>IntelliJ IDEA</code> 内建的PowerShell，需要重启 <code>IntelliJ IDEA</code></li>
<li>设置环境变量<code>$PSDefaultParameterValues</code> 和 <code>$OutputEncoding</code>为<code>UTF-8</code>，无效;</li>
<li>运行<code>chcp 65001</code>, 只能改变 <code>JVM</code> 环境的 <code>stdout</code>设置，<code>native.encoding</code> 仍然为 <code>GBK</code>,无效。</li>
<li><code>~/.gradle/gradle.properties</code>中设置<code>org.gradle.jvmargs=-Dfile.encoding=GBK</code>， 影响<code>IntelliJ IDEA</code>和 <code>PowerShell</code>。如果在 RootProject 下设置 <code>gradle.properties</code> 设置，<code>IntelliJ IDEA</code>正常，但 PowerShell不正常</li>
<li><code>GRADLE_OPTS</code> 只影响 <code>PowerShell</code></li>
<li><a href="https://docs.gradle.org/current/userguide/common_caching_problems.html"><code>Gradle</code>不跟踪系统编码和环境变量的变化。</a></li>
</ol>
<p><code>JVM</code>一旦运行，不可修改的属性:</p>
<ol>
<li><code>file.encoding</code></li>
<li><code>user.language</code></li>
<li><code>user.country</code></li>
<li><code>user.variant</code></li>
<li><code>java.io.tmpdir</code></li>
<li><code>javax.net.ssl.keyStore</code></li>
<li><code>javax.net.ssl.keyStorePassword</code></li>
<li><code>javax.net.ssl.keyStoreType</code></li>
<li><code>javax.net.ssl.trustStore</code></li>
<li><code>javax.net.ssl.trustStorePassword</code></li>
<li><code>javax.net.ssl.trustStoreType</code></li>
<li><code>com.sun.management.jmxremote</code></li>
</ol>
<p>在启动控制的属性也不可修改:</p>
<ol>
<li><code>-Xmx</code></li>
<li><code>-Xms</code></li>
<li><code>-Xbootclasspath</code></li>
<li><code>-ea</code></li>
</ol>
<p><span id="ps1">PowerShell配置文件</span></p>
<p>PowerShell 控制台支持以下基本配置文件。 这些文件路径是默认位置。</p>
<ol>
<li>所有用户，所有主机<ul>
<li>Windows - $PSHOME\Profile.ps1。</li>
<li>Linux - &#x2F;opt&#x2F;microsoft&#x2F;powershell&#x2F;7&#x2F;profile.ps1</li>
<li>macOS - &#x2F;usr&#x2F;local&#x2F;microsoft&#x2F;powershell&#x2F;7&#x2F;profile.ps1</li>
</ul>
</li>
<li>所有用户，当前主机<ul>
<li>Windows - $PSHOME\Microsoft.PowerShell_profile.ps1。</li>
<li>Linux - &#x2F;opt&#x2F;microsoft&#x2F;powershell&#x2F;7&#x2F;Microsoft.PowerShell_profile.ps1</li>
<li>macOS - &#x2F;usr&#x2F;local&#x2F;microsoft&#x2F;powershell&#x2F;7&#x2F;Microsoft.PowerShell_profile.ps1</li>
</ul>
</li>
<li>当前用户，所有主机<ul>
<li>Windows - $HOME\Documents\PowerShell\Profile.ps1。</li>
<li>Linux - ~&#x2F;.config&#x2F;powershell&#x2F;profile.ps1</li>
<li>macOS - ~&#x2F;.config&#x2F;powershell&#x2F;profile.ps1</li>
</ul>
</li>
<li>当前用户，当前主机<ul>
<li>Windows - $HOME\Documents\PowerShell\Microsoft.PowerShell_profile.ps1。</li>
<li>Linux - ~&#x2F;.config&#x2F;powershell&#x2F;Microsoft.PowerShell_profile.ps1</li>
<li>macOS - ~&#x2F;.config&#x2F;powershell&#x2F;Microsoft.PowerShell_profile.ps1</li>
</ul>
</li>
</ol>
<p>资料:</p>
<ol>
<li><a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_character_encoding?view=powershell-7.4#%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BC%96%E7%A0%81">更改默认编码</a></li>
<li><a href="https://learn.microsoft.com/zh-tw/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-7.4">PowerShell Profiles</a></li>
<li><a href="https://www.codenong.com/cs106124420/">深入浅出了解Java程序中的乱码</a></li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>PowerShell</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>投机市场的定律之注定绝大多数人亏钱</title>
    <url>/2024/08/03/%E6%8A%95%E6%9C%BA%E5%B8%82%E5%9C%BA%E7%9A%84%E5%AE%9A%E5%BE%8B%E4%B9%8B%E6%B3%A8%E5%AE%9A%E7%BB%9D%E5%A4%A7%E5%A4%9A%E6%95%B0%E4%BA%BA%E4%BA%8F%E9%92%B1/</url>
    <content><![CDATA[<ul>
<li>看对</li>
<li>做对</li>
<li>坚持</li>
</ul>
<h3 id="如何看对"><a href="#如何看对" class="headerlink" title="如何看对"></a>如何看对</h3><ol>
<li>生活常识</li>
<li>技术分析</li>
<li>基本面</li>
<li>资金面</li>
</ol>
<h3 id="轻仓、长线、多品种对冲"><a href="#轻仓、长线、多品种对冲" class="headerlink" title="轻仓、长线、多品种对冲"></a>轻仓、长线、多品种对冲</h3><ol>
<li>轻仓，用现货的思路做期货，2倍以内杠杆</li>
<li>长线，只做从A点到B点的确定性行情</li>
<li>多品种对冲，加大整体杠杆，分散风险</li>
<li>投资的原则：简单、风险收益比</li>
</ol>
<h3 id="做对为什么这么难"><a href="#做对为什么这么难" class="headerlink" title="做对为什么这么难"></a>做对为什么这么难</h3><ul>
<li>不能轻仓，反映的是人性中贪婪的一面</li>
<li>不能止损，反映的是人性中恐惧失败和存在侥幸心理的一面</li>
<li>不能长线操作，反映的是缺乏耐心和贪婪，企图抓住市场所有波动的一面</li>
<li>不能顺势操作，反映的是人性抄底摸高的一厢情愿</li>
<li>好的交易过程应该是一个轻松、愉快的过程</li>
</ul>
]]></content>
      <categories>
        <category>投机</category>
      </categories>
      <tags>
        <tag>投机</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA使用WSL环境的Maven构建</title>
    <url>/2025/02/21/IDEA%E4%BD%BF%E7%94%A8WSL%E7%8E%AF%E5%A2%83%E7%9A%84Maven%E6%9E%84%E5%BB%BA/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 JDK</span></span><br><span class="line">sdk install java  21.0.6-librca</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 maven</span></span><br><span class="line">sdk install maven 3.9.9</span><br><span class="line">cp /mnt/c/User/FRANK/.m2/settings.xml ~/.m2/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装arthas</span></span><br><span class="line">curl -O https://arthas.aliyun.com/arthas-boot.jar</span><br></pre></td></tr></table></figure>

<p>设置 IDEA 的构建工具 Maven 的主路径为 <code>\\wsl.localhost\Debian\home\frank\.sdkman\candidates\maven\3.9.9</code>,不能设置为 Linux 的链接接目录 <code>\\wsl.localhost\Debian\home\frank\.sdkman\candidates\maven\current</code><br><strong>似乎第一次设置后需要重启IDEA才能正常使用</strong></p>
<p>构建</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/home/frank/.sdkman/candidates/maven/3.9.9/bin/mvn -Dmaven.ext.class.path=/mnt/d/Java/IdeaIU/plugins/maven/lib/maven-event-listener.jar -DskipTests=true clean --errors -T 6</span><br><span class="line">[INFO] Error stacktraces are turned on.</span><br></pre></td></tr></table></figure>

<p>运行 Java 程序</p>
<p>在<code>pom.xml</code>添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;!-- &lt;version&gt;3.1.0&lt;/version&gt; --&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;mainClass&gt;org.frank.Main&lt;/mainClass&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure>

<p>执行<code>mvn package</code>后，<code>插件</code> –&gt; <code>exec</code> –&gt; <code>exec:java</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/home/frank/.sdkman/candidates/maven/3.9.9/bin/mvn -Dmaven.ext.class.path=/mnt/d/Java/IdeaIU/plugins/maven/lib/maven-event-listener.jar -DskipTests=true org.codehaus.mojo:exec-maven-plugin:3.5.0:java --errors -T 6</span><br><span class="line">[INFO] Error stacktraces are turned on.</span><br><span class="line">[INFO] Scanning for projects...</span><br></pre></td></tr></table></figure>

<p>IDEA在<code>Main.java</code>运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/home/frank/.sdkman/candidates/java/21.0.6-librca/bin/java -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 -classpath /home/frank/java/design-pattern/dp01-singleton/target/classes org.frank.Main</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>FreeBSD使用</title>
    <url>/2025/02/15/FreeBSD%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>切换国内源</p>
<p><a href="https://book.bsdcn.org/di-3-zhang-bao-guan-li-qi-ji-freebsd-geng-xin-yu-sheng-ji/di-3.2-jie-freebsd-huan-yuan-fang-shi">FreeBSD 换源方式</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">frank@freebsd:~ % su</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">mkdir</span> -p /usr/local/etc/pkg/repos</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vi /usr/local/etc/pkg/repos/ustc.conf</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ustc: &#123;</span><br><span class="line">  url: &quot;http://mirrors.ustc.edu.cn/freebsd-pkg/$&#123;ABI&#125;/quarterly&quot;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FreeBSD: &#123; enabled: no &#125;</span><br></pre></td></tr></table></figure>

<p>NJU 和 163 均同步自 USTC 而非 FreeBSD 直接上游。</p>
<p>安装配置sudo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pkg install  <span class="built_in">sudo</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">visudo</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%wheel ALL=(ALL:ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">frank@freebsd:~ % sudo pkg install zsh curl git</span><br><span class="line">frank@freebsd:~ % zsh</span><br><span class="line">frank@freebsd:~ % export all_proxy=socks5://192.168.1.3:10810</span><br><span class="line">frank@freebsd:~ % sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>

<p>设置中文</p>
<p>不同的shell要改不同的配置文件</p>
<p>默认 tcsh 终端：</p>
<p>只需在 <code>~/.cshrc</code> 文件添加以下几行即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setenv LANG         zh_CN.UTF-8</span><br><span class="line">setenv LC_CTYPE     zh_CN.UTF-8</span><br><span class="line">setenv LC_ALL       zh_CN.UTF-8</span><br></pre></td></tr></table></figure>

<p>bash&#x2F;zsh终端：</p>
<p>为了支持中文显示，可以在 <code>~/.zshrc</code>中添加如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export LANG=zh_CN.UTF-8</span><br><span class="line">export LC_CTYPE=zh_CN.UTF-8</span><br><span class="line">export LC_ALL=zh_CN.UTF-8</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>FreeBSD</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA运行同样代码多次后挂起</title>
    <url>/2025/02/22/IDEA%E8%BF%90%E8%A1%8C%E5%90%8C%E6%A0%B7%E4%BB%A3%E7%A0%81%E5%A4%9A%E6%AC%A1%E5%90%8E%E6%8C%82%E8%B5%B7/</url>
    <content><![CDATA[<p>IDEA 在运行同样的代码多次(11-20次)后，<code>运行</code> 按钮一直挂起, 可以设置 <code>Main Menu</code> –&gt; <code>Help</code> –&gt; <code>Find Action</code>(快捷键<code>Ctrl + Shift + A</code>) –&gt; <code>输入 &quot;Registry...&quot;</code> –&gt; <code>禁用&quot;profiler.widget.in.run.console&quot;</code></p>
<p><a href="https://youtrack.jetbrains.com/issue/IDEA-363384/IDE-hangs-after-running-same-Java-code-several-times-Run-button-shows-a-spinner-forever">IDE hangs after running same Java code several times; Run button shows a spinner forever</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>LMDE安装xrdp</title>
    <url>/2025/02/19/LMDE%E5%AE%89%E8%A3%85xrdp/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install xrdp xorgxrdp -y</span><br><span class="line">echo env -u SESSION_MANAGER -u DBUS_SESSION_BUS_ADDRESS cinnamon-session&gt;~/.xsession</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL使用</title>
    <url>/2025/02/20/WSL%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>BUG太多，慎用</p>
<h2 id="启用WSL"><a href="#启用WSL" class="headerlink" title="启用WSL"></a>启用WSL</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure>

<h2 id="WSL配置"><a href="#WSL配置" class="headerlink" title="WSL配置"></a>WSL配置</h2><p>全局配置 <code>%UserProfile%\.wslconfig</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[wsl2]</span><br><span class="line">memory=16GB </span><br><span class="line">networkingMode=mirrored</span><br><span class="line"></span><br><span class="line">[experimental]</span><br><span class="line">autoMemoryReclaim=gradual </span><br></pre></td></tr></table></figure>

<p>每个实例的 <code>/etc/wsl.conf</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 设置登陆默认用户</span><br><span class="line">[user]</span><br><span class="line">default = DemoUser</span><br></pre></td></tr></table></figure>

<h2 id="wsl-基本命令"><a href="#wsl-基本命令" class="headerlink" title="wsl 基本命令"></a><code>wsl</code> 基本命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出可用的 Linux 发行版</span></span><br><span class="line">wsl --list --online</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更改默认安装的 Linux 发行版</span></span><br><span class="line">wsl --install -d &lt;Distribution Name&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新 WSL</span></span><br><span class="line">wsl --update</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查 WSL 状态</span></span><br><span class="line">wsl --status</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更改发行版的默认用户</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此命令不适用于导入的发行版，因为这些发行版没有可执行启动器。</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以改为使用 /etc/wsl.conf 文件来更改导入的发行版的默认用户。</span></span><br><span class="line">&lt;DistributionName&gt; config --default-user &lt;Username&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭 8秒规则</span></span><br><span class="line">wsl --shutdown</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导出分发版</span></span><br><span class="line">wsl --export &lt;Distribution Name&gt; &lt;FileName&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导入分发版 InstallLocation 只能是文件夹路径</span></span><br><span class="line">wsl --import &lt;Distribution Name&gt; &lt;InstallLocation&gt; &lt;FileName&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注销或卸载 Linux 发行版</span></span><br><span class="line">wsl --unregister &lt;DistributionName&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Debian配置"><a href="#Debian配置" class="headerlink" title="Debian配置"></a>Debian配置</h2><p>在 <code>Debian</code> 中，文件名和目录区仍然分大小写<br><code>Debian</code> 访问 <code>Windows</code> 的主文件夹路径是 <code>/mnt/c/Users/username</code><br><code>Windows</code> 访问 <code>Debian</code> 的主文件夹的路径是<code>\\wsl$\Debian\home\username</code></p>
<p>为了桥接 <code>Windows</code> 和 <code>WSL</code> 上运行的 <code>Linux</code> 分发版本，创建了环境变量 <code>WSLENV</code>。<br>在 <code>Windows</code> 与 <code>WSL</code> 之间共享 <code>WSLENV</code> 环境变量，<code>Windows</code> 和 <code>Linux</code> 工具和命令便可互换使用。<br>但在 <code>Debian</code> 中，<code>Windows</code> 工具必须包含文件扩展名，匹配文件大小写，并且可执行。</p>
<p><code>WSLENV</code> 变量的属性：</p>
<ol>
<li>它是共享的；它同时在 <code>Windows</code> 和 <code>WSL</code> 环境中存在。</li>
<li>它是要在 <code>Windows</code> 与 <code>WSL</code> 之间共享的环境变量列表。</li>
<li>它可以设置环境变量的格式，使其能够在 <code>Windows</code> 和 <code>WSL</code> 中正常运行。</li>
<li>它可以帮助 <code>WSL</code> 和 <code>Win32</code> 之间的流。</li>
</ol>
<p><code>WSLENV</code> 标志</p>
<p><code>WSLENV</code> 中有四个标志可以影响该环境变量的转换方式。可按需组合标志。</p>
<ol>
<li><code>/p</code> - 在 <code>WSL/Linux</code> 样式路径与 <code>Win32</code> 路径之间转换路径。</li>
<li><code>/l</code> - 指示环境变量是路径列表。</li>
<li><code>/u</code> - 指示仅当从 <code>Win32</code> 运行 <code>WSL</code> 时，才应包含此环境变量。</li>
<li><code>/w</code> - 指示仅当从 <code>WSL</code> 运行 <code>Win32</code> 时，才应包含此环境变量。</li>
</ol>
<p><a href="https://learn.microsoft.com/zh-cn/windows/wsl/filesystems">跨 Windows 和 Linux 文件系统工作</a><br><a href="https://devblogs.microsoft.com/commandline/share-environment-vars-between-wsl-and-windows/">Share Environment Vars between WSL and Windows</a></p>
<p>在 <code>.bashrc</code> 或 <code>Windows</code> 用户环境变量中设置 <code>WSLENV</code>。</p>
<ul>
<li><input disabled="" type="checkbox"> 截至 2025-02-21 官方示例测试全部失败，</li>
</ul>
<p>只能在把<code>Windows</code>对应的目录加入到<code>PATH</code>中，才可以在 <code>WSL</code> 中访问 <code>Windows</code> 应用程序</p>
<h3 id="使用国内源"><a href="#使用国内源" class="headerlink" title="使用国内源"></a>使用国内源</h3><p>使用<a href="https://developer.aliyun.com/mirror/debian">阿里源</a> 或者 <a href="https://mirrors.tuna.tsinghua.edu.cn/help/debian/">清华源</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Types:</span> <span class="string">deb</span></span><br><span class="line"><span class="attr">URIs:</span> <span class="string">https://mirrors.aliyun.com/debian/</span></span><br><span class="line"><span class="attr">Suites:</span> <span class="string">bookworm</span></span><br><span class="line"><span class="attr">Components:</span> <span class="string">main</span> <span class="string">contrib</span> <span class="string">non-free</span> <span class="string">non-free-firmware</span></span><br><span class="line"><span class="attr">Architectures:</span> <span class="string">amd64</span></span><br><span class="line"><span class="attr">Signed-By:</span> <span class="string">/usr/share/keyrings/debian-archive-keyring.gpg</span></span><br></pre></td></tr></table></figure>

<h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Debian 默认http源，需要切换到国内源，而国内源使用的是https</span></span><br><span class="line">sudo apt install ca-certificates</span><br><span class="line">sudo apt update</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bash 的命令补全, 但使用 <span class="built_in">sudo</span> 仍然可能命令不补全，见后面设置</span></span><br><span class="line">sudo apt-get install bash-completion</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Git 需要在要使用它的每个文件系统上安装</span></span><br><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure>

<p><code>bash</code>全局配置<code>/etc/bash.bashrc</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 处理 `sudo` 命令不补全，编辑`/etc/bash.bashrc`</span><br><span class="line">if [ -f /etc/bash_completion ]; then</span><br><span class="line">        . /etc/bash_completion</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>创建环境变量配置 <code>~/.myconfig/mypath.sh</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">export PATH=&quot;$PATH:/your/custom/path&quot;</span><br></pre></td></tr></table></figure>

<p>然后执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x ~/.myconfig/mypath.sh</span><br><span class="line">sudo ln -s /home/username/.myconfig/mypath.sh /etc/profile.d/mypath.sh</span><br><span class="line">source /etc/profile.d/mypath.sh</span><br></pre></td></tr></table></figure>

<h3 id="安装-man-手册"><a href="#安装-man-手册" class="headerlink" title="安装 man 手册"></a>安装 <code>man</code> 手册</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">manpages 基础命令手册</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">manpages-dev 更详细的手册（比如 C 函数、系统调用等）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">manpages-posix 各种命令的手册（如命令行工具、库等）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">manpages-x11 图形化程序手册</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git-man 特定软件的手册</span></span><br><span class="line">sudo apt install man-db manpages manpages-dev manpages-posix</span><br></pre></td></tr></table></figure>

<h2 id="压缩WSL镜像"><a href="#压缩WSL镜像" class="headerlink" title="压缩WSL镜像"></a>压缩WSL镜像</h2><p>管理员执行<code>PowerShell</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开工具</span></span><br><span class="line">diskpart</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择镜像</span></span><br><span class="line">select vdisk file=&quot;D:\vm\wsl\ext4.vhdx&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">绑定镜像</span></span><br><span class="line">attach vdisk readonly</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">压缩</span></span><br><span class="line">compact vdisk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载镜像</span></span><br><span class="line">detach vdisk</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<h3 id="IDEA禁用WSL"><a href="#IDEA禁用WSL" class="headerlink" title="IDEA禁用WSL"></a>IDEA禁用WSL</h3><ol>
<li><code>idea.properties</code> 设置 <code>wsl.p9.support.disabled=true</code> 的作用<ul>
<li>仅仅禁用对 WSL 的 P9 文件系统挂载支持（也就是优化的挂载方式）</li>
<li>不会阻止 IntelliJ 自动检测 WSL 并提示你 “WSL detected”、”打开 WSL 目录”、”WSL toolchain” 等功能。</li>
<li>也不会禁用在项目 SDK、终端或运行配置中使用 WSL。</li>
</ul>
</li>
<li><code>idea.vmoptions</code> 添加<code>-Dide.wsl.enable=false</code> <ul>
<li>会彻底关闭 IntelliJ 对 WSL 的感知功能。所有 WSL Toolchain &#x2F; 自动 WSL SDK &#x2F; 终端路径检测 等都将被关闭。</li>
</ul>
</li>
<li>删除 <code>.wslconfig</code> 里的注册项（已卸载 WSL 可以忽略）<ul>
<li>如果你已卸载 WSL，但 IntelliJ 仍提示 WSL，可能是注册表中残留了配置。你可以删除：</li>
<li><code>%USERPROFILE%\.wslconfig</code></li>
<li>或清理以下路径中 IntelliJ 的缓存：<ol>
<li><code>%USERPROFILE%\.cache\JetBrains\</code></li>
<li><code>%USERPROFILE%\AppData\Roaming\JetBrains\</code></li>
</ol>
</li>
</ul>
</li>
</ol>
<h2 id="彻底卸载WSL"><a href="#彻底卸载WSL" class="headerlink" title="彻底卸载WSL"></a>彻底卸载WSL</h2><p>新版<code>设置</code> –&gt; <code>应用</code> –&gt; 删除安装的 Linux 版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">管理员运行</span></span><br><span class="line">Get-AppxPackage MicrosoftCorporationII.WindowsSubsystemForLinux | Remove-AppxPackage</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Debian</tag>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>不会打开未命名模块的错误</title>
    <url>/2025/02/18/%E4%B8%8D%E4%BC%9A%E6%89%93%E5%BC%80%E6%9C%AA%E5%91%BD%E5%90%8D%E6%A8%A1%E5%9D%97%E7%9A%84%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>错误信息:</p>
<p><code>java.lang.reflect.InaccessibleObjectException: Unable to make field static final java.lang.invoke.MethodHandles$Lookup java.lang.invoke.MethodHandles$Lookup.IMPL_LOOKUP accessible: module java.base does not &quot;opens java.lang.invoke&quot; to unnamed module</code></p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>JDK 9及以上版本中引入Java Platform Module System强制执行封装边界，并且只允许明确导出的包进行访问，默认情况下 <code>java.lang</code> 和其他一些核心包都不会向 <code>unnamed</code> 模块开放，所以在JDK 11、JDK 17、JDK 21环境下有这个问题。</p>
<ul>
<li>实现<a href="https://openjdk.org/projects/jigsaw/spec/">Java Platform Module System (JSR 376)</a></li>
<li>实现<a href="https://openjdk.org/jeps/261">JEP 261: Module System</a></li>
<li>解释<a href="https://nipafx.dev/java-modules-reflection-vs-encapsulation/">Reflection vs Encapsulation</a></li>
</ul>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>将没开放的模块强制对外开放。有两个参数选项：</p>
<ol>
<li><code>--add-exports</code> 导出包，意味着其中的所有公共类型和成员都可以在编译和运行时访问。</li>
<li><code>--add-opens</code> 打开包，意味着其中的所有类型和成员（不仅是公共类型）都可以在运行时访问。</li>
</ol>
<p>两者的区别在于 <code>--add-opens</code> 开放的更加彻底，不仅 public 类型、变量及方法可以访问，就连非 <code>public</code> 元素，也可以通过调用 <code>setAccessible(true)</code> 后也可以访问。简单起见，直接使用 <code>--add-opens</code> 即可。相关的参数在异常中会提醒出来。设置环境变量<code>JDK_JAVA_OPTIONS</code>或添加相应的 VM Option 即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--add-opens=java.base/java.lang=ALL-UNNAMED</span><br><span class="line">--add-opens=java.base/java.lang.invoke=ALL-UNNAMED</span><br><span class="line">--add-opens=java.base/java.lang.reflect=ALL-UNNAMED</span><br><span class="line">--add-opens=java.base/java.net=ALL-UNNAMED</span><br><span class="line">--add-opens=java.base/sun.net.www.protocol.http=ALL-UNNAMED</span><br><span class="line">--add-opens=java.base/sun.net.www.protocol.https=ALL-UNNAMED</span><br><span class="line">--add-opens=java.base/sun.util.calendar=ALL-UNNAMED</span><br><span class="line">--add-opens=jdk.zipfs/jdk.nio.zipfs=ALL-UNNAMED</span><br></pre></td></tr></table></figure>

<p><a href="https://liferay.dev/blogs/-/blogs/jdk-17-jdk-21-solving-module-does-not-opens-to-unnamed-module">JDK-17&#x2F;JDK-21: Solving The Error module does not opens to unnamed module…</a><br><a href="https://www.diguage.com/post/upgrade-to-openjdk21/">OpenJDK 21 升级指南</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker运行Nexus</title>
    <url>/2025/03/04/Docker%E8%BF%90%E8%A1%8CNexus/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> /data/nexus</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span>  <span class="built_in">chown</span> -R 200 /data/nexus</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> docker run -d \</span></span><br><span class="line"><span class="language-bash">--name nexus \</span></span><br><span class="line"><span class="language-bash">--restart=always \</span></span><br><span class="line"><span class="language-bash">-p 18081:8081 \</span></span><br><span class="line"><span class="language-bash">-e INSTALL4J_ADD_VM_PARAMS=<span class="string">&quot;-Xms32m -Xmx1024m -XX:MaxDirectMemorySize=1024m&quot;</span> \</span></span><br><span class="line"><span class="language-bash">--env-file ~/.docker/proxy \</span></span><br><span class="line"><span class="language-bash">-v /data/nexus:/nexus-data \</span></span><br><span class="line"><span class="language-bash">sonatype/nexus3</span></span><br></pre></td></tr></table></figure>

<p>注意：代理设置通过<code>~/.docker/config.json</code>设置无效</p>
<p>访问地址 <code>http://ip:8081/nexus</code><br>默认账户&#x2F;密码: admin &#x2F; admin123</p>
<p><a href="https://hub.docker.com/r/sonatype/nexus3">sonatype&#x2F;nexus3</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse系软件设置JavaHome</title>
    <url>/2025/03/28/Eclipse%E7%B3%BB%E8%BD%AF%E4%BB%B6%E8%AE%BE%E7%BD%AEJavaHome/</url>
    <content><![CDATA[<p>一般在可执行文件(如<code>MemoryAnalyzer.exe</code>)对应的配置文件(<code>MemoryAnalyzer.ini</code>)中的<code>-vmargs</code>参数前添加如下内容，且“要换行”</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">-vm</span><br><span class="line">/path/to/java/home/bin</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java获取当前运行的方法名称</title>
    <url>/2025/03/15/Java%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%BF%90%E8%A1%8C%E7%9A%84%E6%96%B9%E6%B3%95%E5%90%8D%E7%A7%B0/</url>
    <content><![CDATA[<p>在 Java 中，获取当前正在运行的方法名称可以通过 Thread 类中的堆栈信息来实现。具体方法如下：</p>
<p>方法一：使用 <code>Thread.currentThread().getStackTrace()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        printCurrentMethodName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printCurrentMethodName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> Thread.currentThread().getStackTrace()[<span class="number">1</span>].getMethodName();</span><br><span class="line">        System.out.println(<span class="string">&quot;当前方法名称: &quot;</span> + methodName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法解释：<br><code>Thread.currentThread()</code>：获取当前线程。<br><code>getStackTrace()</code>：获取当前线程的堆栈跟踪信息。<br><code>getStackTrace()[1]</code>：索引 <code>[0]</code> 是 <code>getStackTrace</code> 方法本身，索引 <code>[1]</code> 是当前方法。<br><code>getMethodName()</code>：获取方法名称。</p>
<p>方法二：使用 <code>new Exception().getStackTrace()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        printCurrentMethodName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printCurrentMethodName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Exception</span>().getStackTrace()[<span class="number">0</span>].getMethodName();</span><br><span class="line">        System.out.println(<span class="string">&quot;当前方法名称: &quot;</span> + methodName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>⚠️ 注意：此方法性能略低，因为创建了一个异常对象。</p>
<p>方法三：使用 <code>StackWalker</code>（Java 9+）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.StackWalker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        printCurrentMethodName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printCurrentMethodName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> StackWalker.getInstance()</span><br><span class="line">                                       .walk(frames -&gt; frames.skip(<span class="number">1</span>).findFirst().get().getMethodName());</span><br><span class="line">        System.out.println(<span class="string">&quot;当前方法名称: &quot;</span> + methodName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优势：<br>更高效，且更加灵活。<br>适用于 Java 9 及以上版本。<br>哪个方法更好？<br>如果追求性能，建议使用 StackWalker（Java 9+）。<br>对于简单的调试或兼容性需求，Thread.currentThread().getStackTrace() 更方便。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java9后获取加载的Jar路径</title>
    <url>/2025/03/29/Java9%E5%90%8E%E8%8E%B7%E5%8F%96%E5%8A%A0%E8%BD%BD%E7%9A%84Jar%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<p>JDK9后，由于模块化，要想获取启动加载的 Jar 包的路径，只有使用代理机制实现，先制作代理 <code>agent.jar</code>，然后在执行目标<code>jar</code>时，加载<code>agent.jar</code>。具体方法如下</p>
<p>添加代理类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.security.CodeSource;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BootstrapAgent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String args, Instrumentation inst)</span> &#123;</span><br><span class="line">        Set&lt;String&gt; paths = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        Class&lt;?&gt;[] classes = inst.getAllLoadedClasses();</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; clazz : classes) &#123;</span><br><span class="line">            <span class="type">ProtectionDomain</span> <span class="variable">domain</span> <span class="operator">=</span> clazz.getProtectionDomain();</span><br><span class="line">            <span class="keyword">if</span> (domain != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">CodeSource</span> <span class="variable">source</span> <span class="operator">=</span> domain.getCodeSource();</span><br><span class="line">                <span class="keyword">if</span> (source != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">URL</span> <span class="variable">location</span> <span class="operator">=</span> source.getLocation();</span><br><span class="line">                    paths.add(location.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bootstrap ClassPath JARs:&quot;</span>);</span><br><span class="line">        paths.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加<code>MANIFEST.MF</code>，<strong>注意最后要空一行</strong></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Premain-Class: BootstrapAgent</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">javac BootstrapAgent.java</span><br><span class="line">jar cmf MANIFEST.MF agent.jar BootstrapAgent.class</span><br><span class="line">java -javaagent:agent.jar -jar YourApplication.jar</span><br></pre></td></tr></table></figure>

<p>如果有包名，要对应; 打包 <code>agent.jar</code>的时候要到包的根目录去运行程序，以使<code>agent.jar</code>里面的目录结构与包名一致，否则容易出现<code>ClassNotFoundException</code></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Log4j2使用</title>
    <url>/2025/03/10/Log4j2%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>[TOC]</p>
<p>转自 <a href="https://www.cnblogs.com/antLaddie/p/15904895.html">一文带你彻底掌握 Log4j2</a><br><a href="https://logging.apache.org/log4j/2.12.x/manual/architecture.html">官方 Architecture</a></p>
<h2 id="配置文件类型及加载顺序"><a href="#配置文件类型及加载顺序" class="headerlink" title="配置文件类型及加载顺序"></a>配置文件类型及加载顺序</h2><h3 id="Log4j2-配置文件的四种方式"><a href="#Log4j2-配置文件的四种方式" class="headerlink" title="Log4j2 配置文件的四种方式"></a><code>Log4j2</code> 配置文件的四种方式</h3><ol>
<li>通过 XML、JSON、YAML 或者 properties 格式的配置文件；</li>
<li>通过创建一个 ConfigurationFactory 和 Configuration 接口的实现</li>
<li>调用 Configuration 接口暴露的方法来在默认配置的基础上添加其他组件</li>
<li>通过在内部 Logger 类上调用方法</li>
</ol>
<p>Log4j2 包含 4 种 ConfigurationFactory 的实现，分别适用于 JSON、YAML、properties 和 XML 配置文件。</p>
<h3 id="在-Log4j2-启动时可以按照以下顺序自动加载配置文件"><a href="#在-Log4j2-启动时可以按照以下顺序自动加载配置文件" class="headerlink" title="在 Log4j2 启动时可以按照以下顺序自动加载配置文件"></a>在 <code>Log4j2</code> 启动时可以按照以下顺序自动加载配置文件</h3><ol>
<li>查找 <code>log4j.configurationFile</code> 系统属性所指定的配置文件名，若该系统属性值存在，就尝试使用相应文件扩展名的 <code>ConfigurationFactory</code><br>来加载指定的配置文件。通过在代码中调用 <code>System.setProperties(&quot;log4j.configurationFile&quot;,&quot;FILE_PATH&quot;)</code> 或者<br>将 <code>-Dlog4jconfigurationFile=file://C:/configuration.xml</code>参数传递给 JVM</li>
<li>若没找到，则<code>properties ConfigurationFactory</code>就在<code>classpath</code>中寻找 <code>log4j2-test.properties</code> 配置文件</li>
<li>若没找到，则<code>YAML ConfigurationFactory</code>就在 <code>classpath</code> 中寻找<code>log4j2-test.yaml</code> 或 <code>log4j2-test.yml</code>配置文件</li>
<li>若没找到，则<code>JSON ConfigurationFactory</code>就在 <code>classpath</code> 中寻找 <code>log4j2-test.json</code> 或 <code>log4j2-test.jsn</code> 配置文件</li>
<li>若没找到，则<code>XML ConfigurationFactory</code> 就在 <code>classpath</code> 中寻找<code>log4j2-test.xml</code>配置文件</li>
<li><strong>若没找到测试配置文件</strong>，则<code>properties ConfigurationFactory</code>就在 <code>classpath</code> 中寻找<code>log4j2.properties</code>配置文件</li>
<li>若没找到，则<code>YAML ConfigurationFactory</code>就在 <code>classpath</code> 中寻找 <code>log4j2.yaml</code> 或 <code>log4j2.yml</code> 配置文件</li>
<li>若没找到，则<code>JSON ConfigurationFactory</code>就在 <code>classpath</code> 中寻找 <code>log4j2.json</code> 或 <code>log4j2.jsn</code> 配置文件</li>
<li>若没找到，则<code>XML ConfigurationFactory</code> 就在 <code>classpath</code> 中寻找 <code>log4j2.xml</code> 配置文件 (生产环境常用)</li>
<li>如果上面的配置文件都没有找到，就使用默认的 <code>DefaultConfiguration</code> 配置</li>
</ol>
<h2 id="Configuration元素配置"><a href="#Configuration元素配置" class="headerlink" title="Configuration元素配置"></a><code>Configuration</code>元素配置</h2><p>Configuration 元素可以使用以下属性</p>
<ul>
<li><code>advertiser</code>： 可选的 <code>Advertiser</code> 插件名，用来通知个别 <code>FileAppender</code>或 <code>SocketAppender</code> 的配置。目前唯一可用 <code>Advertiser</code> 名为<code>multicastdns</code></li>
<li><code>dest</code>：<code>err</code> （将输出到 <code>stderr</code> 上）或一个文件路径或一个<code>URL</code>；</li>
<li><code>monitorInterval</code>： 检查配置文件是否有更新的间隔秒数；</li>
<li><code>name</code>： 配置的名称；</li>
<li><code>packages</code>： 逗号分隔的用于搜索插件的包名列表。插件只会被每个类加载器加载一次，所以仅重新配置该项不会生效；</li>
<li><code>schema</code>： 为类加载器定位<code>XML Schema</code>位置以验证配置。仅当<code>strict</code>属性设置为<code>true</code>时该属性才有效，如果不设置该属性，则不会验证<code>Schema</code></li>
<li><code>shutdownHook</code>： 设置当 <code>JVM</code> 关闭时 <code>log4j</code> 是否也自动关闭。默认是启用的，也可以设置该属性为 <code>disable</code> 来禁用该关闭钩子；</li>
<li><code>shutdownTimeout</code>： 设置当 <code>JVM</code> 关闭后 <code>Appender</code> 和后台任务超时多少毫秒才关闭。默认为<code>0</code>，表示每个<code>Appender</code>使用其默认的超时，不等待后台任务。<br>这仅是个提示，而不能保证关闭进程不会花费更长的时间。将该值设置过小可能增加日志事件在还未输出到最终位置之前就丢失的风险。<br>如果 <code>shutdownHook</code> 属性未设置，那么将不会使用该属性；</li>
<li><code>status</code>： 应该打印到控制台的内部 <code>Log4j</code> 日志事件的级别，可设置的值有 <code>trace</code>、<code>debug</code>、<code>info</code>、<code>warn</code>、<code>error</code> 和 <code>fatal</code>，<code>Log4j</code> 将会打印出内部初始化等事件的详细信息（在发现配置文件之后）。设置该属性为 <code>trace</code> 是查找 <code>Log4j</code> 故障的第一手工具。也可以通过设置 <code>log4j2.debug</code> 系统属性来输出 <code>Log4j</code> 内部日志，包括配置文件加载前的内部日志（从 <code>log4j 2.9</code> 开始）</li>
<li><code>strict</code>： 使用严格的 <code>XML</code> 格式， <code>JSON</code> 格式的配置文件不支持该属性</li>
<li><code>verbose</code>： 加载插件时是否显示诊断信息</li>
</ul>
<h2 id="Appenders配置"><a href="#Appenders配置" class="headerlink" title="Appenders配置"></a><code>Appenders</code>配置</h2><p><code>Log4j</code>使用<code>Appender</code>将日志事件数据写到各种目标位置（目前可以为控制台、文件、多种数据库 <code>API</code>、远程套接字服务器、<code>Apache Flume</code>、<code>JMS</code>、远程 <code>UNIX Syslog daemon</code>）。</p>
<p>在大多数情况下，<code>Appender</code>将格式化事件的责任委托给<code>Layout</code>。一些<code>Appender</code>包装其它<code>Appender</code>，以便它们可以修改<code>LogEvent</code>、处理<code>Appender</code>中的失败、根据高级筛选条件将事件路由到下级<code>Appender</code>，或者提供不直接格式化事件的类似功能。</p>
<p><code>Appender</code>可以通过特定的<code>Appender</code>插件名或<code>appender</code>元素（带有指定<code>Appender</code>插件名的<code>type</code>属性）来配置。另外每个<code>Appender</code>都必须要有一个<code>name</code>属性，用来指定一个去别区其它<code>Appender</code>的唯一标识，该标识的值在<code>Logger</code>中通过<code>AppenderRef</code>来引用，从而将该<code>Appender</code>配置到该 <code>Logger</code> 中。</p>
<p>每个<code>Appender</code>都必须实现<code>Appender</code>接口，多数<code>Appender</code>都扩展自<code>AbstractAppender</code>，该抽象类添加了<code>Lifecycle</code>和<code>Filterable</code>支持。<code>Lifecycle</code>可以对日志组件在配置加载后进行初始化和在关闭时进行清理等操作。<code>Filterable</code>可以让日志组件绑定用于处理日志事件的过滤器。代表不同目标位置的各种<code>Appender</code>也具有其功能所需的其他属性和子元素。这里选择常用的<code>Appender</code>加以介绍。</p>
<h3 id="1-ConsoleAppender控制台输出"><a href="#1-ConsoleAppender控制台输出" class="headerlink" title="1. ConsoleAppender控制台输出"></a>1. <code>ConsoleAppender</code>控制台输出</h3><p><code>ConsoleAppender</code>会将输出写入<code>System.out</code>（默认目标位置）或 <code>System.err</code> 中。必须提供一个 <code>Layout</code> 来格式化<code>LogEvent</code></p>
<p>参数名（类型）：介绍说明</p>
<ul>
<li><code>filter（Filter）</code>： 指定一个过滤器来决定是否将日志事件传递给<code>Appender</code>处理。可以指定为一个<code>CompositeFilter</code>来使用多个过滤器。</li>
<li><code>layout（Layout）</code>： 指定格式化<code>LogEvent</code>的<code>Layout</code>。如果没有指定<code>Layout</code>，则默认使用 <code>%m%n</code> 格式。</li>
<li><code>follow（boolean）</code>： 在配置好之后，是否可以通过 <code>System.setOut</code> 或 <code>System.setErr</code>来重新指定输出位置为 <code>System.out</code>或 <code>System.err</code>。 不能在 <code>Windows</code> 下用于 <code>Jansi</code>，也不能和<code>direct</code>属性一起使用。</li>
<li><code>direct（boolean）</code>： 绕开<code>java.lang.System.out/.err</code>直接写入<code>java.io.FileDescriptor</code>。当输出重定向到文件或其他目标时可以节约 10 倍的性能消耗。不能在<code>Windows</code>下用于 <code>Jansi</code>，也性不能和 <code>follow</code> 属性一起使用。在多线程应用中，输出不会遵循 <code>java.lang.System.setOut()/.setErr()</code> ，而是可能会和其他输出纠缠在一起输出到 <code>java.lang.System.out/.err</code>。该属性是 <code>2.6.2</code> 版本新增的，目前仅在<code>Linux</code>和<code>Windows</code>下的<code>Oracle JVM</code>环境中测试过。</li>
<li><code>name（String）</code>： 必选的 <code>Appender</code> 的名称，表示区别于其他 <code>Appender</code> 的唯一标识。</li>
<li><code>ignoreExceptions（boolean）</code>： 默认为 <code>true</code>，表示当输出事件时出现的异常将会被内部记录而忽略。 当设置为 <code>false</code> 时，则会将异常传播给调用者。 当将该 <code>Appender</code> 包装成 <code>FailoverAppender</code> 时，必须设置为 <code>false</code>。</li>
<li><code>target（String）</code>： <code>SYSTEM_OUT</code> 或 <code>SYSTEM_ERR</code>。默认为 <code>SYSTEM_OUT</code>。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;error&quot;</span> <span class="attr">monitorInterval</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">&quot;myPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;ConsoleAppend&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_ERR&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;myPattern&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;WARN&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;ConsoleAppend&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>日志输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">16:42:41.556 [main] FATAL cn.xw.Log4j2Demo -  严重错误，一般造成系统崩溃并终止运行</span><br><span class="line">16:42:41.559 [main] ERROR cn.xw.Log4j2Demo -  错误信息，不会影响系统运行</span><br><span class="line">16:42:41.559 [main] WARN  cn.xw.Log4j2Demo -  警告信息，可能会发生问题</span><br></pre></td></tr></table></figure>

<h3 id="2-RollingFileAppender-文件输出"><a href="#2-RollingFileAppender-文件输出" class="headerlink" title="2. RollingFileAppender 文件输出"></a>2. <code>RollingFileAppender</code> 文件输出</h3><p><code>RollingFileAppender</code> 会将输出到 <code>fileName</code> 参数指定的文件中，且需要指定 <code>TriggeringPolicy</code> 和 <code>RolloverStrategy</code>。其中 <code>TriggeringPolicy</code> 决定是否生成新的日志文件，<code>RolloverStrategy</code> 决定如何生成新的日志文件。如果没有配置 <code>RolloverStrategy</code>，则会使用 <code>DefaultRolloverStrategy</code>。从<code>Log4j 2.5</code>开始，可以在 <code>DefaultRolloverStrategy</code> 中配置一个自定义的删除动作。从 <code>Log4j2.8</code>开始，如果没有指定文件名，则会使用 <code>DirectWriteRolloverStrategy</code> 来代替 <code>DefaultRolloverStrategy</code>。从 <code>Log4j 2.9</code> 开始，可以在 <code>DefaultRolloverStrategy</code> 中配置一个自定义的 <code>POSIX</code> 文件属性查看动作，如果没有定义该动作，则将会使用从 <code>RollingFileAppender</code> 继承的<code>POSIX</code>。**_<code>RollingFileAppender</code> 不支持文件锁_**。</p>
<p>参数名（类型）：介绍说明</p>
<ul>
<li><code>append（boolean）</code>： 当为 <code>true</code>（默认）时，日志记录将会添加到文件末尾。设置为 <code>false</code> 时，日志记录写入文件之前会清空文件。</li>
<li><code>bufferedIO（boolean）</code>： 当为 <code>true</code>（默认）时，日志记录将会写入一个缓冲区，当缓冲区满或设置了 <code>immediateFlush</code>，日志记录才会写入磁盘中。 该属性不能使用文件锁。缓冲 <code>I/O</code> 能够显著提高性能，即使启用了 <code>immediateFlush</code>。</li>
<li><code>immediateFlush（boolean）</code>： 当为 <code>true</code>（默认）时，每次写入都会跟随一次 <code>flush</code> 。这将保证数据写入磁盘，但会影响性能。仅当使用异步 <code>Logger</code> 的 <code>Appender</code> 时设置每次写入都进行 <code>flush</code> 才有用。异步的 <code>Logger</code> 和 <code>Appender</code> 会在一批次的日志事件末尾自动 <code>flush</code> ，即使该属性设置为 <code>false</code> ，这种方式也可以保证数据写入磁盘，但是更有效率。</li>
<li><code>bufferSize（int）</code>： 当 <code>bufferedIO</code> 为 <code>true</code> 时，该属性用来设置缓冲区的大小，默认为 <code>8192</code> 字节。</li>
<li><code>createOnDemand（boolean）</code>： <code>Appender</code> 是按需（<code>on-demand</code>）创建文件的。仅当日志事件通过所有过滤器并到达 <code>Appender</code> 时，该 <code>Appender</code> 才会创建文件。默认为 <code>false</code>。</li>
<li><code>filter（Filter）</code>： 指定一个过滤器来决定是否将日志事件传递给 <code>Appender</code> 处理。可以指定为一个 <code>CompositeFilter</code> 来使用多个过滤器。</li>
<li><code>fileName（String）</code>： 设置写入日志记录的文件名。如果该文件或其父目录不存在，则会自动创建。</li>
<li><code>filePattern（String）</code>： 归档日志文件的文件名模式（<code>pattern</code>）。该模式依赖于所用的 <code>RolloverPolicy</code> 。<code>DefaultRolloverPolicy</code> 可以接受兼容<br><code>SimpleDateFormat</code> 的日期&#x2F;时间或表示一个整数的计数器的 <code>%i</code> 。该模式也支持运行时插入值（<code>interpolation</code>），故任何 <code>Lookup</code>（比如 <code>DateLookup</code>）都可以包含该模式。</li>
<li><code>layout（Layout）</code>： 指定格式化 <code>LogEvent</code> 的 <code>Layout</code> 。如果没有指定 <code>Layout</code> ，则默认使用 <code>%m%n</code> 格式。</li>
<li><code>name（String）</code>： 必选的 <code>Appender</code> 的名称，表示区别于其他 <code>Appender</code> 的唯一标识。</li>
<li><code>policy（TriggeringPolicy）</code>： 设置确定是否创建文件的规则（<code>policy</code>）。</li>
<li><code>strategy（RolloverStrategy）</code>： 设置确定归档文件的文件名和位置的策略（<code>strategy</code>）。</li>
<li><code>ignoreExceptions（boolean）</code>： 默认为 <code>true</code> ，表示当输出事件时出现的异常将会被内部记录而忽略。 当设置为 <code>false</code> 时，则会将异常传播给调用者。当将该 <code>Appender</code> 包装成 <code>FailoverAppender</code> 时，必须设置为 <code>false</code>。</li>
<li><code>filePermissions（String）</code>： 设置每当创建文件时所用的 <code>POSIX</code> 格式的文件属性权限。底层文件系统应该支持 <code>POSIX</code> 格式的文件属性视图。 比如： <code>rw-------</code> 或 <code>rw-rw-rw-</code> 等。</li>
<li><code>fileOwner（String）</code>： 指定每次创建文件的属主。由于权限原因，可能不允许更改文件属主，这时会抛出 <code>IOException</code> 。仅当有效的目标用户 <code>ID</code> 和文件的用户 <code>ID</code> 相同，或目标用户 <code>ID</code> 具有修改文件属主的权限（如果 <code>_POSIX_CHOWN_RESTRICTED</code> 在日志文件路径下有效）时才会处理。底层文件系统应该支持 <code>owner</code> 文件属性视图。</li>
<li><code>fileGroup（String）</code>： 指定每次创建文件的属组。底层文件系统应该支持 <code>POSIX</code> 格式的文件属性视图。</li>
</ul>
<h4 id="组合触发规则"><a href="#组合触发规则" class="headerlink" title="组合触发规则"></a>组合触发规则</h4><p><code>CompositeTriggeringPolicy</code> 组合了多个触发规则（<code>policy</code>），如果配置的任意规则返回 <code>true</code> 时，<br>则 <code>CompositeTriggeringPolicy</code> 也返回 <code>true</code>，也发生了触发。<code>CompositeTriggeringPolicy</code> 通过将其规则包装进 <code>Policies</code> 元素即可配置。</p>
<p>下面 <code>XML</code> 片段定义了一个日志滚动规则：当 <code>JVM</code> 启动时、日志文件大小达到 20MB 且当前日期不再匹配日志开始日期时就滚动日志</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 打印到日志文件上并拆分归档 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;rollingFile&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;dir_url&#125;/rollFileLog.log&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;dir_url&#125;/$$&#123;date:yyyy_MM_dd&#125;/appLog_%d&#123;yyyy_MM_dd_HH_mm_ss&#125;_%i.log.gz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %m%n&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">OnStartupTriggeringPolicy</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;2MB&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当前日志文件夹下的归档的文件个数，此时为2个文件，超出则覆盖之前文件，默认7--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">&quot;4&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>启动触发规则： <code>OnStartupTriggeringPolicy</code> 在日志文件比当前 <code>JVM</code> 启动时间较早时进行日志滚动，同时遵循下面的 <code>minSize</code>属性规则。 <code>OnStartupTriggeringPolicy</code> 属性如下表所示：<br><code>minSize（long）</code>： 日志文件滚动的最小字节。大小为 <code>0</code> 表示不管文件大小为多少字节都滚动。默认值 <code>1</code> 将阻止对空文件进行滚动。</li>
<li>基于文件大小的触发规则： <code>SizeBasedTriggeringPolicy</code> 在文件字节达到指定的大小时进行日志滚动。文件大小可以使用<code>KB</code>、<code>MB</code>、<code>GB</code>等后缀</li>
<li>基于时间的触发规则：<code>TimeBasedTriggeringPolicy</code> 只要<strong>日期&#x2F;时间</strong>模式（<code>pattern</code>）不再应用于当前文件时就进行日志滚动。这种规则通过 <code>interval</code> 和 <code>modulate</code> 属性来配置。<br><code>TimeBasedTriggeringPolicy</code> 属性如下表所示：<ul>
<li><code>interval（integer）</code>：基于日期&#x2F;时间模式中的最小的时间单位多久滚动一次。例如，<code>filePattern</code> 参数中使用使用小时作为最小的时间单位时（比如 <code>/appData/logs/myApp/$$&#123;date:yyyy-MM-dd&#125;/myApp-%d&#123;yyyy-MM-dd HH&#125;-%i.log</code>），该参数值为 <code>4</code>，则表示每 <code>4</code> 小时滚动一次。默认值为 <code>1</code> 。</li>
<li><code>modulate（boolean）</code>：是否调整 <code>interval</code> 属性值，以便下次滚动发生在 <code>interval</code> 边界处。例如，如果时间单位为小时，当前时间为早上 <code>3</code> 点，间隔为 <code>4</code> 小时，则第一次滚动将发生在早上 <code>4</code> 点时（而不是早上 <code>7</code>点），后续滚动将发生在 早上 <code>8</code> 点、中午 <code>12</code> 点、下午 <code>4</code> 点等时刻。</li>
<li><code>maxRandomDelay（integer）</code>：滚动操作随机延迟的最长秒数。默认 <code>0</code> 表示无延迟。该设置在有多个应用同时滚动日志的服务器上很有用，可以扩宽滚动日志的的负载时间范围，避免某一个时刻由于滚动日志造成高 <code>I/O</code> 压力。</li>
</ul>
</li>
<li><code>Cron</code> 触发规则：<code>CronTriggeringPolicy</code> 基于 <code>cron</code> 表达式来滚动日志。<code>CronTriggeringPolicy</code> 属性如下表所示：<ul>
<li><code>schedule（String）</code>：和 <code>Quartz</code> 调度器一样的 <code>cron</code> 表达式。参考 <code>CronExpression</code> 来查看关于该表达式的详细描述。</li>
<li><code>evaluateOnStartup（boolean）</code>：在启动时，该 <code>cron</code> 表达式将基于文件的上次修改时间戳来求值。</li>
</ul>
</li>
</ul>
<h5 id="滚动策略"><a href="#滚动策略" class="headerlink" title="滚动策略"></a>滚动策略</h5><h5 id="默认滚动规则"><a href="#默认滚动规则" class="headerlink" title="默认滚动规则"></a>默认滚动规则</h5><p><code>DefaultRolloverStrategy</code> 使用一种基于时间和固定窗口（<code>fixed window</code>，窗口在这里的意思大致是对数量的限制，参考 <code>TCP</code> 中的 <code>Window Scale</code> 概念）的组合策略。如果配置了时间模式，那么将会使用时间间隔来计算用于 <code>filePattern</code> 参数值的时间。如果文件模式还包含了一个整数替换符，那么在时间模式的匹配结果改变之前，该整数值将会在每次滚动时递增。以 <code>.gz</code>、<code>.zip</code>、<code>.bz2</code>、<code>deflate</code>、<code>pack200</code> 或 <code>xz</code>，则最终归档文件将以后缀对应的格式进行压缩。<code>bzip2</code>、<code>Deflate</code>、<code>Pack200</code> 和 <code>XZ</code> 需要 <code>Apache Commons compress</code>。另外，<code>XZ</code> 需要 <code>XZ for Java</code>。</p>
<p><code>DefaultRolloverStrategy</code> 参数如下表所示：</p>
<ul>
<li><code>fileIndex（String）</code>：如果设置为 <code>max</code>（默认），则具有更大索引的文件比具有更小索引的文件内容更新。如果设置为 <code>min</code>，文件将重命名且计数器将遵循前面介绍的 <code>Fixed Window</code> 策略。</li>
<li><code>min（Integer）</code>：计数器的最小值，默认为 <code>1</code>。</li>
<li><code>max（Integer）</code>：计数器的最大值。一旦计数器达到了最大值，最早的归档将会在每次滚动时被删除。默认值为 <code>7</code>。</li>
<li><code>compressionLevel（Integer）</code>：设置压缩级别，<code>0 - 9</code>。<code>0 = none</code>，<code>1 = best speed</code>，<code>9 = best compression</code>。仅应用于 <code>ZIP</code> 文件。</li>
<li><code>tempCompressedFilePattern（String）</code>：压缩时归档文件的文件名模式。</li>
</ul>
<p>默认的滚动策略支持三种递增计数器。为了演示 <code>Fixed Window</code> 策略是如何工作的，这里假定 <code>min</code> 属设置为 <code>1</code>，<code>max</code> 属性设置为 <code>3</code>，文件名为 <code>foo.log</code>，文件名模式为 <code>foo-%i.log</code><br><code>0~4</code>：滚动数<br><code>foo.log</code>：当前目标文件<br><code>foo-1.log</code>, <code>foo-2.log</code>, <code>foo-3.log</code> 归档文件</p>
<p>0 foo.log -<br>所有日志都写入初始文件。<br>1 foo.log foo-1.log<br>第一次滚动时，foo.log 文件重命名为 foo-1.log，创建一个新的 foo.log 文件来开始写入日志<br>2 foo.log foo-1.log, foo-2.log<br>第二次滚动时，foo-1.log 文件重命名为 foo-2.log，foo.log 文件重命名为 foo-1.log，创建一个新的 foo.log 文件来开始写入日志<br>3 foo.log foo-1.log, foo-2.log, foo-3.log<br>第三次滚动时，foo-2.log 文件重命名为 foo-3.log，foo-1.log 文件重命名为 foo-2.log，创建一个新的 foo.log 文件来开始写入日志<br>4 foo.log foo-1.log, foo-2.log, foo-3.log<br>在第四次以及后续的滚动时，foo-3.log 会被删除，foo-2.log 重命名为 foo-3.log，foo-1.log 重命名为 foo-2.log，<br>创建一个新的 foo.log 文件来开始写入日志。<br>作为对比，<code>fileIndex</code> 属性设置为 <code>max</code>，而所有其他设置和上面都一样。<br>0 foo.log -<br>所有日志都写入初始文件。<br>1 foo.log foo-1.log<br>第一次滚动时，foo.log 文件重命名为 foo-1.log，创建一个新的 foo.log 文件来开始写入日志。<br>2 foo.log foo-1.log, foo-2.log<br>第二次滚动时，foo.log 文件重命名为 foo-2.log，创建一个新的 foo.log 文件来开始写入日志。<br>3 foo.log foo-1.log, foo-2.log, foo-3.log<br>第二次滚动时，foo.log 文件重命名为 foo-3.log，创建一个新的 foo.log 文件来开始写入日志。<br>4 foo.log foo-1.log, foo-2.log, foo-3.log<br>在第四次以及后续的滚动时，foo-1.log 会被删除，foo-2.log 重命名为 foo-1.log，foo-3.log<br>重命名为 foo-2.log，创建一个新的 foo.log 文件来开始写入日志。可以将 max 属性设置为一个很大的值来避免重名批量文件。<br>上面两种方式都有可能导致批量重命名日志文件，但自 2.8 版本开始，如果 fileIndex 属性设置为 nomax，则 min 和 max 属性值都将会被忽略，文件编号将每次递增 1，每次滚动都会递增到更大的值，且有最大文件编号的限制。</p>
<h5 id="直接滚动规则"><a href="#直接滚动规则" class="headerlink" title="直接滚动规则"></a>直接滚动规则</h5><p><code>DirectWriteRolloverStrategy</code> 将日志事件直接写入 <code>filePattern</code> 参数值表示的文件。该策略不进行文件重命名。如果基于大小的触发规则要在特定时间段内写入多个文件，这些文件编号将从1开始持续递增，直到出现基于时间的滚动。</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>使用SSH登陆git服务器</title>
    <url>/2025/03/16/%E4%BD%BF%E7%94%A8SSH%E7%99%BB%E9%99%86git%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p>生成 ssh_key</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa <span class="operator">-f</span> <span class="string">&quot;.\.ssh\github&quot;</span> <span class="literal">-C</span> <span class="string">&quot;email&quot;</span></span><br><span class="line"><span class="comment"># Visual Studio 登录</span></span><br><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-m</span> pem <span class="literal">-t</span> ecdsa <span class="operator">-f</span> &lt;key<span class="literal">-name</span>&gt;</span><br></pre></td></tr></table></figure>

<p>Visual Studio 使用密钥远程登录，加密方法有<a href="https://learn.microsoft.com/zh-cn/cpp/linux/connect-to-your-remote-linux-computer?view=msvc-170#supported-ssh-algorithms">限制</a></p>
<p>编辑<code>~\.ssh\config</code>,配置ssh</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">Host</span> <span class="string">github.com</span></span><br><span class="line">  <span class="attr">HostName</span> <span class="string">github.com</span></span><br><span class="line">  <span class="attr">User</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">IdentityFile</span> <span class="string">~/.ssh/github</span></span><br></pre></td></tr></table></figure>

<p>将生成的 <code>github.pub</code> 内容添加到 github 网站的 ssh 设置里。如果是登录Debian 等 Linux 系统，需要将 <code>github.pub</code> 内容添加到 <code>~/.ssh/authorized_keys</code> 文件中。</p>
<p>要注意<code>Host</code>和<code>HostName</code>设置：</p>
<ul>
<li><p><code>HostName</code>只能是网站的域名,如果<code>github.com</code></p>
</li>
<li><p><code>Host</code>一般也设置为网站域名，如<code>github.com</code>,这样在git操作的时候，能与官方给的 <code>ssh</code>地址(如<code>git@github.com:username/repo.git</code>)保持一致，方便。<br>也可以自定义设置，如设置为<code>github</code>或者<code>1.github.com</code>,但这个时候，官方给的<code>ssh</code>地址</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">git@github.com</span>:<span class="string">username/repo.git</span></span><br></pre></td></tr></table></figure>

<p>需要调整为</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">git@github</span>:<span class="string">username/repo.git</span></span><br></pre></td></tr></table></figure>

<p>使用<code>ssh -T</code>验证的时候，也要使用<code>Host</code>的设置<code>github</code>进行验证。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ssh <span class="literal">-T</span> git@github</span><br></pre></td></tr></table></figure></li>
</ul>
<p>测试</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ssh <span class="literal">-T</span> git@github.com</span><br></pre></td></tr></table></figure>

<p>对于重装系统后，可能出现的错误</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> F:\&gt; ssh <span class="literal">-T</span> git@gitee.com</span><br><span class="line">Bad permissions. <span class="keyword">Try</span> removing permissions <span class="keyword">for</span> user: BUILTIN\\Users (S<span class="literal">-1-5-32-545</span>) on file C:/Users/xxxx/.ssh/gitee.</span><br><span class="line"><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span></span><br><span class="line"><span class="selector-tag">@</span>         WARNING: UNPROTECTED PRIVATE KEY FILE!          <span class="selector-tag">@</span></span><br><span class="line"><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span><span class="selector-tag">@</span></span><br><span class="line">Permissions <span class="keyword">for</span> <span class="string">&#x27;C:\\Users\\xxxx/.ssh/gitee&#x27;</span> are too open.</span><br><span class="line">It is required that your private key files are NOT accessible by others.</span><br><span class="line">This private key will be ignored.</span><br><span class="line">Load key <span class="string">&quot;C:\\Users\\xxxx/.ssh/gitee&quot;</span>: bad permissions</span><br><span class="line">git@gitee.com: Permission denied (publickey).</span><br></pre></td></tr></table></figure>

<p>执行以下命令修复</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\Users\someone\.ssh</span><br><span class="line"><span class="comment"># 重置权限</span></span><br><span class="line">icacls gitee /reset</span><br><span class="line"><span class="comment"># 移除继承的权限</span></span><br><span class="line">icacls gitee /inheritance:<span class="built_in">r</span></span><br><span class="line"><span class="comment"># 只授予当前用户读取权限（Read）</span></span><br><span class="line">icacls gitee /grant:<span class="built_in">r</span> <span class="string">&quot;%USERNAME%:R&quot;</span></span><br><span class="line"><span class="comment"># 验证当前权限（可选）</span></span><br><span class="line">icacls gitee</span><br></pre></td></tr></table></figure>

<p>补充说明</p>
<ol>
<li>Windows 上 BUILTIN\Users 是一个用户组，默认包含所有本地用户。如果 SSH 私钥对这个组开放，OpenSSH 会认为不安全，从而报错。</li>
<li>在 Linux&#x2F;macOS 上同类错误通常表现为 Permissions 0644 for ‘xxx’ are too open，解决方法是 chmod 600 your_key。</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>制作U盘Linux系统</title>
    <url>/2025/03/03/%E5%88%B6%E4%BD%9CU%E7%9B%98Linux%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>注意两点:</p>
<ol>
<li>在给U盘分区的时候，一定要分一个<code>EFI</code>分区</li>
<li>制作好后，进入系统，确认启动文件有安装到U盘的<code>EFI</code>分区</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo grub-install --removable --recheck --efi-directory=/boot/efi</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>取消BitLocker正在等待激活状态</title>
    <url>/2025/03/03/%E5%8F%96%E6%B6%88BitLocker%E6%AD%A3%E5%9C%A8%E7%AD%89%E5%BE%85%E6%BF%80%E6%B4%BB%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<p>管理员运行<code>Powershell</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据分区文件的多少，需要的时间会有所不一样，一般10分钟内完成</span></span><br><span class="line">manage<span class="literal">-bde</span> <span class="literal">-off</span> c: </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>多版本Jar</title>
    <url>/2025/03/15/%E5%A4%9A%E7%89%88%E6%9C%ACJar/</url>
    <content><![CDATA[<h2 id="Java-的版本兼容性"><a href="#Java-的版本兼容性" class="headerlink" title="Java 的版本兼容性"></a>Java 的版本兼容性</h2><p>Java 的版本兼容性主要体现在两个方面：</p>
<ul>
<li>向后兼容（Backward Compatibility）：新版本的 Java 运行环境 (JRE) 能运行用旧版本编译的代码。这是 Java 最重要的兼容性特性之一，确保旧程序在新平台上仍然能够运行。要注意：如果旧代码使用了已废弃或移除的 API，会有兼容性问题。</li>
<li>向前兼容（Forward Compatibility）：旧版本的 Java 运行环境通常无法运行新版本编译的代码，除非在编译时做特殊处理。</li>
</ul>
<h3 id="影响兼容性的因素"><a href="#影响兼容性的因素" class="headerlink" title="影响兼容性的因素"></a>影响兼容性的因素</h3><ol>
<li>废弃和移除的 API<br>  某些旧 API 在新版本中被废弃甚至移除，可能导致不兼容。<br>  例如，<code>javax.xml.bind</code> 在 Java 9 被标记为废弃，并在 Java 11 中被移除。</li>
<li>内部 API 的限制<br>  例如，<code>sun.misc.Unsafe</code> 在早期版本中常被使用，但在新版本中受限制。</li>
<li>模块系统<br>  从 Java 9 开始引入了模块系统，某些内部 API 默认不可访问。</li>
<li>JVM 参数和行为变化<br>  某些 JVM 参数可能在新版本中被废弃或更改。</li>
</ol>
<h3 id="保持兼容性的最佳实践"><a href="#保持兼容性的最佳实践" class="headerlink" title="保持兼容性的最佳实践"></a>保持兼容性的最佳实践</h3><ol>
<li><p>使用 <code>--release</code> 编译，确保不会误用高版本 API。</p>
</li>
<li><p>避免使用内部 API，比如 <code>sun.misc.*</code>。</p>
</li>
<li><p>查看 JDK 的发布说明，关注废弃和移除的 API。</p>
</li>
<li><p>使用多版本 JAR（Multi-Release JARs）：<br>  支持在一个 JAR 中包含多个版本的类文件。<br>  示例：</p>
 <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">META-INF/versions/<span class="number">9</span>/...</span><br><span class="line">META-INF/versions/<span class="number">11</span>/...</span><br></pre></td></tr></table></figure>
</li>
<li><p>自动化测试：<br>  在不同 JDK 版本下测试，确保向后兼容。</p>
</li>
</ol>
<h2 id="多版本-JAR"><a href="#多版本-JAR" class="headerlink" title="多版本 JAR"></a>多版本 JAR</h2><p>多版本 JAR（Multi-Release JAR，简称 MRJAR）是一种允许在同一个 JAR 文件中，包含针对不同 Java 版本的类文件的机制。这样可以在高版本 Java 中使用新特性，同时保持对低版本 Java 的兼容性。</p>
<h3 id="多版本-JAR-的目录结构"><a href="#多版本-JAR-的目录结构" class="headerlink" title="多版本 JAR 的目录结构"></a>多版本 JAR 的目录结构</h3><figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">my-library.jar</span><br><span class="line">├── META-INF/</span><br><span class="line">│   ├── MANIFEST.MF</span><br><span class="line">│   └── versions/</span><br><span class="line">│       ├── <span class="number">11</span>/</span><br><span class="line">│       │   └── com/example/<span class="keyword">MyClass</span>.<span class="keyword">class</span></span><br><span class="line">│       └── <span class="number">17</span>/</span><br><span class="line">│           └── com/example/<span class="keyword">MyClass</span>.<span class="keyword">class</span></span><br><span class="line">└── com/</span><br><span class="line">    └── example/</span><br><span class="line">        └── <span class="keyword">MyClass</span>.<span class="keyword">class</span>  (Java <span class="number">8</span> 版本)</span><br></pre></td></tr></table></figure>

<ol>
<li>根目录下的类：为 Java 8 及以下版本提供的默认实现。</li>
<li><code>META-INF/versions/11/</code>：为 Java 11 及以上版本提供的类。</li>
<li><code>META-INF/versions/17/</code>：为 Java 17 及以上版本提供的类。</li>
</ol>
<h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><h4 id="编写-Java-8"><a href="#编写-Java-8" class="headerlink" title="编写 Java 8"></a>编写 Java 8</h4><p><code>src/main/java/org/frank/MyService.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.frank;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    String <span class="title function_">getVersion</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getCommonData</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>src/main/java/org/frank/BaseService.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.frank;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCommonData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;common data for All Version Support&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>src/main/java/org/frank/MyServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.frank;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">BaseService</span> <span class="keyword">implements</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getVersion</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Java 8 Version Support All&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编写-Java-11"><a href="#编写-Java-11" class="headerlink" title="编写 Java 11"></a>编写 Java 11</h4><p><code>src/main/java11/org/frank/MyServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.frank;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">BaseService</span> <span class="keyword">implements</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getVersion</span><span class="params">()</span> &#123;</span><br><span class="line">        Optional&lt;String&gt; version = Optional.of(<span class="string">&quot;Java 11 version with Optional&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> version.orElse(<span class="string">&quot;Unknown version&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编写-Java-17"><a href="#编写-Java-17" class="headerlink" title="编写 Java 17"></a>编写 Java 17</h4><p><code>src/main/java17/org/frank/MyServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.frank;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">BaseService</span> <span class="keyword">implements</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getVersion</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">version</span> <span class="operator">=</span> <span class="string">&quot;Java 17 version with isBlank&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> version.isBlank() ? <span class="string">&quot;Unknown&quot;</span> : version;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编写-Java-21"><a href="#编写-Java-21" class="headerlink" title="编写 Java 21"></a>编写 Java 21</h4><p><code>src/main/java21/org/frank/MyServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.frank;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">BaseService</span> <span class="keyword">implements</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getVersion</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">version</span> <span class="operator">=</span> <span class="string">&quot;Java 21 version with isBlank&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> version.isBlank() ? <span class="string">&quot;Unknown&quot;</span> : version;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编译代码"><a href="#编译代码" class="headerlink" title="编译代码"></a>编译代码</h3><h4 id="分别编译各版本"><a href="#分别编译各版本" class="headerlink" title="分别编译各版本"></a>分别编译各版本</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">jabba use system@<span class="number">8</span></span><br><span class="line">java <span class="literal">-version</span></span><br><span class="line">javac <span class="literal">-d</span> .\out\java8\ .\src\main\java\org\frank\*.java </span><br><span class="line">jabba use system@<span class="number">11</span></span><br><span class="line">java <span class="literal">-version</span></span><br><span class="line">javac  <span class="literal">--release</span> <span class="number">11</span>  <span class="literal">-d</span> .\out\java11\ .\src\main\java11\org\frank\*.java .   \src\main\java\org\frank\BaseService.java .\src\main\java\org\frank\MyService.java</span><br><span class="line">jabba use system@<span class="number">17</span></span><br><span class="line">java <span class="literal">-version</span></span><br><span class="line">javac  <span class="literal">--release</span> <span class="number">17</span>  <span class="literal">-d</span> .\out\java17\ .\src\main\java17\org\frank\*.java .   \src\main\java\org\frank\BaseService.java .\src\main\java\org\frank\MyService.java</span><br><span class="line">jabba use system@<span class="number">21</span></span><br><span class="line">java <span class="literal">-version</span></span><br><span class="line">javac  <span class="literal">--release</span> <span class="number">21</span> <span class="literal">-d</span> .\out\java21\ .\src\main\java21\org\frank\*.java .  \src\main\java\org\frank\BaseService.java .\src\main\java\org\frank\MyService.java</span><br></pre></td></tr></table></figure>

<h4 id="统一打包"><a href="#统一打包" class="headerlink" title="统一打包"></a>统一打包</h4><p>现在编译的 Java 11,Java 17,Java 21 的结果中包含重复的<code>MyService.class</code>,<code>BaseService.class</code>,把它们删除，然后打包 <code>jar</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">jar <span class="literal">--create</span> <span class="literal">--file</span> multi<span class="literal">-release-demo</span>.jar `</span><br><span class="line">    <span class="literal">--main-class</span> org.frank.MyServiceImpl  `</span><br><span class="line">    <span class="literal">-C</span> out/java8 . `</span><br><span class="line">    <span class="literal">--release</span> <span class="number">11</span> <span class="literal">-C</span> out/java11 . `</span><br><span class="line">    <span class="literal">--release</span> <span class="number">17</span> <span class="literal">-C</span> out/java17 . `</span><br><span class="line">    <span class="literal">--release</span> <span class="number">21</span> <span class="literal">-C</span> out/java21 .</span><br></pre></td></tr></table></figure>

<h3 id="验证多版本支持"><a href="#验证多版本支持" class="headerlink" title="验证多版本支持"></a>验证多版本支持</h3><p>现在多版本 Jar 就打包好了，可以用支持的版本验证了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyService</span> <span class="variable">myService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyServiceImpl</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">version</span> <span class="operator">=</span> myService.getVersion();</span><br><span class="line">        System.out.println(version);</span><br><span class="line">        <span class="type">String</span> <span class="variable">commonData</span> <span class="operator">=</span> myService.getCommonData();</span><br><span class="line">        System.out.println(commonData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分别使用 JDK 8, JDK 11, JDK 17, JDK21测试</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># JDK 8</span></span><br><span class="line">Java <span class="number">8</span> Version Support All</span><br><span class="line">common <span class="keyword">data</span> <span class="keyword">for</span> All Version Support</span><br><span class="line"><span class="comment"># JDK 11</span></span><br><span class="line">Java <span class="number">11</span> version with Optional</span><br><span class="line">common <span class="keyword">data</span> <span class="keyword">for</span> All Version Support</span><br><span class="line"><span class="comment"># JDK 17</span></span><br><span class="line">Java <span class="number">17</span> version with isBlank</span><br><span class="line">common <span class="keyword">data</span> <span class="keyword">for</span> All Version Support</span><br><span class="line"><span class="comment"># JDK 21</span></span><br><span class="line">Java <span class="number">21</span> version with isBlank</span><br><span class="line">common <span class="keyword">data</span> <span class="keyword">for</span> All Version Support</span><br></pre></td></tr></table></figure>

<ul>
<li><input disabled="" type="checkbox"> IntelliJ IDEA 怎么支持？</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hyper-V管理器显示的内存和虚拟机查看的内存不一致问题</title>
    <url>/2025/04/19/Hyper-V%E7%AE%A1%E7%90%86%E5%99%A8%E6%98%BE%E7%A4%BA%E7%9A%84%E5%86%85%E5%AD%98%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%9F%A5%E7%9C%8B%E7%9A%84%E5%86%85%E5%AD%98%E4%B8%8D%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="一、问题现象总结"><a href="#一、问题现象总结" class="headerlink" title="一、问题现象总结"></a>一、问题现象总结</h2><ul>
<li>Hyper-V 管理器显示内存占用：12 GB</li>
<li>Debian 12 系统内部（htop）看到内存总量：约 893 MB</li>
<li>使用了 动态内存配置：1 GB ~ 12 GB</li>
</ul>
<h2 id="二、原因解析"><a href="#二、原因解析" class="headerlink" title="二、原因解析"></a>二、原因解析</h2><ol>
<li>Hyper-V 的动态内存机制<br>Hyper-V 的动态内存技术会根据虚拟机的实际需求动态地：</li>
</ol>
<ul>
<li><p>分配或回收主机内存；</p>
</li>
<li><p>它不会马上告诉 Guest OS（这里是 Debian）完整的可用最大内存；</p>
</li>
<li><p>Guest OS 启动时，仅看到“启动分配的初始内存”（如你配置的是初始 1 GB）；</p>
</li>
<li><p>Hyper-V 会在后台 透明增加内存页，但 Guest OS 并不直接更新 total memory 的数字。</p>
</li>
<li><p>➤ 换句话说：<br>Hyper-V 分配了更多内存，但 Linux 默认并不更新 &#x2F;proc&#x2F;meminfo 或 htop 显示的 总内存值，因为：</p>
<ul>
<li>Linux 只认启动时的 e820 BIOS 内存映射；</li>
<li>热添加内存后，Linux 内核默认不刷新 total RAM（除非支持 memory hotplug 并启用 memhp_default_state&#x3D;online）。</li>
</ul>
</li>
</ul>
<ol>
<li>为什么 htop 显示只有 893 MB？<br>这是启动时初始内存（可能略低于 1G），并未反映 Hyper-V 后续增加的内存。</li>
</ol>
<h2 id="三、如何验证是否真的内存增加？"><a href="#三、如何验证是否真的内存增加？" class="headerlink" title="三、如何验证是否真的内存增加？"></a>三、如何验证是否真的内存增加？</h2><p>用以下命令确认系统是否收到了 Hyper-V 分配的额外内存：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -r . /sys/devices/system/memory/ | grep state</span><br></pre></td></tr></table></figure>

<p>如果看到 <code>/sys/devices/system/memory/memory*/state</code> 中有 多个 <code>memory block</code>，并且状态是 <code>online</code>，说明内存确实被添加，但可能未被正确统计。</p>
<h2 id="四、怎么让-Linux-识别这些新内存？"><a href="#四、怎么让-Linux-识别这些新内存？" class="headerlink" title="四、怎么让 Linux 识别这些新内存？"></a>四、怎么让 Linux 识别这些新内存？</h2><p>尝试以下方法让 Linux 正确识别增加的内存：</p>
<h3 id="方法一：开机参数添加自动上线热插内存"><a href="#方法一：开机参数添加自动上线热插内存" class="headerlink" title="方法一：开机参数添加自动上线热插内存"></a>方法一：开机参数添加自动上线热插内存</h3><p>编辑 <code>/etc/default/grub</code> 配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">&quot;quiet splash memhp_default_state=online&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后更新 grub 并重启：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> update-grub</span><br><span class="line"><span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure>

<h3 id="方法二：手动上线热插内存"><a href="#方法二：手动上线热插内存" class="headerlink" title="方法二：手动上线热插内存"></a>方法二：手动上线热插内存</h3><p>在系统运行后，可以执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> block <span class="keyword">in</span> /sys/devices/system/memory/memory*/state; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> online | <span class="built_in">sudo</span> <span class="built_in">tee</span> <span class="variable">$block</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>然后再执行 <code>free -h</code> 或 <code>htop</code> 看是否更新。</p>
<h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>Hyper-V 显示使用了 12 GB，但 Linux 只看到 893 MB Hyper-V 动态分配了更多内存，但 Linux 没自动识别 启用内存热插拔自动上线，或手动上线 memory block</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH连接Docker中的MySQL</title>
    <url>/2025/04/23/SSH%E8%BF%9E%E6%8E%A5Docker%E4%B8%AD%E7%9A%84MySQL/</url>
    <content><![CDATA[<h2 id="🐳💻-SSH-连接-Docker-中的-MySQL-容器-—-速查表"><a href="#🐳💻-SSH-连接-Docker-中的-MySQL-容器-—-速查表" class="headerlink" title="🐳💻 SSH 连接 Docker 中的 MySQL 容器 — 速查表"></a>🐳💻 SSH 连接 Docker 中的 MySQL 容器 — 速查表</h2><table>
<thead>
<tr>
<th>方式</th>
<th>命令</th>
<th>是否推荐</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>✅ 一次登录</td>
<td><code>ssh user@host -t &quot;sudo docker exec -it mysql mysql -uroot -p&quot;</code></td>
<td>⭐⭐⭐</td>
<td>成功率高，适合快速连接（注意 <code>-t</code> 位置！）</td>
</tr>
<tr>
<td>✅ 最推荐（稳！）</td>
<td><code>ssh -t user@host &quot;sudo docker exec -it mysql bash&quot;</code><br>（然后容器内手动 <code>mysql -uroot -p</code>）</td>
<td>⭐⭐⭐⭐</td>
<td>稳定、安全、适配性强，适合所有情况</td>
</tr>
<tr>
<td>🚀 快速执行 SQL</td>
<td><code>ssh user@host &quot;docker exec -i mysql mysql -uroot -p你的密码 -e &#39;SHOW DATABASES;&#39;&quot;</code></td>
<td>⭐⭐</td>
<td>自动化脚本、批处理时用；明文密码⚠️</td>
</tr>
<tr>
<td>✅ 正统方法（推荐）</td>
<td>SSH 隧道 + 本地客户端<br>1. <code>ssh -L 3307:127.0.0.1:3306 user@host</code><br>2. 本地连接 <code>mysql -h 127.0.0.1 -P 3307 -uroot -p</code></td>
<td>⭐⭐⭐⭐</td>
<td>安全、稳定、兼容图形工具</td>
</tr>
<tr>
<td>🚫 容易卡死的写法</td>
<td><code>ssh user@host &quot;docker exec -it mysql mysql -uroot -p&quot;</code></td>
<td>❌</td>
<td>没有 <code>-t</code>，会卡住或 stdin 无效</td>
</tr>
<tr>
<td>🚫 明文密码（仅测试）</td>
<td><code>ssh user@host &quot;docker exec -i mysql mysql -uroot -p你的密码&quot;</code></td>
<td>❌</td>
<td>密码暴露在命令行中，危险</td>
</tr>
</tbody></table>
<hr>
<h3 id="🧠-小贴士"><a href="#🧠-小贴士" class="headerlink" title="🧠 小贴士"></a>🧠 小贴士</h3><ul>
<li><code>-t</code>：请求伪终端，<strong>必须有才能安全交互</strong></li>
<li><code>-i</code>：保持标准输入，不然 <code>mysql</code> 接收不到你键盘输入</li>
<li>多层 SSH &#x2F; 跳板机？可以加 <code>-tt</code> 强制 tty</li>
</ul>
<hr>
<h3 id="🛠-推荐别名（Alias）"><a href="#🛠-推荐别名（Alias）" class="headerlink" title="🛠 推荐别名（Alias）"></a>🛠 推荐别名（Alias）</h3><p>写到 <code>~/.bashrc</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> mysql-remote=<span class="string">&#x27;ssh -t user@host &quot;sudo docker exec -it mysql bash&quot;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>下次只需要：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql-remote</span><br><span class="line"><span class="comment"># 然后容器里 mysql -uroot -p</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian启用内存压缩</title>
    <url>/2025/07/30/Debian%E5%90%AF%E7%94%A8%E5%86%85%E5%AD%98%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<h2 id="zswap-和-zram-的作用"><a href="#zswap-和-zram-的作用" class="headerlink" title="zswap 和 zram 的作用"></a>zswap 和 zram 的作用</h2><h3 id="zswap"><a href="#zswap" class="headerlink" title="zswap"></a>zswap</h3><p>作用：zswap 是 Linux 内核的一个功能，用于压缩交换页面（swap pages）以减少 I&#x2F;O 操作<br>工作原理：在将页面写入磁盘交换空间之前，先在内存中对其进行压缩<br>优势：</p>
<ul>
<li>减少交换 I&#x2F;O，提高系统性能</li>
<li>降低磁盘磨损（特别是 SSD）</li>
<li>更高效地利用内存资源</li>
</ul>
<h3 id="zram"><a href="#zram" class="headerlink" title="zram"></a>zram</h3><p>作用：zram 是一个虚拟的块设备，它将内存的一部分用作压缩块设备<br>工作原理：创建一个压缩的内存块设备，可以作为交换空间或临时存储使用<br>特点：</p>
<ul>
<li>无需物理存储设备</li>
<li>数据在内存中压缩存储</li>
<li>常用于内存受限的系统（如嵌入式设备、Chrome OS 等）</li>
</ul>
<h3 id="两者关系"><a href="#两者关系" class="headerlink" title="两者关系"></a>两者关系</h3><p>zram 可以与 zswap 配合使用，提供更高效的内存管理方案<br>在某些场景下，zram 可以作为 zswap 的后端存储<br>都旨在通过压缩技术优化内存使用和系统性能</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="临时启用"><a href="#临时启用" class="headerlink" title="临时启用"></a>临时启用</h3><ol>
<li><p>启用 zswap</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 临时启用 zswap（重启后失效）</span></span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /sys/module/zswap/parameters/enabled</span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久启用 zswap，编辑 GRUB 配置</span></span><br><span class="line"><span class="built_in">sudo</span> vi /etc/default/grub</span><br><span class="line"><span class="comment"># 在 GRUB_CMDLINE_LINUX 行添加 zswap.enabled=1</span></span><br><span class="line"><span class="comment"># 例如：GRUB_CMDLINE_LINUX=&quot;... zswap.enabled=1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新 GRUB 配置</span></span><br><span class="line"><span class="built_in">sudo</span> update-grub</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 zswap 参数（可选）</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置压缩算法（默认通常是 lz4）</span></span><br><span class="line"><span class="built_in">echo</span> lz4 &gt; /sys/module/zswap/parameters/compressor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置内存池最大占用比例（默认 20%）</span></span><br><span class="line"><span class="built_in">echo</span> 25 &gt; /sys/module/zswap/parameters/max_pool_percent</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 zram 设备</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加载 zram 内核模块</span></span><br><span class="line"><span class="built_in">sudo</span> modprobe zram</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 zram 设备（例如创建一个 1GB 的设备）</span></span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /sys/class/zram-control/hot_add</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 zram 设备参数</span></span><br><span class="line"><span class="built_in">echo</span> 1G &gt; /sys/block/zram0/disksize</span><br><span class="line"><span class="built_in">echo</span> lz4 &gt; /sys/block/zram0/comp_algorithm</span><br></pre></td></tr></table></figure>
</li>
<li><p>将 zram 用作交换空间</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式化 zram 为交换空间</span></span><br><span class="line"><span class="built_in">sudo</span> mkswap /dev/zram0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用交换空间</span></span><br><span class="line"><span class="built_in">sudo</span> swapon /dev/zram0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看交换空间状态</span></span><br><span class="line">swapon --show</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="永久配置"><a href="#永久配置" class="headerlink" title="永久配置"></a>永久配置</h3><h4 id="方法一：使用-systemd-配置"><a href="#方法一：使用-systemd-配置" class="headerlink" title="方法一：使用 systemd 配置"></a>方法一：使用 systemd 配置</h4><ol>
<li><p>创建 zram 配置服务：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建配置脚本</span></span><br><span class="line"><span class="built_in">sudo</span> vi /usr/local/bin/setup-zram.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>set-up-zram.sh 内容：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">modprobe zram</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /sys/class/zram-control/hot_add</span><br><span class="line"><span class="built_in">echo</span> 1G &gt; /sys/block/zram0/disksize</span><br><span class="line"><span class="built_in">echo</span> lz4 &gt; /sys/block/zram0/comp_algorithm</span><br><span class="line">mkswap /dev/zram0</span><br><span class="line">swapon /dev/zram0</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行命令</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给脚本添加执行权限</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> +x /usr/local/bin/setup-zram.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 systemd 服务</span></span><br><span class="line"><span class="built_in">sudo</span> vi /etc/systemd/system/zram.service</span><br></pre></td></tr></table></figure>
</li>
<li><p>zram.service 内容：</p>
 <figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Setup ZRAM</span><br><span class="line"><span class="attr">After</span>=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=<span class="literal">on</span>eshot</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/bin/setup-zram.sh</span><br><span class="line"><span class="attr">RemainAfterExit</span>=<span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动服务</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用服务</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> zram.service</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="方法二：使用-zram-tools-包"><a href="#方法二：使用-zram-tools-包" class="headerlink" title="方法二：使用 zram-tools 包"></a>方法二：使用 zram-tools 包</h4><ol>
<li><p>安装 zram-tools 包</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 zram-tools</span></span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install zram-tools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 zram-tools</span></span><br><span class="line"><span class="built_in">sudo</span> vi /etc/default/zramswap</span><br></pre></td></tr></table></figure>

<p> 在配置文件中设置参数：</p>
 <figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">ALGO</span>=lz4</span><br><span class="line"><span class="comment"># DEVICE_SIZE=1G</span></span><br><span class="line"><span class="attr">PERCENT</span>=<span class="number">50</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启用并启动 zramswap 服务</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> zramswap</span><br><span class="line"><span class="built_in">sudo</span> systemctl start zramswap</span><br><span class="line"><span class="comment"># 查看交换空间，包括优先级</span></span><br><span class="line"><span class="built_in">cat</span> /proc/swaps</span><br><span class="line"><span class="comment"># 查看 zram-tools 包安装了哪些服务</span></span><br><span class="line">dpkg -L zram-tools | grep systemd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者查找系统中所有与 zram 相关的服务</span></span><br><span class="line">systemctl list-unit-files | grep zram</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="验证配置"><a href="#验证配置" class="headerlink" title="验证配置"></a>验证配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查 zswap 状态</span></span><br><span class="line"><span class="built_in">cat</span> /sys/module/zswap/parameters/enabled</span><br><span class="line"><span class="built_in">cat</span> /sys/module/zswap/parameters/compressor</span><br><span class="line"><span class="built_in">cat</span> /sys/module/zswap/parameters/max_pool_percen</span><br><span class="line"><span class="comment"># 检查 zram 状态</span></span><br><span class="line"><span class="built_in">cat</span> /sys/block/zram0/disksize</span><br><span class="line"><span class="built_in">cat</span> /sys/block/zram0/comp_algorith</span><br><span class="line"><span class="comment"># 查看内存和交换使用情况</span></span><br><span class="line">free -h</span><br><span class="line">swapon --sho</span><br><span class="line"><span class="comment"># 查看 zswap 统计信息</span></span><br><span class="line">grep -R . /sys/kernel/debug/zswap/</span><br></pre></td></tr></table></figure>

<p>注意事项</p>
<ul>
<li>根据系统内存大小调整 zram 设备大小（通常为物理内存的 25-50%）</li>
<li>选择合适的压缩算法（lz4 速度快，zstd 压缩比高）</li>
<li>监控系统性能，避免过度使用导致系统变慢</li>
<li>在内存充足的系统中，效果可能不明显</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Debian12</tag>
        <tag>zram</tag>
        <tag>zswap</tag>
      </tags>
  </entry>
  <entry>
    <title>使用命令查看占用CPU的Java线程</title>
    <url>/2025/07/23/%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E6%9F%A5%E7%9C%8B%E5%8D%A0%E7%94%A8CPU%E7%9A%84Java%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<ol>
<li><p>找到 <code>%CPU</code> 最高的进程 PID</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure>
</li>
<li><p>找到占用CPU高的 线程ID</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">top -H -p PID </span><br></pre></td></tr></table></figure>
</li>
<li><p>查看占用CPU的Java线程的堆栈</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-A 20 显示 20行信息</span></span><br><span class="line">jstack 进程PID | grep 线程ID -A 20</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>在Hyper-V安装的Debian10禁用swap</title>
    <url>/2025/07/24/%E5%9C%A8Hyper-V%E5%AE%89%E8%A3%85%E7%9A%84Debian10%E7%A6%81%E7%94%A8swap/</url>
    <content><![CDATA[<blockquote>
<p>在Hyper-V中安装了Debian 10测试K8S，Debian 10重启后都会自动加载 swap 分区，即使已经注释了 <code>/etc/fstab</code> 中swap行，导致K8S启动失败。这是因为 <code>initramfs</code> 内硬编码了 swap 分区信息（设备名或 UUID）</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 找到 swap 分区设备名：</span></span><br><span class="line">swapon --show</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 屏蔽设备 swap unit。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.1 假设输出： /dev/sda2</span></span><br><span class="line">sudo systemctl mask dev-sda2.swap</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.2 如果名字是 dev-disk-by-uuid-xxxxxx.swap，则 mask 那个 unit：</span></span><br><span class="line">sudo systemctl mask &quot;dev-disk-by-uuid-&lt;your-uuid&gt;.swap&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 重新构建 initramfs</span></span><br><span class="line">sudo update-initramfs -u</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4. 重启验证</span></span><br><span class="line">sudo reboot</span><br><span class="line">swapon --show</span><br></pre></td></tr></table></figure>

<p>或者使用 <code>fdisk</code> 删除 <code>swap</code> 分区</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Linux,Debian</tag>
      </tags>
  </entry>
</search>
